
smart_home_F030.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002c1c  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000048  08002cdc  08002cdc  00012cdc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002d24  08002d24  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08002d24  08002d24  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002d24  08002d24  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002d24  08002d24  00012d24  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002d28  08002d28  00012d28  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08002d2c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000094  2000000c  08002d38  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200000a0  08002d38  000200a0  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00006b95  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000140f  00000000  00000000  00026bc9  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000006f0  00000000  00000000  00027fd8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000648  00000000  00000000  000286c8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0000f54b  00000000  00000000  00028d10  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00005e0d  00000000  00000000  0003825b  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00059cd5  00000000  00000000  0003e068  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00097d3d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000017e0  00000000  00000000  00097db8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000000c 	.word	0x2000000c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08002cc4 	.word	0x08002cc4

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000010 	.word	0x20000010
 8000104:	08002cc4 	.word	0x08002cc4

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000220:	b5b0      	push	{r4, r5, r7, lr}
 8000222:	b08a      	sub	sp, #40	; 0x28
 8000224:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000226:	f000 feef 	bl	8001008 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800022a:	f000 f869 	bl	8000300 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800022e:	f000 f8e5 	bl	80003fc <MX_GPIO_Init>
  MX_SPI1_Init();
 8000232:	f000 f8a5 	bl	8000380 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */

  isChipConnected();  // not checking result because it is often wrong
 8000236:	f000 fb6f 	bl	8000918 <isChipConnected>
  NRF_Init();
 800023a:	f000 faf1 	bl	8000820 <NRF_Init>
  setPALevel(RF24_PA_MAX);
 800023e:	2003      	movs	r0, #3
 8000240:	f000 fd84 	bl	8000d4c <setPALevel>
  setDataRate(RF24_1MBPS);
 8000244:	2000      	movs	r0, #0
 8000246:	f000 fdb3 	bl	8000db0 <setDataRate>
  setAddressWidth(5);
 800024a:	2005      	movs	r0, #5
 800024c:	f000 fca8 	bl	8000ba0 <setAddressWidth>
  enableAckPayload();
 8000250:	f000 fd18 	bl	8000c84 <enableAckPayload>
  setChannel(103);
 8000254:	2067      	movs	r0, #103	; 0x67
 8000256:	f000 fad2 	bl	80007fe <setChannel>

  openReadingPipe(1, 0xA83C70FD6BLL);
 800025a:	4b28      	ldr	r3, [pc, #160]	; (80002fc <main+0xdc>)
 800025c:	24a8      	movs	r4, #168	; 0xa8
 800025e:	001a      	movs	r2, r3
 8000260:	0023      	movs	r3, r4
 8000262:	2001      	movs	r0, #1
 8000264:	f000 fc36 	bl	8000ad4 <openReadingPipe>
  startListening();
 8000268:	f000 fb6e 	bl	8000948 <startListening>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  uint8_t buf[32] = {0,};
 800026c:	1d3b      	adds	r3, r7, #4
 800026e:	0018      	movs	r0, r3
 8000270:	2320      	movs	r3, #32
 8000272:	001a      	movs	r2, r3
 8000274:	2100      	movs	r1, #0
 8000276:	f002 fd1c 	bl	8002cb2 <memset>
  uint8_t pipeId = 0;
 800027a:	1cfb      	adds	r3, r7, #3
 800027c:	2200      	movs	r2, #0
 800027e:	701a      	strb	r2, [r3, #0]
  uint8_t respMsg = 0;
 8000280:	1cbb      	adds	r3, r7, #2
 8000282:	2200      	movs	r2, #0
 8000284:	701a      	strb	r2, [r3, #0]
  while (1) {
    if (available(&pipeId)) {
 8000286:	1cfb      	adds	r3, r7, #3
 8000288:	0018      	movs	r0, r3
 800028a:	f000 fbe7 	bl	8000a5c <available>
 800028e:	1e03      	subs	r3, r0, #0
 8000290:	d0f9      	beq.n	8000286 <main+0x66>
      if (pipeId == 1) {
 8000292:	1cfb      	adds	r3, r7, #3
 8000294:	781b      	ldrb	r3, [r3, #0]
 8000296:	2b01      	cmp	r3, #1
 8000298:	d1f5      	bne.n	8000286 <main+0x66>
        uint8_t length = getDynamicPayloadSize();
 800029a:	2527      	movs	r5, #39	; 0x27
 800029c:	197c      	adds	r4, r7, r5
 800029e:	f000 fba9 	bl	80009f4 <getDynamicPayloadSize>
 80002a2:	0003      	movs	r3, r0
 80002a4:	7023      	strb	r3, [r4, #0]
        read(buf, length);
 80002a6:	197b      	adds	r3, r7, r5
 80002a8:	781a      	ldrb	r2, [r3, #0]
 80002aa:	1d3b      	adds	r3, r7, #4
 80002ac:	0011      	movs	r1, r2
 80002ae:	0018      	movs	r0, r3
 80002b0:	f000 fbf9 	bl	8000aa6 <read>
        if (length >= 3 && buf[0] == 77 && buf[1] == 86 && buf[2] == 97) {
 80002b4:	197b      	adds	r3, r7, r5
 80002b6:	781b      	ldrb	r3, [r3, #0]
 80002b8:	2b02      	cmp	r3, #2
 80002ba:	d9e4      	bls.n	8000286 <main+0x66>
 80002bc:	1d3b      	adds	r3, r7, #4
 80002be:	781b      	ldrb	r3, [r3, #0]
 80002c0:	2b4d      	cmp	r3, #77	; 0x4d
 80002c2:	d1e0      	bne.n	8000286 <main+0x66>
 80002c4:	1d3b      	adds	r3, r7, #4
 80002c6:	785b      	ldrb	r3, [r3, #1]
 80002c8:	2b56      	cmp	r3, #86	; 0x56
 80002ca:	d1dc      	bne.n	8000286 <main+0x66>
 80002cc:	1d3b      	adds	r3, r7, #4
 80002ce:	789b      	ldrb	r3, [r3, #2]
 80002d0:	2b61      	cmp	r3, #97	; 0x61
 80002d2:	d1d8      	bne.n	8000286 <main+0x66>
          ++respMsg;
 80002d4:	1cbb      	adds	r3, r7, #2
 80002d6:	781b      	ldrb	r3, [r3, #0]
 80002d8:	3301      	adds	r3, #1
 80002da:	b2da      	uxtb	r2, r3
 80002dc:	1cbb      	adds	r3, r7, #2
 80002de:	701a      	strb	r2, [r3, #0]
          writeAckPayload(pipeId, &respMsg, sizeof(respMsg));
 80002e0:	1cfb      	adds	r3, r7, #3
 80002e2:	781b      	ldrb	r3, [r3, #0]
 80002e4:	1cb9      	adds	r1, r7, #2
 80002e6:	2201      	movs	r2, #1
 80002e8:	0018      	movs	r0, r3
 80002ea:	f000 fced 	bl	8000cc8 <writeAckPayload>
          HAL_GPIO_TogglePin(OnboardLED_GPIO_Port, OnboardLED_Pin);
 80002ee:	2390      	movs	r3, #144	; 0x90
 80002f0:	05db      	lsls	r3, r3, #23
 80002f2:	2110      	movs	r1, #16
 80002f4:	0018      	movs	r0, r3
 80002f6:	f001 f94e 	bl	8001596 <HAL_GPIO_TogglePin>
    if (available(&pipeId)) {
 80002fa:	e7c4      	b.n	8000286 <main+0x66>
 80002fc:	3c70fd6b 	.word	0x3c70fd6b

08000300 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000300:	b590      	push	{r4, r7, lr}
 8000302:	b091      	sub	sp, #68	; 0x44
 8000304:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000306:	2410      	movs	r4, #16
 8000308:	193b      	adds	r3, r7, r4
 800030a:	0018      	movs	r0, r3
 800030c:	2330      	movs	r3, #48	; 0x30
 800030e:	001a      	movs	r2, r3
 8000310:	2100      	movs	r1, #0
 8000312:	f002 fcce 	bl	8002cb2 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000316:	003b      	movs	r3, r7
 8000318:	0018      	movs	r0, r3
 800031a:	2310      	movs	r3, #16
 800031c:	001a      	movs	r2, r3
 800031e:	2100      	movs	r1, #0
 8000320:	f002 fcc7 	bl	8002cb2 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000324:	0021      	movs	r1, r4
 8000326:	187b      	adds	r3, r7, r1
 8000328:	2202      	movs	r2, #2
 800032a:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800032c:	187b      	adds	r3, r7, r1
 800032e:	2201      	movs	r2, #1
 8000330:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000332:	187b      	adds	r3, r7, r1
 8000334:	2210      	movs	r2, #16
 8000336:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000338:	187b      	adds	r3, r7, r1
 800033a:	2200      	movs	r2, #0
 800033c:	621a      	str	r2, [r3, #32]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800033e:	187b      	adds	r3, r7, r1
 8000340:	0018      	movs	r0, r3
 8000342:	f001 f943 	bl	80015cc <HAL_RCC_OscConfig>
 8000346:	1e03      	subs	r3, r0, #0
 8000348:	d001      	beq.n	800034e <SystemClock_Config+0x4e>
  {
    Error_Handler();
 800034a:	f000 f8f5 	bl	8000538 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800034e:	003b      	movs	r3, r7
 8000350:	2207      	movs	r2, #7
 8000352:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000354:	003b      	movs	r3, r7
 8000356:	2200      	movs	r2, #0
 8000358:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800035a:	003b      	movs	r3, r7
 800035c:	2200      	movs	r2, #0
 800035e:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000360:	003b      	movs	r3, r7
 8000362:	2200      	movs	r2, #0
 8000364:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000366:	003b      	movs	r3, r7
 8000368:	2100      	movs	r1, #0
 800036a:	0018      	movs	r0, r3
 800036c:	f001 fc4a 	bl	8001c04 <HAL_RCC_ClockConfig>
 8000370:	1e03      	subs	r3, r0, #0
 8000372:	d001      	beq.n	8000378 <SystemClock_Config+0x78>
  {
    Error_Handler();
 8000374:	f000 f8e0 	bl	8000538 <Error_Handler>
  }
}
 8000378:	46c0      	nop			; (mov r8, r8)
 800037a:	46bd      	mov	sp, r7
 800037c:	b011      	add	sp, #68	; 0x44
 800037e:	bd90      	pop	{r4, r7, pc}

08000380 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000380:	b580      	push	{r7, lr}
 8000382:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000384:	4b1b      	ldr	r3, [pc, #108]	; (80003f4 <MX_SPI1_Init+0x74>)
 8000386:	4a1c      	ldr	r2, [pc, #112]	; (80003f8 <MX_SPI1_Init+0x78>)
 8000388:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800038a:	4b1a      	ldr	r3, [pc, #104]	; (80003f4 <MX_SPI1_Init+0x74>)
 800038c:	2282      	movs	r2, #130	; 0x82
 800038e:	0052      	lsls	r2, r2, #1
 8000390:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000392:	4b18      	ldr	r3, [pc, #96]	; (80003f4 <MX_SPI1_Init+0x74>)
 8000394:	2200      	movs	r2, #0
 8000396:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000398:	4b16      	ldr	r3, [pc, #88]	; (80003f4 <MX_SPI1_Init+0x74>)
 800039a:	22e0      	movs	r2, #224	; 0xe0
 800039c:	00d2      	lsls	r2, r2, #3
 800039e:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80003a0:	4b14      	ldr	r3, [pc, #80]	; (80003f4 <MX_SPI1_Init+0x74>)
 80003a2:	2200      	movs	r2, #0
 80003a4:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80003a6:	4b13      	ldr	r3, [pc, #76]	; (80003f4 <MX_SPI1_Init+0x74>)
 80003a8:	2200      	movs	r2, #0
 80003aa:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80003ac:	4b11      	ldr	r3, [pc, #68]	; (80003f4 <MX_SPI1_Init+0x74>)
 80003ae:	2280      	movs	r2, #128	; 0x80
 80003b0:	0092      	lsls	r2, r2, #2
 80003b2:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80003b4:	4b0f      	ldr	r3, [pc, #60]	; (80003f4 <MX_SPI1_Init+0x74>)
 80003b6:	2200      	movs	r2, #0
 80003b8:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80003ba:	4b0e      	ldr	r3, [pc, #56]	; (80003f4 <MX_SPI1_Init+0x74>)
 80003bc:	2200      	movs	r2, #0
 80003be:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80003c0:	4b0c      	ldr	r3, [pc, #48]	; (80003f4 <MX_SPI1_Init+0x74>)
 80003c2:	2200      	movs	r2, #0
 80003c4:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80003c6:	4b0b      	ldr	r3, [pc, #44]	; (80003f4 <MX_SPI1_Init+0x74>)
 80003c8:	2200      	movs	r2, #0
 80003ca:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 80003cc:	4b09      	ldr	r3, [pc, #36]	; (80003f4 <MX_SPI1_Init+0x74>)
 80003ce:	2207      	movs	r2, #7
 80003d0:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80003d2:	4b08      	ldr	r3, [pc, #32]	; (80003f4 <MX_SPI1_Init+0x74>)
 80003d4:	2200      	movs	r2, #0
 80003d6:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80003d8:	4b06      	ldr	r3, [pc, #24]	; (80003f4 <MX_SPI1_Init+0x74>)
 80003da:	2208      	movs	r2, #8
 80003dc:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80003de:	4b05      	ldr	r3, [pc, #20]	; (80003f4 <MX_SPI1_Init+0x74>)
 80003e0:	0018      	movs	r0, r3
 80003e2:	f001 fd41 	bl	8001e68 <HAL_SPI_Init>
 80003e6:	1e03      	subs	r3, r0, #0
 80003e8:	d001      	beq.n	80003ee <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 80003ea:	f000 f8a5 	bl	8000538 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80003ee:	46c0      	nop			; (mov r8, r8)
 80003f0:	46bd      	mov	sp, r7
 80003f2:	bd80      	pop	{r7, pc}
 80003f4:	20000034 	.word	0x20000034
 80003f8:	40013000 	.word	0x40013000

080003fc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80003fc:	b590      	push	{r4, r7, lr}
 80003fe:	b089      	sub	sp, #36	; 0x24
 8000400:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000402:	240c      	movs	r4, #12
 8000404:	193b      	adds	r3, r7, r4
 8000406:	0018      	movs	r0, r3
 8000408:	2314      	movs	r3, #20
 800040a:	001a      	movs	r2, r3
 800040c:	2100      	movs	r1, #0
 800040e:	f002 fc50 	bl	8002cb2 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000412:	4b44      	ldr	r3, [pc, #272]	; (8000524 <MX_GPIO_Init+0x128>)
 8000414:	695a      	ldr	r2, [r3, #20]
 8000416:	4b43      	ldr	r3, [pc, #268]	; (8000524 <MX_GPIO_Init+0x128>)
 8000418:	2180      	movs	r1, #128	; 0x80
 800041a:	03c9      	lsls	r1, r1, #15
 800041c:	430a      	orrs	r2, r1
 800041e:	615a      	str	r2, [r3, #20]
 8000420:	4b40      	ldr	r3, [pc, #256]	; (8000524 <MX_GPIO_Init+0x128>)
 8000422:	695a      	ldr	r2, [r3, #20]
 8000424:	2380      	movs	r3, #128	; 0x80
 8000426:	03db      	lsls	r3, r3, #15
 8000428:	4013      	ands	r3, r2
 800042a:	60bb      	str	r3, [r7, #8]
 800042c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800042e:	4b3d      	ldr	r3, [pc, #244]	; (8000524 <MX_GPIO_Init+0x128>)
 8000430:	695a      	ldr	r2, [r3, #20]
 8000432:	4b3c      	ldr	r3, [pc, #240]	; (8000524 <MX_GPIO_Init+0x128>)
 8000434:	2180      	movs	r1, #128	; 0x80
 8000436:	0289      	lsls	r1, r1, #10
 8000438:	430a      	orrs	r2, r1
 800043a:	615a      	str	r2, [r3, #20]
 800043c:	4b39      	ldr	r3, [pc, #228]	; (8000524 <MX_GPIO_Init+0x128>)
 800043e:	695a      	ldr	r2, [r3, #20]
 8000440:	2380      	movs	r3, #128	; 0x80
 8000442:	029b      	lsls	r3, r3, #10
 8000444:	4013      	ands	r3, r2
 8000446:	607b      	str	r3, [r7, #4]
 8000448:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800044a:	4b36      	ldr	r3, [pc, #216]	; (8000524 <MX_GPIO_Init+0x128>)
 800044c:	695a      	ldr	r2, [r3, #20]
 800044e:	4b35      	ldr	r3, [pc, #212]	; (8000524 <MX_GPIO_Init+0x128>)
 8000450:	2180      	movs	r1, #128	; 0x80
 8000452:	02c9      	lsls	r1, r1, #11
 8000454:	430a      	orrs	r2, r1
 8000456:	615a      	str	r2, [r3, #20]
 8000458:	4b32      	ldr	r3, [pc, #200]	; (8000524 <MX_GPIO_Init+0x128>)
 800045a:	695a      	ldr	r2, [r3, #20]
 800045c:	2380      	movs	r3, #128	; 0x80
 800045e:	02db      	lsls	r3, r3, #11
 8000460:	4013      	ands	r3, r2
 8000462:	603b      	str	r3, [r7, #0]
 8000464:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, OUT1_Pin|OUT2_Pin, GPIO_PIN_RESET);
 8000466:	4b30      	ldr	r3, [pc, #192]	; (8000528 <MX_GPIO_Init+0x12c>)
 8000468:	2200      	movs	r2, #0
 800046a:	2103      	movs	r1, #3
 800046c:	0018      	movs	r0, r3
 800046e:	f001 f875 	bl	800155c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, OUT5_Pin|CE_Pin|CSN_Pin|OnboardLED_Pin
 8000472:	492e      	ldr	r1, [pc, #184]	; (800052c <MX_GPIO_Init+0x130>)
 8000474:	2390      	movs	r3, #144	; 0x90
 8000476:	05db      	lsls	r3, r3, #23
 8000478:	2200      	movs	r2, #0
 800047a:	0018      	movs	r0, r3
 800047c:	f001 f86e 	bl	800155c <HAL_GPIO_WritePin>
                          |OUT4_Pin|OUT3_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OUT6_GPIO_Port, OUT6_Pin, GPIO_PIN_RESET);
 8000480:	4b2b      	ldr	r3, [pc, #172]	; (8000530 <MX_GPIO_Init+0x134>)
 8000482:	2200      	movs	r2, #0
 8000484:	2102      	movs	r1, #2
 8000486:	0018      	movs	r0, r3
 8000488:	f001 f868 	bl	800155c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : OUT1_Pin OUT2_Pin */
  GPIO_InitStruct.Pin = OUT1_Pin|OUT2_Pin;
 800048c:	193b      	adds	r3, r7, r4
 800048e:	2203      	movs	r2, #3
 8000490:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000492:	193b      	adds	r3, r7, r4
 8000494:	2201      	movs	r2, #1
 8000496:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000498:	193b      	adds	r3, r7, r4
 800049a:	2200      	movs	r2, #0
 800049c:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800049e:	193b      	adds	r3, r7, r4
 80004a0:	2200      	movs	r2, #0
 80004a2:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80004a4:	193b      	adds	r3, r7, r4
 80004a6:	4a20      	ldr	r2, [pc, #128]	; (8000528 <MX_GPIO_Init+0x12c>)
 80004a8:	0019      	movs	r1, r3
 80004aa:	0010      	movs	r0, r2
 80004ac:	f000 fee6 	bl	800127c <HAL_GPIO_Init>

  /*Configure GPIO pins : OUT5_Pin CE_Pin CSN_Pin OnboardLED_Pin
                           OUT4_Pin OUT3_Pin */
  GPIO_InitStruct.Pin = OUT5_Pin|CE_Pin|CSN_Pin|OnboardLED_Pin
 80004b0:	193b      	adds	r3, r7, r4
 80004b2:	4a1e      	ldr	r2, [pc, #120]	; (800052c <MX_GPIO_Init+0x130>)
 80004b4:	601a      	str	r2, [r3, #0]
                          |OUT4_Pin|OUT3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80004b6:	193b      	adds	r3, r7, r4
 80004b8:	2201      	movs	r2, #1
 80004ba:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004bc:	193b      	adds	r3, r7, r4
 80004be:	2200      	movs	r2, #0
 80004c0:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80004c2:	193b      	adds	r3, r7, r4
 80004c4:	2200      	movs	r2, #0
 80004c6:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80004c8:	193a      	adds	r2, r7, r4
 80004ca:	2390      	movs	r3, #144	; 0x90
 80004cc:	05db      	lsls	r3, r3, #23
 80004ce:	0011      	movs	r1, r2
 80004d0:	0018      	movs	r0, r3
 80004d2:	f000 fed3 	bl	800127c <HAL_GPIO_Init>

  /*Configure GPIO pin : IRQ_Pin */
  GPIO_InitStruct.Pin = IRQ_Pin;
 80004d6:	193b      	adds	r3, r7, r4
 80004d8:	2202      	movs	r2, #2
 80004da:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80004dc:	193b      	adds	r3, r7, r4
 80004de:	4a15      	ldr	r2, [pc, #84]	; (8000534 <MX_GPIO_Init+0x138>)
 80004e0:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004e2:	193b      	adds	r3, r7, r4
 80004e4:	2200      	movs	r2, #0
 80004e6:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(IRQ_GPIO_Port, &GPIO_InitStruct);
 80004e8:	193a      	adds	r2, r7, r4
 80004ea:	2390      	movs	r3, #144	; 0x90
 80004ec:	05db      	lsls	r3, r3, #23
 80004ee:	0011      	movs	r1, r2
 80004f0:	0018      	movs	r0, r3
 80004f2:	f000 fec3 	bl	800127c <HAL_GPIO_Init>

  /*Configure GPIO pin : OUT6_Pin */
  GPIO_InitStruct.Pin = OUT6_Pin;
 80004f6:	0021      	movs	r1, r4
 80004f8:	187b      	adds	r3, r7, r1
 80004fa:	2202      	movs	r2, #2
 80004fc:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80004fe:	187b      	adds	r3, r7, r1
 8000500:	2201      	movs	r2, #1
 8000502:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000504:	187b      	adds	r3, r7, r1
 8000506:	2200      	movs	r2, #0
 8000508:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800050a:	187b      	adds	r3, r7, r1
 800050c:	2200      	movs	r2, #0
 800050e:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(OUT6_GPIO_Port, &GPIO_InitStruct);
 8000510:	187b      	adds	r3, r7, r1
 8000512:	4a07      	ldr	r2, [pc, #28]	; (8000530 <MX_GPIO_Init+0x134>)
 8000514:	0019      	movs	r1, r3
 8000516:	0010      	movs	r0, r2
 8000518:	f000 feb0 	bl	800127c <HAL_GPIO_Init>

}
 800051c:	46c0      	nop			; (mov r8, r8)
 800051e:	46bd      	mov	sp, r7
 8000520:	b009      	add	sp, #36	; 0x24
 8000522:	bd90      	pop	{r4, r7, pc}
 8000524:	40021000 	.word	0x40021000
 8000528:	48001400 	.word	0x48001400
 800052c:	0000061d 	.word	0x0000061d
 8000530:	48000400 	.word	0x48000400
 8000534:	10210000 	.word	0x10210000

08000538 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000538:	b580      	push	{r7, lr}
 800053a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800053c:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800053e:	e7fe      	b.n	800053e <Error_Handler+0x6>

08000540 <csn>:
uint8_t pipe0_reading_address[5] = {0,}; /**< Last address set on pipe 0 for reading. */
uint8_t addr_width = 0; /**< The address width to use - 3,4 or 5 bytes. */
uint8_t txDelay = 0;

void csn(uint8_t level)
{
 8000540:	b580      	push	{r7, lr}
 8000542:	b082      	sub	sp, #8
 8000544:	af00      	add	r7, sp, #0
 8000546:	0002      	movs	r2, r0
 8000548:	1dfb      	adds	r3, r7, #7
 800054a:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_WritePin(CSN_GPIO_Port, CSN_Pin, level);
 800054c:	1dfb      	adds	r3, r7, #7
 800054e:	781a      	ldrb	r2, [r3, #0]
 8000550:	2390      	movs	r3, #144	; 0x90
 8000552:	05db      	lsls	r3, r3, #23
 8000554:	2108      	movs	r1, #8
 8000556:	0018      	movs	r0, r3
 8000558:	f001 f800 	bl	800155c <HAL_GPIO_WritePin>
	//delay_us(5);
}
 800055c:	46c0      	nop			; (mov r8, r8)
 800055e:	46bd      	mov	sp, r7
 8000560:	b002      	add	sp, #8
 8000562:	bd80      	pop	{r7, pc}

08000564 <ce>:

void ce(uint8_t level)
{
 8000564:	b580      	push	{r7, lr}
 8000566:	b082      	sub	sp, #8
 8000568:	af00      	add	r7, sp, #0
 800056a:	0002      	movs	r2, r0
 800056c:	1dfb      	adds	r3, r7, #7
 800056e:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_WritePin(CE_GPIO_Port, CE_Pin, level);
 8000570:	1dfb      	adds	r3, r7, #7
 8000572:	781a      	ldrb	r2, [r3, #0]
 8000574:	2390      	movs	r3, #144	; 0x90
 8000576:	05db      	lsls	r3, r3, #23
 8000578:	2104      	movs	r1, #4
 800057a:	0018      	movs	r0, r3
 800057c:	f000 ffee 	bl	800155c <HAL_GPIO_WritePin>
}
 8000580:	46c0      	nop			; (mov r8, r8)
 8000582:	46bd      	mov	sp, r7
 8000584:	b002      	add	sp, #8
 8000586:	bd80      	pop	{r7, pc}

08000588 <read_register>:

uint8_t read_register(uint8_t reg)
{
 8000588:	b5b0      	push	{r4, r5, r7, lr}
 800058a:	b086      	sub	sp, #24
 800058c:	af02      	add	r7, sp, #8
 800058e:	0002      	movs	r2, r0
 8000590:	1dfb      	adds	r3, r7, #7
 8000592:	701a      	strb	r2, [r3, #0]
	uint8_t addr = R_REGISTER | (REGISTER_MASK & reg);
 8000594:	1dfb      	adds	r3, r7, #7
 8000596:	781b      	ldrb	r3, [r3, #0]
 8000598:	221f      	movs	r2, #31
 800059a:	4013      	ands	r3, r2
 800059c:	b2da      	uxtb	r2, r3
 800059e:	250f      	movs	r5, #15
 80005a0:	197b      	adds	r3, r7, r5
 80005a2:	701a      	strb	r2, [r3, #0]
	uint8_t dt = 0;
 80005a4:	240e      	movs	r4, #14
 80005a6:	193b      	adds	r3, r7, r4
 80005a8:	2200      	movs	r2, #0
 80005aa:	701a      	strb	r2, [r3, #0]

	csn(LOW);
 80005ac:	2000      	movs	r0, #0
 80005ae:	f7ff ffc7 	bl	8000540 <csn>
	HAL_SPI_TransmitReceive(&hspi1, &addr, &dt, 1, 1000);
 80005b2:	193a      	adds	r2, r7, r4
 80005b4:	1979      	adds	r1, r7, r5
 80005b6:	480c      	ldr	r0, [pc, #48]	; (80005e8 <read_register+0x60>)
 80005b8:	23fa      	movs	r3, #250	; 0xfa
 80005ba:	009b      	lsls	r3, r3, #2
 80005bc:	9300      	str	r3, [sp, #0]
 80005be:	2301      	movs	r3, #1
 80005c0:	f001 ffae 	bl	8002520 <HAL_SPI_TransmitReceive>
	HAL_SPI_TransmitReceive(&hspi1, (uint8_t*)0xff, &dt, 1, 1000);
 80005c4:	193a      	adds	r2, r7, r4
 80005c6:	4808      	ldr	r0, [pc, #32]	; (80005e8 <read_register+0x60>)
 80005c8:	23fa      	movs	r3, #250	; 0xfa
 80005ca:	009b      	lsls	r3, r3, #2
 80005cc:	9300      	str	r3, [sp, #0]
 80005ce:	2301      	movs	r3, #1
 80005d0:	21ff      	movs	r1, #255	; 0xff
 80005d2:	f001 ffa5 	bl	8002520 <HAL_SPI_TransmitReceive>
	csn(HIGH);
 80005d6:	2001      	movs	r0, #1
 80005d8:	f7ff ffb2 	bl	8000540 <csn>
	return dt;
 80005dc:	193b      	adds	r3, r7, r4
 80005de:	781b      	ldrb	r3, [r3, #0]
}
 80005e0:	0018      	movs	r0, r3
 80005e2:	46bd      	mov	sp, r7
 80005e4:	b004      	add	sp, #16
 80005e6:	bdb0      	pop	{r4, r5, r7, pc}
 80005e8:	20000034 	.word	0x20000034

080005ec <write_registerMy>:

uint8_t write_registerMy(uint8_t reg, const uint8_t* buf, uint8_t len)
{
 80005ec:	b5b0      	push	{r4, r5, r7, lr}
 80005ee:	b086      	sub	sp, #24
 80005f0:	af02      	add	r7, sp, #8
 80005f2:	6039      	str	r1, [r7, #0]
 80005f4:	0011      	movs	r1, r2
 80005f6:	1dfb      	adds	r3, r7, #7
 80005f8:	1c02      	adds	r2, r0, #0
 80005fa:	701a      	strb	r2, [r3, #0]
 80005fc:	1dbb      	adds	r3, r7, #6
 80005fe:	1c0a      	adds	r2, r1, #0
 8000600:	701a      	strb	r2, [r3, #0]
	uint8_t status = 0;
 8000602:	240f      	movs	r4, #15
 8000604:	193b      	adds	r3, r7, r4
 8000606:	2200      	movs	r2, #0
 8000608:	701a      	strb	r2, [r3, #0]
	uint8_t addr = W_REGISTER | (REGISTER_MASK & reg);
 800060a:	1dfb      	adds	r3, r7, #7
 800060c:	781b      	ldrb	r3, [r3, #0]
 800060e:	221f      	movs	r2, #31
 8000610:	4013      	ands	r3, r2
 8000612:	b2db      	uxtb	r3, r3
 8000614:	2220      	movs	r2, #32
 8000616:	4313      	orrs	r3, r2
 8000618:	b2da      	uxtb	r2, r3
 800061a:	250e      	movs	r5, #14
 800061c:	197b      	adds	r3, r7, r5
 800061e:	701a      	strb	r2, [r3, #0]

	csn(LOW);
 8000620:	2000      	movs	r0, #0
 8000622:	f7ff ff8d 	bl	8000540 <csn>
	HAL_SPI_TransmitReceive(&hspi1, &addr, &status, 1, 100);
 8000626:	193a      	adds	r2, r7, r4
 8000628:	1979      	adds	r1, r7, r5
 800062a:	480b      	ldr	r0, [pc, #44]	; (8000658 <write_registerMy+0x6c>)
 800062c:	2364      	movs	r3, #100	; 0x64
 800062e:	9300      	str	r3, [sp, #0]
 8000630:	2301      	movs	r3, #1
 8000632:	f001 ff75 	bl	8002520 <HAL_SPI_TransmitReceive>
	HAL_SPI_Transmit(&hspi1, (uint8_t*)buf, len, 100);
 8000636:	1dbb      	adds	r3, r7, #6
 8000638:	781b      	ldrb	r3, [r3, #0]
 800063a:	b29a      	uxth	r2, r3
 800063c:	6839      	ldr	r1, [r7, #0]
 800063e:	4806      	ldr	r0, [pc, #24]	; (8000658 <write_registerMy+0x6c>)
 8000640:	2364      	movs	r3, #100	; 0x64
 8000642:	f001 fcc9 	bl	8001fd8 <HAL_SPI_Transmit>
	csn(HIGH);
 8000646:	2001      	movs	r0, #1
 8000648:	f7ff ff7a 	bl	8000540 <csn>
	return status;
 800064c:	193b      	adds	r3, r7, r4
 800064e:	781b      	ldrb	r3, [r3, #0]
}
 8000650:	0018      	movs	r0, r3
 8000652:	46bd      	mov	sp, r7
 8000654:	b004      	add	sp, #16
 8000656:	bdb0      	pop	{r4, r5, r7, pc}
 8000658:	20000034 	.word	0x20000034

0800065c <write_register>:

uint8_t write_register(uint8_t reg, uint8_t value)
{
 800065c:	b5b0      	push	{r4, r5, r7, lr}
 800065e:	b086      	sub	sp, #24
 8000660:	af02      	add	r7, sp, #8
 8000662:	0002      	movs	r2, r0
 8000664:	1dfb      	adds	r3, r7, #7
 8000666:	701a      	strb	r2, [r3, #0]
 8000668:	1dbb      	adds	r3, r7, #6
 800066a:	1c0a      	adds	r2, r1, #0
 800066c:	701a      	strb	r2, [r3, #0]
	uint8_t status = 0;
 800066e:	240f      	movs	r4, #15
 8000670:	193b      	adds	r3, r7, r4
 8000672:	2200      	movs	r2, #0
 8000674:	701a      	strb	r2, [r3, #0]
	uint8_t addr = W_REGISTER | (REGISTER_MASK & reg);
 8000676:	1dfb      	adds	r3, r7, #7
 8000678:	781b      	ldrb	r3, [r3, #0]
 800067a:	221f      	movs	r2, #31
 800067c:	4013      	ands	r3, r2
 800067e:	b2db      	uxtb	r3, r3
 8000680:	2220      	movs	r2, #32
 8000682:	4313      	orrs	r3, r2
 8000684:	b2da      	uxtb	r2, r3
 8000686:	250e      	movs	r5, #14
 8000688:	197b      	adds	r3, r7, r5
 800068a:	701a      	strb	r2, [r3, #0]
	csn(LOW);
 800068c:	2000      	movs	r0, #0
 800068e:	f7ff ff57 	bl	8000540 <csn>
	HAL_SPI_TransmitReceive(&hspi1, &addr, &status, 1, 100);
 8000692:	193a      	adds	r2, r7, r4
 8000694:	1979      	adds	r1, r7, r5
 8000696:	480b      	ldr	r0, [pc, #44]	; (80006c4 <write_register+0x68>)
 8000698:	2364      	movs	r3, #100	; 0x64
 800069a:	9300      	str	r3, [sp, #0]
 800069c:	2301      	movs	r3, #1
 800069e:	f001 ff3f 	bl	8002520 <HAL_SPI_TransmitReceive>
	HAL_SPI_Transmit(&hspi1, &value, 1, 1000);
 80006a2:	23fa      	movs	r3, #250	; 0xfa
 80006a4:	009b      	lsls	r3, r3, #2
 80006a6:	1db9      	adds	r1, r7, #6
 80006a8:	4806      	ldr	r0, [pc, #24]	; (80006c4 <write_register+0x68>)
 80006aa:	2201      	movs	r2, #1
 80006ac:	f001 fc94 	bl	8001fd8 <HAL_SPI_Transmit>
	csn(HIGH);
 80006b0:	2001      	movs	r0, #1
 80006b2:	f7ff ff45 	bl	8000540 <csn>
	return status;
 80006b6:	193b      	adds	r3, r7, r4
 80006b8:	781b      	ldrb	r3, [r3, #0]
}
 80006ba:	0018      	movs	r0, r3
 80006bc:	46bd      	mov	sp, r7
 80006be:	b004      	add	sp, #16
 80006c0:	bdb0      	pop	{r4, r5, r7, pc}
 80006c2:	46c0      	nop			; (mov r8, r8)
 80006c4:	20000034 	.word	0x20000034

080006c8 <read_payload>:
	csn(HIGH);
	return status;
}

uint8_t read_payload(void* buf, uint8_t data_len)
{
 80006c8:	b590      	push	{r4, r7, lr}
 80006ca:	b087      	sub	sp, #28
 80006cc:	af00      	add	r7, sp, #0
 80006ce:	6078      	str	r0, [r7, #4]
 80006d0:	000a      	movs	r2, r1
 80006d2:	1cfb      	adds	r3, r7, #3
 80006d4:	701a      	strb	r2, [r3, #0]
	uint8_t status = 0;
 80006d6:	2316      	movs	r3, #22
 80006d8:	18fb      	adds	r3, r7, r3
 80006da:	2200      	movs	r2, #0
 80006dc:	701a      	strb	r2, [r3, #0]
	uint8_t* current = (uint8_t*)buf;
 80006de:	687b      	ldr	r3, [r7, #4]
 80006e0:	613b      	str	r3, [r7, #16]

	if(data_len > payload_size)
 80006e2:	4b25      	ldr	r3, [pc, #148]	; (8000778 <read_payload+0xb0>)
 80006e4:	781b      	ldrb	r3, [r3, #0]
 80006e6:	1cfa      	adds	r2, r7, #3
 80006e8:	7812      	ldrb	r2, [r2, #0]
 80006ea:	429a      	cmp	r2, r3
 80006ec:	d903      	bls.n	80006f6 <read_payload+0x2e>
	{
		data_len = payload_size;
 80006ee:	1cfb      	adds	r3, r7, #3
 80006f0:	4a21      	ldr	r2, [pc, #132]	; (8000778 <read_payload+0xb0>)
 80006f2:	7812      	ldrb	r2, [r2, #0]
 80006f4:	701a      	strb	r2, [r3, #0]
	}

	uint8_t blank_len = dynamic_payloads_enabled ? 0 : payload_size - data_len;
 80006f6:	4b21      	ldr	r3, [pc, #132]	; (800077c <read_payload+0xb4>)
 80006f8:	781b      	ldrb	r3, [r3, #0]
 80006fa:	2b00      	cmp	r3, #0
 80006fc:	d001      	beq.n	8000702 <read_payload+0x3a>
 80006fe:	2200      	movs	r2, #0
 8000700:	e005      	b.n	800070e <read_payload+0x46>
 8000702:	4b1d      	ldr	r3, [pc, #116]	; (8000778 <read_payload+0xb0>)
 8000704:	781a      	ldrb	r2, [r3, #0]
 8000706:	1cfb      	adds	r3, r7, #3
 8000708:	781b      	ldrb	r3, [r3, #0]
 800070a:	1ad3      	subs	r3, r2, r3
 800070c:	b2da      	uxtb	r2, r3
 800070e:	2317      	movs	r3, #23
 8000710:	18fb      	adds	r3, r7, r3
 8000712:	701a      	strb	r2, [r3, #0]

	uint8_t addr = R_RX_PAYLOAD;
 8000714:	240f      	movs	r4, #15
 8000716:	193b      	adds	r3, r7, r4
 8000718:	2261      	movs	r2, #97	; 0x61
 800071a:	701a      	strb	r2, [r3, #0]
	csn(LOW);
 800071c:	2000      	movs	r0, #0
 800071e:	f7ff ff0f 	bl	8000540 <csn>
	HAL_SPI_Transmit(&hspi1, &addr, 1, 100);
 8000722:	1939      	adds	r1, r7, r4
 8000724:	4816      	ldr	r0, [pc, #88]	; (8000780 <read_payload+0xb8>)
 8000726:	2364      	movs	r3, #100	; 0x64
 8000728:	2201      	movs	r2, #1
 800072a:	f001 fc55 	bl	8001fd8 <HAL_SPI_Transmit>
	HAL_SPI_Receive(&hspi1, (uint8_t*)current, data_len, 100);
 800072e:	1cfb      	adds	r3, r7, #3
 8000730:	781b      	ldrb	r3, [r3, #0]
 8000732:	b29a      	uxth	r2, r3
 8000734:	6939      	ldr	r1, [r7, #16]
 8000736:	4812      	ldr	r0, [pc, #72]	; (8000780 <read_payload+0xb8>)
 8000738:	2364      	movs	r3, #100	; 0x64
 800073a:	f001 fda5 	bl	8002288 <HAL_SPI_Receive>

	while(blank_len--)
 800073e:	e009      	b.n	8000754 <read_payload+0x8c>
	{
		uint8_t empt = 0;
 8000740:	210e      	movs	r1, #14
 8000742:	187b      	adds	r3, r7, r1
 8000744:	2200      	movs	r2, #0
 8000746:	701a      	strb	r2, [r3, #0]
		HAL_SPI_Receive(&hspi1, &empt, 1, 100);
 8000748:	1879      	adds	r1, r7, r1
 800074a:	480d      	ldr	r0, [pc, #52]	; (8000780 <read_payload+0xb8>)
 800074c:	2364      	movs	r3, #100	; 0x64
 800074e:	2201      	movs	r2, #1
 8000750:	f001 fd9a 	bl	8002288 <HAL_SPI_Receive>
	while(blank_len--)
 8000754:	2217      	movs	r2, #23
 8000756:	18bb      	adds	r3, r7, r2
 8000758:	781b      	ldrb	r3, [r3, #0]
 800075a:	18ba      	adds	r2, r7, r2
 800075c:	1e59      	subs	r1, r3, #1
 800075e:	7011      	strb	r1, [r2, #0]
 8000760:	2b00      	cmp	r3, #0
 8000762:	d1ed      	bne.n	8000740 <read_payload+0x78>
	}

	csn(HIGH);
 8000764:	2001      	movs	r0, #1
 8000766:	f7ff feeb 	bl	8000540 <csn>
	return status;
 800076a:	2316      	movs	r3, #22
 800076c:	18fb      	adds	r3, r7, r3
 800076e:	781b      	ldrb	r3, [r3, #0]
}
 8000770:	0018      	movs	r0, r3
 8000772:	46bd      	mov	sp, r7
 8000774:	b007      	add	sp, #28
 8000776:	bd90      	pop	{r4, r7, pc}
 8000778:	20000028 	.word	0x20000028
 800077c:	20000098 	.word	0x20000098
 8000780:	20000034 	.word	0x20000034

08000784 <flush_rx>:

uint8_t flush_rx(void)
{
 8000784:	b580      	push	{r7, lr}
 8000786:	af00      	add	r7, sp, #0
	return spiTrans(FLUSH_RX);
 8000788:	20e2      	movs	r0, #226	; 0xe2
 800078a:	f000 f80d 	bl	80007a8 <spiTrans>
 800078e:	0003      	movs	r3, r0
}
 8000790:	0018      	movs	r0, r3
 8000792:	46bd      	mov	sp, r7
 8000794:	bd80      	pop	{r7, pc}

08000796 <flush_tx>:

uint8_t flush_tx(void)
{
 8000796:	b580      	push	{r7, lr}
 8000798:	af00      	add	r7, sp, #0
	return spiTrans(FLUSH_TX);
 800079a:	20e1      	movs	r0, #225	; 0xe1
 800079c:	f000 f804 	bl	80007a8 <spiTrans>
 80007a0:	0003      	movs	r3, r0
}
 80007a2:	0018      	movs	r0, r3
 80007a4:	46bd      	mov	sp, r7
 80007a6:	bd80      	pop	{r7, pc}

080007a8 <spiTrans>:

uint8_t spiTrans(uint8_t cmd)
{
 80007a8:	b590      	push	{r4, r7, lr}
 80007aa:	b087      	sub	sp, #28
 80007ac:	af02      	add	r7, sp, #8
 80007ae:	0002      	movs	r2, r0
 80007b0:	1dfb      	adds	r3, r7, #7
 80007b2:	701a      	strb	r2, [r3, #0]
	uint8_t status = 0;
 80007b4:	240f      	movs	r4, #15
 80007b6:	193b      	adds	r3, r7, r4
 80007b8:	2200      	movs	r2, #0
 80007ba:	701a      	strb	r2, [r3, #0]
	csn(LOW);
 80007bc:	2000      	movs	r0, #0
 80007be:	f7ff febf 	bl	8000540 <csn>
	HAL_SPI_TransmitReceive(&hspi1, &cmd, &status, 1, 1000);
 80007c2:	193a      	adds	r2, r7, r4
 80007c4:	1df9      	adds	r1, r7, #7
 80007c6:	4808      	ldr	r0, [pc, #32]	; (80007e8 <spiTrans+0x40>)
 80007c8:	23fa      	movs	r3, #250	; 0xfa
 80007ca:	009b      	lsls	r3, r3, #2
 80007cc:	9300      	str	r3, [sp, #0]
 80007ce:	2301      	movs	r3, #1
 80007d0:	f001 fea6 	bl	8002520 <HAL_SPI_TransmitReceive>
	csn(HIGH);
 80007d4:	2001      	movs	r0, #1
 80007d6:	f7ff feb3 	bl	8000540 <csn>
	return status;
 80007da:	193b      	adds	r3, r7, r4
 80007dc:	781b      	ldrb	r3, [r3, #0]
}
 80007de:	0018      	movs	r0, r3
 80007e0:	46bd      	mov	sp, r7
 80007e2:	b005      	add	sp, #20
 80007e4:	bd90      	pop	{r4, r7, pc}
 80007e6:	46c0      	nop			; (mov r8, r8)
 80007e8:	20000034 	.word	0x20000034

080007ec <get_status>:

uint8_t get_status(void)
{
 80007ec:	b580      	push	{r7, lr}
 80007ee:	af00      	add	r7, sp, #0
	return spiTrans(NOP);
 80007f0:	20ff      	movs	r0, #255	; 0xff
 80007f2:	f7ff ffd9 	bl	80007a8 <spiTrans>
 80007f6:	0003      	movs	r3, r0
}
 80007f8:	0018      	movs	r0, r3
 80007fa:	46bd      	mov	sp, r7
 80007fc:	bd80      	pop	{r7, pc}

080007fe <setChannel>:

void setChannel(uint8_t channel)
{
 80007fe:	b580      	push	{r7, lr}
 8000800:	b082      	sub	sp, #8
 8000802:	af00      	add	r7, sp, #0
 8000804:	0002      	movs	r2, r0
 8000806:	1dfb      	adds	r3, r7, #7
 8000808:	701a      	strb	r2, [r3, #0]
	write_register(RF_CH, channel);
 800080a:	1dfb      	adds	r3, r7, #7
 800080c:	781b      	ldrb	r3, [r3, #0]
 800080e:	0019      	movs	r1, r3
 8000810:	2005      	movs	r0, #5
 8000812:	f7ff ff23 	bl	800065c <write_register>
}
 8000816:	46c0      	nop			; (mov r8, r8)
 8000818:	46bd      	mov	sp, r7
 800081a:	b002      	add	sp, #8
 800081c:	bd80      	pop	{r7, pc}
	...

08000820 <NRF_Init>:
{
	return payload_size;
}

uint8_t NRF_Init(void)
{
 8000820:	b590      	push	{r4, r7, lr}
 8000822:	b083      	sub	sp, #12
 8000824:	af00      	add	r7, sp, #0
	uint8_t setup = 0;
 8000826:	1dfb      	adds	r3, r7, #7
 8000828:	2200      	movs	r2, #0
 800082a:	701a      	strb	r2, [r3, #0]
	p_variant = false;
 800082c:	4b35      	ldr	r3, [pc, #212]	; (8000904 <NRF_Init+0xe4>)
 800082e:	2200      	movs	r2, #0
 8000830:	701a      	strb	r2, [r3, #0]
	payload_size = 32;
 8000832:	4b35      	ldr	r3, [pc, #212]	; (8000908 <NRF_Init+0xe8>)
 8000834:	2220      	movs	r2, #32
 8000836:	701a      	strb	r2, [r3, #0]
	dynamic_payloads_enabled = false;
 8000838:	4b34      	ldr	r3, [pc, #208]	; (800090c <NRF_Init+0xec>)
 800083a:	2200      	movs	r2, #0
 800083c:	701a      	strb	r2, [r3, #0]
	addr_width = 5;
 800083e:	4b34      	ldr	r3, [pc, #208]	; (8000910 <NRF_Init+0xf0>)
 8000840:	2205      	movs	r2, #5
 8000842:	701a      	strb	r2, [r3, #0]
	pipe0_reading_address[0] = 0;
 8000844:	4b33      	ldr	r3, [pc, #204]	; (8000914 <NRF_Init+0xf4>)
 8000846:	2200      	movs	r2, #0
 8000848:	701a      	strb	r2, [r3, #0]

	ce(LOW);
 800084a:	2000      	movs	r0, #0
 800084c:	f7ff fe8a 	bl	8000564 <ce>
	csn(HIGH);
 8000850:	2001      	movs	r0, #1
 8000852:	f7ff fe75 	bl	8000540 <csn>
	HAL_Delay(5);
 8000856:	2005      	movs	r0, #5
 8000858:	f000 fc3a 	bl	80010d0 <HAL_Delay>

	write_register(NRF_CONFIG, 0x0C); // Reset NRF_CONFIG and enable 16-bit CRC.
 800085c:	210c      	movs	r1, #12
 800085e:	2000      	movs	r0, #0
 8000860:	f7ff fefc 	bl	800065c <write_register>
	setRetries(5, 15);
 8000864:	210f      	movs	r1, #15
 8000866:	2005      	movs	r0, #5
 8000868:	f000 fafa 	bl	8000e60 <setRetries>
	setPALevel(RF24_PA_MAX); // Reset value is MAX
 800086c:	2003      	movs	r0, #3
 800086e:	f000 fa6d 	bl	8000d4c <setPALevel>

	if(setDataRate(RF24_250KBPS)) // check for connected module and if this is a p nRF24l01 variant
 8000872:	2002      	movs	r0, #2
 8000874:	f000 fa9c 	bl	8000db0 <setDataRate>
 8000878:	1e03      	subs	r3, r0, #0
 800087a:	d002      	beq.n	8000882 <NRF_Init+0x62>
	{
		p_variant = true;
 800087c:	4b21      	ldr	r3, [pc, #132]	; (8000904 <NRF_Init+0xe4>)
 800087e:	2201      	movs	r2, #1
 8000880:	701a      	strb	r2, [r3, #0]
	}

	setup = read_register(RF_SETUP);
 8000882:	1dfc      	adds	r4, r7, #7
 8000884:	2006      	movs	r0, #6
 8000886:	f7ff fe7f 	bl	8000588 <read_register>
 800088a:	0003      	movs	r3, r0
 800088c:	7023      	strb	r3, [r4, #0]
	setDataRate(RF24_1MBPS); // Then set the data rate to the slowest (and most reliable) speed supported by all hardware.
 800088e:	2000      	movs	r0, #0
 8000890:	f000 fa8e 	bl	8000db0 <setDataRate>

	// Disable dynamic payloads, to match dynamic_payloads_enabled setting - Reset value is 0
	toggle_features();
 8000894:	f000 f9d6 	bl	8000c44 <toggle_features>
	write_register(FEATURE, 0);
 8000898:	2100      	movs	r1, #0
 800089a:	201d      	movs	r0, #29
 800089c:	f7ff fede 	bl	800065c <write_register>
	write_register(DYNPD, 0);
 80008a0:	2100      	movs	r1, #0
 80008a2:	201c      	movs	r0, #28
 80008a4:	f7ff feda 	bl	800065c <write_register>
	dynamic_payloads_enabled = false;
 80008a8:	4b18      	ldr	r3, [pc, #96]	; (800090c <NRF_Init+0xec>)
 80008aa:	2200      	movs	r2, #0
 80008ac:	701a      	strb	r2, [r3, #0]

	// Reset current status. Notice reset and flush is the last thing we do
	write_register(NRF_STATUS, (1 << RX_DR) | (1 << TX_DS) | (1 << MAX_RT));
 80008ae:	2170      	movs	r1, #112	; 0x70
 80008b0:	2007      	movs	r0, #7
 80008b2:	f7ff fed3 	bl	800065c <write_register>
	setChannel(76);
 80008b6:	204c      	movs	r0, #76	; 0x4c
 80008b8:	f7ff ffa1 	bl	80007fe <setChannel>
	flush_rx();
 80008bc:	f7ff ff62 	bl	8000784 <flush_rx>
	flush_tx();
 80008c0:	f7ff ff69 	bl	8000796 <flush_tx>
	powerUp(); //Power up by default when begin() is called
 80008c4:	f000 f878 	bl	80009b8 <powerUp>
	write_register(NRF_CONFIG, (read_register(NRF_CONFIG)) & ~(1 << PRIM_RX));
 80008c8:	2000      	movs	r0, #0
 80008ca:	f7ff fe5d 	bl	8000588 <read_register>
 80008ce:	0003      	movs	r3, r0
 80008d0:	001a      	movs	r2, r3
 80008d2:	2301      	movs	r3, #1
 80008d4:	439a      	bics	r2, r3
 80008d6:	0013      	movs	r3, r2
 80008d8:	b2db      	uxtb	r3, r3
 80008da:	0019      	movs	r1, r3
 80008dc:	2000      	movs	r0, #0
 80008de:	f7ff febd 	bl	800065c <write_register>
	return (setup != 0 && setup != 0xff);
 80008e2:	1dfb      	adds	r3, r7, #7
 80008e4:	781b      	ldrb	r3, [r3, #0]
 80008e6:	2b00      	cmp	r3, #0
 80008e8:	d005      	beq.n	80008f6 <NRF_Init+0xd6>
 80008ea:	1dfb      	adds	r3, r7, #7
 80008ec:	781b      	ldrb	r3, [r3, #0]
 80008ee:	2bff      	cmp	r3, #255	; 0xff
 80008f0:	d001      	beq.n	80008f6 <NRF_Init+0xd6>
 80008f2:	2301      	movs	r3, #1
 80008f4:	e000      	b.n	80008f8 <NRF_Init+0xd8>
 80008f6:	2300      	movs	r3, #0
 80008f8:	b2db      	uxtb	r3, r3
}
 80008fa:	0018      	movs	r0, r3
 80008fc:	46bd      	mov	sp, r7
 80008fe:	b003      	add	sp, #12
 8000900:	bd90      	pop	{r4, r7, pc}
 8000902:	46c0      	nop			; (mov r8, r8)
 8000904:	20000099 	.word	0x20000099
 8000908:	20000028 	.word	0x20000028
 800090c:	20000098 	.word	0x20000098
 8000910:	20000031 	.word	0x20000031
 8000914:	2000002c 	.word	0x2000002c

08000918 <isChipConnected>:

bool isChipConnected()
{
 8000918:	b590      	push	{r4, r7, lr}
 800091a:	b083      	sub	sp, #12
 800091c:	af00      	add	r7, sp, #0
	uint8_t setup = read_register(SETUP_AW);
 800091e:	1dfc      	adds	r4, r7, #7
 8000920:	2003      	movs	r0, #3
 8000922:	f7ff fe31 	bl	8000588 <read_register>
 8000926:	0003      	movs	r3, r0
 8000928:	7023      	strb	r3, [r4, #0]

	if(setup >= 1 && setup <= 3)
 800092a:	1dfb      	adds	r3, r7, #7
 800092c:	781b      	ldrb	r3, [r3, #0]
 800092e:	2b00      	cmp	r3, #0
 8000930:	d005      	beq.n	800093e <isChipConnected+0x26>
 8000932:	1dfb      	adds	r3, r7, #7
 8000934:	781b      	ldrb	r3, [r3, #0]
 8000936:	2b03      	cmp	r3, #3
 8000938:	d801      	bhi.n	800093e <isChipConnected+0x26>
	{
		return true;
 800093a:	2301      	movs	r3, #1
 800093c:	e000      	b.n	8000940 <isChipConnected+0x28>
	}

	return false;
 800093e:	2300      	movs	r3, #0
}
 8000940:	0018      	movs	r0, r3
 8000942:	46bd      	mov	sp, r7
 8000944:	b003      	add	sp, #12
 8000946:	bd90      	pop	{r4, r7, pc}

08000948 <startListening>:

void startListening(void)
{
 8000948:	b580      	push	{r7, lr}
 800094a:	af00      	add	r7, sp, #0
	powerUp();
 800094c:	f000 f834 	bl	80009b8 <powerUp>

	write_register(NRF_CONFIG, read_register(NRF_CONFIG) | (1 << PRIM_RX));
 8000950:	2000      	movs	r0, #0
 8000952:	f7ff fe19 	bl	8000588 <read_register>
 8000956:	0003      	movs	r3, r0
 8000958:	001a      	movs	r2, r3
 800095a:	2301      	movs	r3, #1
 800095c:	4313      	orrs	r3, r2
 800095e:	b2db      	uxtb	r3, r3
 8000960:	0019      	movs	r1, r3
 8000962:	2000      	movs	r0, #0
 8000964:	f7ff fe7a 	bl	800065c <write_register>
	write_register(NRF_STATUS, (1 << RX_DR) | (1 << TX_DS) | (1 << MAX_RT));
 8000968:	2170      	movs	r1, #112	; 0x70
 800096a:	2007      	movs	r0, #7
 800096c:	f7ff fe76 	bl	800065c <write_register>
	ce(HIGH);
 8000970:	2001      	movs	r0, #1
 8000972:	f7ff fdf7 	bl	8000564 <ce>
	// Restore the pipe0 adddress, if exists
	if(pipe0_reading_address[0] > 0)
 8000976:	4b0e      	ldr	r3, [pc, #56]	; (80009b0 <startListening+0x68>)
 8000978:	781b      	ldrb	r3, [r3, #0]
 800097a:	2b00      	cmp	r3, #0
 800097c:	d007      	beq.n	800098e <startListening+0x46>
	{
		write_registerMy(RX_ADDR_P0, pipe0_reading_address, addr_width);
 800097e:	4b0d      	ldr	r3, [pc, #52]	; (80009b4 <startListening+0x6c>)
 8000980:	781a      	ldrb	r2, [r3, #0]
 8000982:	4b0b      	ldr	r3, [pc, #44]	; (80009b0 <startListening+0x68>)
 8000984:	0019      	movs	r1, r3
 8000986:	200a      	movs	r0, #10
 8000988:	f7ff fe30 	bl	80005ec <write_registerMy>
 800098c:	e002      	b.n	8000994 <startListening+0x4c>
	}
	else
	{
		closeReadingPipe(0);
 800098e:	2000      	movs	r0, #0
 8000990:	f000 f936 	bl	8000c00 <closeReadingPipe>
	}

	if(read_register(FEATURE) & (1 << EN_ACK_PAY))
 8000994:	201d      	movs	r0, #29
 8000996:	f7ff fdf7 	bl	8000588 <read_register>
 800099a:	0003      	movs	r3, r0
 800099c:	001a      	movs	r2, r3
 800099e:	2302      	movs	r3, #2
 80009a0:	4013      	ands	r3, r2
 80009a2:	d001      	beq.n	80009a8 <startListening+0x60>
	{
		flush_tx();
 80009a4:	f7ff fef7 	bl	8000796 <flush_tx>
	}
}
 80009a8:	46c0      	nop			; (mov r8, r8)
 80009aa:	46bd      	mov	sp, r7
 80009ac:	bd80      	pop	{r7, pc}
 80009ae:	46c0      	nop			; (mov r8, r8)
 80009b0:	2000002c 	.word	0x2000002c
 80009b4:	20000031 	.word	0x20000031

080009b8 <powerUp>:
	write_register(NRF_CONFIG, read_register(NRF_CONFIG) & ~(1 << PWR_UP));
}

//Power up now. Radio will not power down unless instructed by MCU for config changes etc.
void powerUp(void)
{
 80009b8:	b590      	push	{r4, r7, lr}
 80009ba:	b083      	sub	sp, #12
 80009bc:	af00      	add	r7, sp, #0
	uint8_t cfg = read_register(NRF_CONFIG);
 80009be:	1dfc      	adds	r4, r7, #7
 80009c0:	2000      	movs	r0, #0
 80009c2:	f7ff fde1 	bl	8000588 <read_register>
 80009c6:	0003      	movs	r3, r0
 80009c8:	7023      	strb	r3, [r4, #0]
	// if not powered up then power up and wait for the radio to initialize
	if(!(cfg & (1 << PWR_UP)))
 80009ca:	1dfb      	adds	r3, r7, #7
 80009cc:	781b      	ldrb	r3, [r3, #0]
 80009ce:	2202      	movs	r2, #2
 80009d0:	4013      	ands	r3, r2
 80009d2:	d10b      	bne.n	80009ec <powerUp+0x34>
	{
		write_register(NRF_CONFIG, cfg | (1 << PWR_UP));
 80009d4:	1dfb      	adds	r3, r7, #7
 80009d6:	781b      	ldrb	r3, [r3, #0]
 80009d8:	2202      	movs	r2, #2
 80009da:	4313      	orrs	r3, r2
 80009dc:	b2db      	uxtb	r3, r3
 80009de:	0019      	movs	r1, r3
 80009e0:	2000      	movs	r0, #0
 80009e2:	f7ff fe3b 	bl	800065c <write_register>
		HAL_Delay(5);
 80009e6:	2005      	movs	r0, #5
 80009e8:	f000 fb72 	bl	80010d0 <HAL_Delay>
	}
}
 80009ec:	46c0      	nop			; (mov r8, r8)
 80009ee:	46bd      	mov	sp, r7
 80009f0:	b003      	add	sp, #12
 80009f2:	bd90      	pop	{r4, r7, pc}

080009f4 <getDynamicPayloadSize>:
	config |= fail << MASK_MAX_RT | tx << MASK_TX_DS | rx << MASK_RX_DR; // set the specified interrupt flags
	write_register(NRF_CONFIG, config);
}

uint8_t getDynamicPayloadSize(void)
{
 80009f4:	b580      	push	{r7, lr}
 80009f6:	b084      	sub	sp, #16
 80009f8:	af02      	add	r7, sp, #8
	uint8_t result = 0, addr;
 80009fa:	1dfb      	adds	r3, r7, #7
 80009fc:	2200      	movs	r2, #0
 80009fe:	701a      	strb	r2, [r3, #0]
	csn(LOW);
 8000a00:	2000      	movs	r0, #0
 8000a02:	f7ff fd9d 	bl	8000540 <csn>
	addr = R_RX_PL_WID;
 8000a06:	1dbb      	adds	r3, r7, #6
 8000a08:	2260      	movs	r2, #96	; 0x60
 8000a0a:	701a      	strb	r2, [r3, #0]
	HAL_SPI_TransmitReceive(&hspi1, &addr, &result, 1, 1000);
 8000a0c:	1dfa      	adds	r2, r7, #7
 8000a0e:	1db9      	adds	r1, r7, #6
 8000a10:	4811      	ldr	r0, [pc, #68]	; (8000a58 <getDynamicPayloadSize+0x64>)
 8000a12:	23fa      	movs	r3, #250	; 0xfa
 8000a14:	009b      	lsls	r3, r3, #2
 8000a16:	9300      	str	r3, [sp, #0]
 8000a18:	2301      	movs	r3, #1
 8000a1a:	f001 fd81 	bl	8002520 <HAL_SPI_TransmitReceive>
	HAL_SPI_TransmitReceive(&hspi1, (uint8_t*)0xff, &result, 1, 1000);
 8000a1e:	1dfa      	adds	r2, r7, #7
 8000a20:	480d      	ldr	r0, [pc, #52]	; (8000a58 <getDynamicPayloadSize+0x64>)
 8000a22:	23fa      	movs	r3, #250	; 0xfa
 8000a24:	009b      	lsls	r3, r3, #2
 8000a26:	9300      	str	r3, [sp, #0]
 8000a28:	2301      	movs	r3, #1
 8000a2a:	21ff      	movs	r1, #255	; 0xff
 8000a2c:	f001 fd78 	bl	8002520 <HAL_SPI_TransmitReceive>
	csn(HIGH);
 8000a30:	2001      	movs	r0, #1
 8000a32:	f7ff fd85 	bl	8000540 <csn>

	if(result > 32)
 8000a36:	1dfb      	adds	r3, r7, #7
 8000a38:	781b      	ldrb	r3, [r3, #0]
 8000a3a:	2b20      	cmp	r3, #32
 8000a3c:	d906      	bls.n	8000a4c <getDynamicPayloadSize+0x58>
	{
		flush_rx();
 8000a3e:	f7ff fea1 	bl	8000784 <flush_rx>
		HAL_Delay(2);
 8000a42:	2002      	movs	r0, #2
 8000a44:	f000 fb44 	bl	80010d0 <HAL_Delay>
		return 0;
 8000a48:	2300      	movs	r3, #0
 8000a4a:	e001      	b.n	8000a50 <getDynamicPayloadSize+0x5c>
	}

	return result;
 8000a4c:	1dfb      	adds	r3, r7, #7
 8000a4e:	781b      	ldrb	r3, [r3, #0]
}
 8000a50:	0018      	movs	r0, r3
 8000a52:	46bd      	mov	sp, r7
 8000a54:	b002      	add	sp, #8
 8000a56:	bd80      	pop	{r7, pc}
 8000a58:	20000034 	.word	0x20000034

08000a5c <available>:
{
	return available(NULL);
}

bool available(uint8_t* pipe_num)
{
 8000a5c:	b5b0      	push	{r4, r5, r7, lr}
 8000a5e:	b084      	sub	sp, #16
 8000a60:	af00      	add	r7, sp, #0
 8000a62:	6078      	str	r0, [r7, #4]
	if(!(read_register(FIFO_STATUS) & (1 << RX_EMPTY)))
 8000a64:	2017      	movs	r0, #23
 8000a66:	f7ff fd8f 	bl	8000588 <read_register>
 8000a6a:	0003      	movs	r3, r0
 8000a6c:	001a      	movs	r2, r3
 8000a6e:	2301      	movs	r3, #1
 8000a70:	4013      	ands	r3, r2
 8000a72:	d113      	bne.n	8000a9c <available+0x40>
	{
		if(pipe_num) // If the caller wants the pipe number, include that
 8000a74:	687b      	ldr	r3, [r7, #4]
 8000a76:	2b00      	cmp	r3, #0
 8000a78:	d00e      	beq.n	8000a98 <available+0x3c>
		{
			uint8_t status = get_status();
 8000a7a:	250f      	movs	r5, #15
 8000a7c:	197c      	adds	r4, r7, r5
 8000a7e:	f7ff feb5 	bl	80007ec <get_status>
 8000a82:	0003      	movs	r3, r0
 8000a84:	7023      	strb	r3, [r4, #0]
			*pipe_num = (status >> RX_P_NO) & 0x07;
 8000a86:	197b      	adds	r3, r7, r5
 8000a88:	781b      	ldrb	r3, [r3, #0]
 8000a8a:	085b      	lsrs	r3, r3, #1
 8000a8c:	b2db      	uxtb	r3, r3
 8000a8e:	2207      	movs	r2, #7
 8000a90:	4013      	ands	r3, r2
 8000a92:	b2da      	uxtb	r2, r3
 8000a94:	687b      	ldr	r3, [r7, #4]
 8000a96:	701a      	strb	r2, [r3, #0]
		}

		return 1;
 8000a98:	2301      	movs	r3, #1
 8000a9a:	e000      	b.n	8000a9e <available+0x42>
	}

	return 0;
 8000a9c:	2300      	movs	r3, #0
}
 8000a9e:	0018      	movs	r0, r3
 8000aa0:	46bd      	mov	sp, r7
 8000aa2:	b004      	add	sp, #16
 8000aa4:	bdb0      	pop	{r4, r5, r7, pc}

08000aa6 <read>:

void read(void* buf, uint8_t len)
{
 8000aa6:	b580      	push	{r7, lr}
 8000aa8:	b082      	sub	sp, #8
 8000aaa:	af00      	add	r7, sp, #0
 8000aac:	6078      	str	r0, [r7, #4]
 8000aae:	000a      	movs	r2, r1
 8000ab0:	1cfb      	adds	r3, r7, #3
 8000ab2:	701a      	strb	r2, [r3, #0]
	read_payload(buf, len);
 8000ab4:	1cfb      	adds	r3, r7, #3
 8000ab6:	781a      	ldrb	r2, [r3, #0]
 8000ab8:	687b      	ldr	r3, [r7, #4]
 8000aba:	0011      	movs	r1, r2
 8000abc:	0018      	movs	r0, r3
 8000abe:	f7ff fe03 	bl	80006c8 <read_payload>
	write_register(NRF_STATUS, (1 << RX_DR) | (1 << MAX_RT) | (1 << TX_DS));
 8000ac2:	2170      	movs	r1, #112	; 0x70
 8000ac4:	2007      	movs	r0, #7
 8000ac6:	f7ff fdc9 	bl	800065c <write_register>
}
 8000aca:	46c0      	nop			; (mov r8, r8)
 8000acc:	46bd      	mov	sp, r7
 8000ace:	b002      	add	sp, #8
 8000ad0:	bd80      	pop	{r7, pc}
	...

08000ad4 <openReadingPipe>:

static const uint8_t child_payload_size[] = {RX_PW_P0, RX_PW_P1, RX_PW_P2, RX_PW_P3, RX_PW_P4, RX_PW_P5};


void openReadingPipe(uint8_t child, uint64_t address)
{
 8000ad4:	b590      	push	{r4, r7, lr}
 8000ad6:	b085      	sub	sp, #20
 8000ad8:	af00      	add	r7, sp, #0
 8000ada:	0001      	movs	r1, r0
 8000adc:	603a      	str	r2, [r7, #0]
 8000ade:	607b      	str	r3, [r7, #4]
 8000ae0:	200f      	movs	r0, #15
 8000ae2:	183b      	adds	r3, r7, r0
 8000ae4:	1c0a      	adds	r2, r1, #0
 8000ae6:	701a      	strb	r2, [r3, #0]
	if(child == 0)
 8000ae8:	183b      	adds	r3, r7, r0
 8000aea:	781b      	ldrb	r3, [r3, #0]
 8000aec:	2b00      	cmp	r3, #0
 8000aee:	d107      	bne.n	8000b00 <openReadingPipe+0x2c>
	{
		memcpy(pipe0_reading_address, &address, addr_width);
 8000af0:	4b25      	ldr	r3, [pc, #148]	; (8000b88 <openReadingPipe+0xb4>)
 8000af2:	781b      	ldrb	r3, [r3, #0]
 8000af4:	001a      	movs	r2, r3
 8000af6:	0039      	movs	r1, r7
 8000af8:	4b24      	ldr	r3, [pc, #144]	; (8000b8c <openReadingPipe+0xb8>)
 8000afa:	0018      	movs	r0, r3
 8000afc:	f002 f8d0 	bl	8002ca0 <memcpy>
	}

	if(child <= 6)
 8000b00:	230f      	movs	r3, #15
 8000b02:	18fb      	adds	r3, r7, r3
 8000b04:	781b      	ldrb	r3, [r3, #0]
 8000b06:	2b06      	cmp	r3, #6
 8000b08:	d839      	bhi.n	8000b7e <openReadingPipe+0xaa>
	{
		// For pipes 2-5, only write the LSB
		if(child < 2)
 8000b0a:	230f      	movs	r3, #15
 8000b0c:	18fb      	adds	r3, r7, r3
 8000b0e:	781b      	ldrb	r3, [r3, #0]
 8000b10:	2b01      	cmp	r3, #1
 8000b12:	d80b      	bhi.n	8000b2c <openReadingPipe+0x58>
		  write_registerMy(child_pipe[child], (const uint8_t*)&address, addr_width);
 8000b14:	230f      	movs	r3, #15
 8000b16:	18fb      	adds	r3, r7, r3
 8000b18:	781b      	ldrb	r3, [r3, #0]
 8000b1a:	4a1d      	ldr	r2, [pc, #116]	; (8000b90 <openReadingPipe+0xbc>)
 8000b1c:	5cd0      	ldrb	r0, [r2, r3]
 8000b1e:	4b1a      	ldr	r3, [pc, #104]	; (8000b88 <openReadingPipe+0xb4>)
 8000b20:	781a      	ldrb	r2, [r3, #0]
 8000b22:	003b      	movs	r3, r7
 8000b24:	0019      	movs	r1, r3
 8000b26:	f7ff fd61 	bl	80005ec <write_registerMy>
 8000b2a:	e009      	b.n	8000b40 <openReadingPipe+0x6c>
		else
		  write_registerMy(child_pipe[child], (const uint8_t*)&address, 1);
 8000b2c:	230f      	movs	r3, #15
 8000b2e:	18fb      	adds	r3, r7, r3
 8000b30:	781b      	ldrb	r3, [r3, #0]
 8000b32:	4a17      	ldr	r2, [pc, #92]	; (8000b90 <openReadingPipe+0xbc>)
 8000b34:	5cd3      	ldrb	r3, [r2, r3]
 8000b36:	0039      	movs	r1, r7
 8000b38:	2201      	movs	r2, #1
 8000b3a:	0018      	movs	r0, r3
 8000b3c:	f7ff fd56 	bl	80005ec <write_registerMy>

		write_register(child_payload_size[child], payload_size);
 8000b40:	240f      	movs	r4, #15
 8000b42:	193b      	adds	r3, r7, r4
 8000b44:	781b      	ldrb	r3, [r3, #0]
 8000b46:	4a13      	ldr	r2, [pc, #76]	; (8000b94 <openReadingPipe+0xc0>)
 8000b48:	5cd2      	ldrb	r2, [r2, r3]
 8000b4a:	4b13      	ldr	r3, [pc, #76]	; (8000b98 <openReadingPipe+0xc4>)
 8000b4c:	781b      	ldrb	r3, [r3, #0]
 8000b4e:	0019      	movs	r1, r3
 8000b50:	0010      	movs	r0, r2
 8000b52:	f7ff fd83 	bl	800065c <write_register>
		write_register(EN_RXADDR, read_register(EN_RXADDR) | (1 << child_pipe_enable[child]));
 8000b56:	2002      	movs	r0, #2
 8000b58:	f7ff fd16 	bl	8000588 <read_register>
 8000b5c:	0003      	movs	r3, r0
 8000b5e:	b25a      	sxtb	r2, r3
 8000b60:	193b      	adds	r3, r7, r4
 8000b62:	781b      	ldrb	r3, [r3, #0]
 8000b64:	490d      	ldr	r1, [pc, #52]	; (8000b9c <openReadingPipe+0xc8>)
 8000b66:	5ccb      	ldrb	r3, [r1, r3]
 8000b68:	0019      	movs	r1, r3
 8000b6a:	2301      	movs	r3, #1
 8000b6c:	408b      	lsls	r3, r1
 8000b6e:	b25b      	sxtb	r3, r3
 8000b70:	4313      	orrs	r3, r2
 8000b72:	b25b      	sxtb	r3, r3
 8000b74:	b2db      	uxtb	r3, r3
 8000b76:	0019      	movs	r1, r3
 8000b78:	2002      	movs	r0, #2
 8000b7a:	f7ff fd6f 	bl	800065c <write_register>
	}
}
 8000b7e:	46c0      	nop			; (mov r8, r8)
 8000b80:	46bd      	mov	sp, r7
 8000b82:	b005      	add	sp, #20
 8000b84:	bd90      	pop	{r4, r7, pc}
 8000b86:	46c0      	nop			; (mov r8, r8)
 8000b88:	20000031 	.word	0x20000031
 8000b8c:	2000002c 	.word	0x2000002c
 8000b90:	08002d04 	.word	0x08002d04
 8000b94:	08002d0c 	.word	0x08002d0c
 8000b98:	20000028 	.word	0x20000028
 8000b9c:	08002cfc 	.word	0x08002cfc

08000ba0 <setAddressWidth>:

void setAddressWidth(uint8_t a_width)
{
 8000ba0:	b580      	push	{r7, lr}
 8000ba2:	b082      	sub	sp, #8
 8000ba4:	af00      	add	r7, sp, #0
 8000ba6:	0002      	movs	r2, r0
 8000ba8:	1dfb      	adds	r3, r7, #7
 8000baa:	701a      	strb	r2, [r3, #0]
	if(a_width -= 2)
 8000bac:	1dfb      	adds	r3, r7, #7
 8000bae:	1dfa      	adds	r2, r7, #7
 8000bb0:	7812      	ldrb	r2, [r2, #0]
 8000bb2:	3a02      	subs	r2, #2
 8000bb4:	701a      	strb	r2, [r3, #0]
 8000bb6:	1dfb      	adds	r3, r7, #7
 8000bb8:	781b      	ldrb	r3, [r3, #0]
 8000bba:	2b00      	cmp	r3, #0
 8000bbc:	d012      	beq.n	8000be4 <setAddressWidth+0x44>
	{
		write_register(SETUP_AW, a_width%4);
 8000bbe:	1dfb      	adds	r3, r7, #7
 8000bc0:	781b      	ldrb	r3, [r3, #0]
 8000bc2:	2203      	movs	r2, #3
 8000bc4:	4013      	ands	r3, r2
 8000bc6:	b2db      	uxtb	r3, r3
 8000bc8:	0019      	movs	r1, r3
 8000bca:	2003      	movs	r0, #3
 8000bcc:	f7ff fd46 	bl	800065c <write_register>
		addr_width = (a_width%4) + 2;
 8000bd0:	1dfb      	adds	r3, r7, #7
 8000bd2:	781b      	ldrb	r3, [r3, #0]
 8000bd4:	2203      	movs	r2, #3
 8000bd6:	4013      	ands	r3, r2
 8000bd8:	b2db      	uxtb	r3, r3
 8000bda:	3302      	adds	r3, #2
 8000bdc:	b2da      	uxtb	r2, r3
 8000bde:	4b07      	ldr	r3, [pc, #28]	; (8000bfc <setAddressWidth+0x5c>)
 8000be0:	701a      	strb	r2, [r3, #0]
	else
	{
        write_register(SETUP_AW, 0);
        addr_width = 2;
    }
}
 8000be2:	e006      	b.n	8000bf2 <setAddressWidth+0x52>
        write_register(SETUP_AW, 0);
 8000be4:	2100      	movs	r1, #0
 8000be6:	2003      	movs	r0, #3
 8000be8:	f7ff fd38 	bl	800065c <write_register>
        addr_width = 2;
 8000bec:	4b03      	ldr	r3, [pc, #12]	; (8000bfc <setAddressWidth+0x5c>)
 8000bee:	2202      	movs	r2, #2
 8000bf0:	701a      	strb	r2, [r3, #0]
}
 8000bf2:	46c0      	nop			; (mov r8, r8)
 8000bf4:	46bd      	mov	sp, r7
 8000bf6:	b002      	add	sp, #8
 8000bf8:	bd80      	pop	{r7, pc}
 8000bfa:	46c0      	nop			; (mov r8, r8)
 8000bfc:	20000031 	.word	0x20000031

08000c00 <closeReadingPipe>:

void closeReadingPipe(uint8_t pipe)
{
 8000c00:	b580      	push	{r7, lr}
 8000c02:	b082      	sub	sp, #8
 8000c04:	af00      	add	r7, sp, #0
 8000c06:	0002      	movs	r2, r0
 8000c08:	1dfb      	adds	r3, r7, #7
 8000c0a:	701a      	strb	r2, [r3, #0]
	write_register(EN_RXADDR, read_register(EN_RXADDR) & ~(1 << child_pipe_enable[pipe]));
 8000c0c:	2002      	movs	r0, #2
 8000c0e:	f7ff fcbb 	bl	8000588 <read_register>
 8000c12:	0003      	movs	r3, r0
 8000c14:	b25b      	sxtb	r3, r3
 8000c16:	1dfa      	adds	r2, r7, #7
 8000c18:	7812      	ldrb	r2, [r2, #0]
 8000c1a:	4909      	ldr	r1, [pc, #36]	; (8000c40 <closeReadingPipe+0x40>)
 8000c1c:	5c8a      	ldrb	r2, [r1, r2]
 8000c1e:	0011      	movs	r1, r2
 8000c20:	2201      	movs	r2, #1
 8000c22:	408a      	lsls	r2, r1
 8000c24:	b252      	sxtb	r2, r2
 8000c26:	43d2      	mvns	r2, r2
 8000c28:	b252      	sxtb	r2, r2
 8000c2a:	4013      	ands	r3, r2
 8000c2c:	b25b      	sxtb	r3, r3
 8000c2e:	b2db      	uxtb	r3, r3
 8000c30:	0019      	movs	r1, r3
 8000c32:	2002      	movs	r0, #2
 8000c34:	f7ff fd12 	bl	800065c <write_register>
}
 8000c38:	46c0      	nop			; (mov r8, r8)
 8000c3a:	46bd      	mov	sp, r7
 8000c3c:	b002      	add	sp, #8
 8000c3e:	bd80      	pop	{r7, pc}
 8000c40:	08002cfc 	.word	0x08002cfc

08000c44 <toggle_features>:

void toggle_features(void)
{
 8000c44:	b580      	push	{r7, lr}
 8000c46:	b082      	sub	sp, #8
 8000c48:	af00      	add	r7, sp, #0
	uint8_t addr = ACTIVATE;
 8000c4a:	1dfb      	adds	r3, r7, #7
 8000c4c:	2250      	movs	r2, #80	; 0x50
 8000c4e:	701a      	strb	r2, [r3, #0]
	csn(LOW);
 8000c50:	2000      	movs	r0, #0
 8000c52:	f7ff fc75 	bl	8000540 <csn>
	HAL_SPI_Transmit(&hspi1, &addr, 1, 1000);
 8000c56:	23fa      	movs	r3, #250	; 0xfa
 8000c58:	009b      	lsls	r3, r3, #2
 8000c5a:	1df9      	adds	r1, r7, #7
 8000c5c:	4808      	ldr	r0, [pc, #32]	; (8000c80 <toggle_features+0x3c>)
 8000c5e:	2201      	movs	r2, #1
 8000c60:	f001 f9ba 	bl	8001fd8 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&hspi1, (uint8_t*)0x73, 1, 1000);
 8000c64:	23fa      	movs	r3, #250	; 0xfa
 8000c66:	009b      	lsls	r3, r3, #2
 8000c68:	4805      	ldr	r0, [pc, #20]	; (8000c80 <toggle_features+0x3c>)
 8000c6a:	2201      	movs	r2, #1
 8000c6c:	2173      	movs	r1, #115	; 0x73
 8000c6e:	f001 f9b3 	bl	8001fd8 <HAL_SPI_Transmit>
	csn(HIGH);
 8000c72:	2001      	movs	r0, #1
 8000c74:	f7ff fc64 	bl	8000540 <csn>
}
 8000c78:	46c0      	nop			; (mov r8, r8)
 8000c7a:	46bd      	mov	sp, r7
 8000c7c:	b002      	add	sp, #8
 8000c7e:	bd80      	pop	{r7, pc}
 8000c80:	20000034 	.word	0x20000034

08000c84 <enableAckPayload>:
	write_register(DYNPD, 0);
	dynamic_payloads_enabled = false;
}

void enableAckPayload(void)
{
 8000c84:	b580      	push	{r7, lr}
 8000c86:	af00      	add	r7, sp, #0
	write_register(FEATURE, read_register(FEATURE) | (1 << EN_ACK_PAY) | (1 << EN_DPL));
 8000c88:	201d      	movs	r0, #29
 8000c8a:	f7ff fc7d 	bl	8000588 <read_register>
 8000c8e:	0003      	movs	r3, r0
 8000c90:	001a      	movs	r2, r3
 8000c92:	2306      	movs	r3, #6
 8000c94:	4313      	orrs	r3, r2
 8000c96:	b2db      	uxtb	r3, r3
 8000c98:	0019      	movs	r1, r3
 8000c9a:	201d      	movs	r0, #29
 8000c9c:	f7ff fcde 	bl	800065c <write_register>
	write_register(DYNPD, read_register(DYNPD) | (1 << DPL_P1) | (1 << DPL_P0));
 8000ca0:	201c      	movs	r0, #28
 8000ca2:	f7ff fc71 	bl	8000588 <read_register>
 8000ca6:	0003      	movs	r3, r0
 8000ca8:	001a      	movs	r2, r3
 8000caa:	2303      	movs	r3, #3
 8000cac:	4313      	orrs	r3, r2
 8000cae:	b2db      	uxtb	r3, r3
 8000cb0:	0019      	movs	r1, r3
 8000cb2:	201c      	movs	r0, #28
 8000cb4:	f7ff fcd2 	bl	800065c <write_register>
	dynamic_payloads_enabled = true;
 8000cb8:	4b02      	ldr	r3, [pc, #8]	; (8000cc4 <enableAckPayload+0x40>)
 8000cba:	2201      	movs	r2, #1
 8000cbc:	701a      	strb	r2, [r3, #0]
}
 8000cbe:	46c0      	nop			; (mov r8, r8)
 8000cc0:	46bd      	mov	sp, r7
 8000cc2:	bd80      	pop	{r7, pc}
 8000cc4:	20000098 	.word	0x20000098

08000cc8 <writeAckPayload>:
{
    write_register(FEATURE, read_register(FEATURE) | (1 << EN_DYN_ACK));
}

void writeAckPayload(uint8_t pipe, const void* buf, uint8_t len)
{
 8000cc8:	b590      	push	{r4, r7, lr}
 8000cca:	b085      	sub	sp, #20
 8000ccc:	af00      	add	r7, sp, #0
 8000cce:	6039      	str	r1, [r7, #0]
 8000cd0:	0011      	movs	r1, r2
 8000cd2:	1dfb      	adds	r3, r7, #7
 8000cd4:	1c02      	adds	r2, r0, #0
 8000cd6:	701a      	strb	r2, [r3, #0]
 8000cd8:	1dbb      	adds	r3, r7, #6
 8000cda:	1c0a      	adds	r2, r1, #0
 8000cdc:	701a      	strb	r2, [r3, #0]
	const uint8_t* current = (const uint8_t*)buf;
 8000cde:	683b      	ldr	r3, [r7, #0]
 8000ce0:	60fb      	str	r3, [r7, #12]
	uint8_t data_len = rf24_min(len, 32);
 8000ce2:	230b      	movs	r3, #11
 8000ce4:	18fa      	adds	r2, r7, r3
 8000ce6:	1dbb      	adds	r3, r7, #6
 8000ce8:	781b      	ldrb	r3, [r3, #0]
 8000cea:	b2d9      	uxtb	r1, r3
 8000cec:	2920      	cmp	r1, #32
 8000cee:	d900      	bls.n	8000cf2 <writeAckPayload+0x2a>
 8000cf0:	2320      	movs	r3, #32
 8000cf2:	7013      	strb	r3, [r2, #0]
	uint8_t addr = W_ACK_PAYLOAD | (pipe & 0x07);
 8000cf4:	1dfb      	adds	r3, r7, #7
 8000cf6:	781b      	ldrb	r3, [r3, #0]
 8000cf8:	b25b      	sxtb	r3, r3
 8000cfa:	2207      	movs	r2, #7
 8000cfc:	4013      	ands	r3, r2
 8000cfe:	b25b      	sxtb	r3, r3
 8000d00:	2258      	movs	r2, #88	; 0x58
 8000d02:	4252      	negs	r2, r2
 8000d04:	4313      	orrs	r3, r2
 8000d06:	b25b      	sxtb	r3, r3
 8000d08:	b2da      	uxtb	r2, r3
 8000d0a:	240a      	movs	r4, #10
 8000d0c:	193b      	adds	r3, r7, r4
 8000d0e:	701a      	strb	r2, [r3, #0]
	csn(LOW);
 8000d10:	2000      	movs	r0, #0
 8000d12:	f7ff fc15 	bl	8000540 <csn>
	HAL_SPI_Transmit(&hspi1, &addr, 1, 1000);
 8000d16:	23fa      	movs	r3, #250	; 0xfa
 8000d18:	009b      	lsls	r3, r3, #2
 8000d1a:	1939      	adds	r1, r7, r4
 8000d1c:	480a      	ldr	r0, [pc, #40]	; (8000d48 <writeAckPayload+0x80>)
 8000d1e:	2201      	movs	r2, #1
 8000d20:	f001 f95a 	bl	8001fd8 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&hspi1, (uint8_t*)current, data_len, 1000);
 8000d24:	230b      	movs	r3, #11
 8000d26:	18fb      	adds	r3, r7, r3
 8000d28:	781b      	ldrb	r3, [r3, #0]
 8000d2a:	b29a      	uxth	r2, r3
 8000d2c:	23fa      	movs	r3, #250	; 0xfa
 8000d2e:	009b      	lsls	r3, r3, #2
 8000d30:	68f9      	ldr	r1, [r7, #12]
 8000d32:	4805      	ldr	r0, [pc, #20]	; (8000d48 <writeAckPayload+0x80>)
 8000d34:	f001 f950 	bl	8001fd8 <HAL_SPI_Transmit>
	csn(HIGH);
 8000d38:	2001      	movs	r0, #1
 8000d3a:	f7ff fc01 	bl	8000540 <csn>
}
 8000d3e:	46c0      	nop			; (mov r8, r8)
 8000d40:	46bd      	mov	sp, r7
 8000d42:	b005      	add	sp, #20
 8000d44:	bd90      	pop	{r4, r7, pc}
 8000d46:	46c0      	nop			; (mov r8, r8)
 8000d48:	20000034 	.word	0x20000034

08000d4c <setPALevel>:
		write_register(EN_AA, en_aa);
	}
}

void setPALevel(uint8_t level)
{
 8000d4c:	b580      	push	{r7, lr}
 8000d4e:	b084      	sub	sp, #16
 8000d50:	af00      	add	r7, sp, #0
 8000d52:	0002      	movs	r2, r0
 8000d54:	1dfb      	adds	r3, r7, #7
 8000d56:	701a      	strb	r2, [r3, #0]
  uint8_t setup = read_register(RF_SETUP) & 0xF8;
 8000d58:	2006      	movs	r0, #6
 8000d5a:	f7ff fc15 	bl	8000588 <read_register>
 8000d5e:	0003      	movs	r3, r0
 8000d60:	0019      	movs	r1, r3
 8000d62:	230f      	movs	r3, #15
 8000d64:	18fb      	adds	r3, r7, r3
 8000d66:	2207      	movs	r2, #7
 8000d68:	4391      	bics	r1, r2
 8000d6a:	000a      	movs	r2, r1
 8000d6c:	701a      	strb	r2, [r3, #0]

  if(level > 3) // If invalid level, go to max PA
 8000d6e:	1dfb      	adds	r3, r7, #7
 8000d70:	781b      	ldrb	r3, [r3, #0]
 8000d72:	2b03      	cmp	r3, #3
 8000d74:	d903      	bls.n	8000d7e <setPALevel+0x32>
  {
	  level = (RF24_PA_MAX << 1) + 1;		// +1 to support the SI24R1 chip extra bit
 8000d76:	1dfb      	adds	r3, r7, #7
 8000d78:	2207      	movs	r2, #7
 8000d7a:	701a      	strb	r2, [r3, #0]
 8000d7c:	e006      	b.n	8000d8c <setPALevel+0x40>
  }
  else
  {
	  level = (level << 1) + 1;	 		// Else set level as requested
 8000d7e:	1dfb      	adds	r3, r7, #7
 8000d80:	781b      	ldrb	r3, [r3, #0]
 8000d82:	18db      	adds	r3, r3, r3
 8000d84:	b2da      	uxtb	r2, r3
 8000d86:	1dfb      	adds	r3, r7, #7
 8000d88:	3201      	adds	r2, #1
 8000d8a:	701a      	strb	r2, [r3, #0]
  }

  write_register(RF_SETUP, setup |= level);	// Write it to the chip
 8000d8c:	200f      	movs	r0, #15
 8000d8e:	183b      	adds	r3, r7, r0
 8000d90:	1839      	adds	r1, r7, r0
 8000d92:	1dfa      	adds	r2, r7, #7
 8000d94:	7809      	ldrb	r1, [r1, #0]
 8000d96:	7812      	ldrb	r2, [r2, #0]
 8000d98:	430a      	orrs	r2, r1
 8000d9a:	701a      	strb	r2, [r3, #0]
 8000d9c:	183b      	adds	r3, r7, r0
 8000d9e:	781b      	ldrb	r3, [r3, #0]
 8000da0:	0019      	movs	r1, r3
 8000da2:	2006      	movs	r0, #6
 8000da4:	f7ff fc5a 	bl	800065c <write_register>
}
 8000da8:	46c0      	nop			; (mov r8, r8)
 8000daa:	46bd      	mov	sp, r7
 8000dac:	b004      	add	sp, #16
 8000dae:	bd80      	pop	{r7, pc}

08000db0 <setDataRate>:
{
	return (read_register(RF_SETUP) & ((1 << RF_PWR_LOW) | (1 << RF_PWR_HIGH))) >> 1;
}

bool setDataRate(rf24_datarate_e speed)
{
 8000db0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000db2:	b085      	sub	sp, #20
 8000db4:	af00      	add	r7, sp, #0
 8000db6:	0002      	movs	r2, r0
 8000db8:	1dfb      	adds	r3, r7, #7
 8000dba:	701a      	strb	r2, [r3, #0]
	bool result = false;
 8000dbc:	230f      	movs	r3, #15
 8000dbe:	18fb      	adds	r3, r7, r3
 8000dc0:	2200      	movs	r2, #0
 8000dc2:	701a      	strb	r2, [r3, #0]
	uint8_t setup = read_register(RF_SETUP);
 8000dc4:	250e      	movs	r5, #14
 8000dc6:	197c      	adds	r4, r7, r5
 8000dc8:	2006      	movs	r0, #6
 8000dca:	f7ff fbdd 	bl	8000588 <read_register>
 8000dce:	0003      	movs	r3, r0
 8000dd0:	7023      	strb	r3, [r4, #0]
	setup &= ~((1 << RF_DR_LOW) | (1 << RF_DR_HIGH));
 8000dd2:	197b      	adds	r3, r7, r5
 8000dd4:	197a      	adds	r2, r7, r5
 8000dd6:	7812      	ldrb	r2, [r2, #0]
 8000dd8:	2128      	movs	r1, #40	; 0x28
 8000dda:	438a      	bics	r2, r1
 8000ddc:	701a      	strb	r2, [r3, #0]
	txDelay = 85;
 8000dde:	4b1f      	ldr	r3, [pc, #124]	; (8000e5c <setDataRate+0xac>)
 8000de0:	2255      	movs	r2, #85	; 0x55
 8000de2:	701a      	strb	r2, [r3, #0]

	if(speed == RF24_250KBPS)
 8000de4:	1dfb      	adds	r3, r7, #7
 8000de6:	781b      	ldrb	r3, [r3, #0]
 8000de8:	2b02      	cmp	r3, #2
 8000dea:	d10a      	bne.n	8000e02 <setDataRate+0x52>
	{
		setup |= (1 << RF_DR_LOW);
 8000dec:	220e      	movs	r2, #14
 8000dee:	18bb      	adds	r3, r7, r2
 8000df0:	18ba      	adds	r2, r7, r2
 8000df2:	7812      	ldrb	r2, [r2, #0]
 8000df4:	2120      	movs	r1, #32
 8000df6:	430a      	orrs	r2, r1
 8000df8:	701a      	strb	r2, [r3, #0]
		txDelay = 155;
 8000dfa:	4b18      	ldr	r3, [pc, #96]	; (8000e5c <setDataRate+0xac>)
 8000dfc:	229b      	movs	r2, #155	; 0x9b
 8000dfe:	701a      	strb	r2, [r3, #0]
 8000e00:	e00d      	b.n	8000e1e <setDataRate+0x6e>
	}
	else
	{
		if(speed == RF24_2MBPS)
 8000e02:	1dfb      	adds	r3, r7, #7
 8000e04:	781b      	ldrb	r3, [r3, #0]
 8000e06:	2b01      	cmp	r3, #1
 8000e08:	d109      	bne.n	8000e1e <setDataRate+0x6e>
		{
			setup |= (1 << RF_DR_HIGH);
 8000e0a:	220e      	movs	r2, #14
 8000e0c:	18bb      	adds	r3, r7, r2
 8000e0e:	18ba      	adds	r2, r7, r2
 8000e10:	7812      	ldrb	r2, [r2, #0]
 8000e12:	2108      	movs	r1, #8
 8000e14:	430a      	orrs	r2, r1
 8000e16:	701a      	strb	r2, [r3, #0]
			txDelay = 65;
 8000e18:	4b10      	ldr	r3, [pc, #64]	; (8000e5c <setDataRate+0xac>)
 8000e1a:	2241      	movs	r2, #65	; 0x41
 8000e1c:	701a      	strb	r2, [r3, #0]
		}
	}

	write_register(RF_SETUP, setup);
 8000e1e:	250e      	movs	r5, #14
 8000e20:	197b      	adds	r3, r7, r5
 8000e22:	781b      	ldrb	r3, [r3, #0]
 8000e24:	0019      	movs	r1, r3
 8000e26:	2006      	movs	r0, #6
 8000e28:	f7ff fc18 	bl	800065c <write_register>
	uint8_t ggg = read_register(RF_SETUP);
 8000e2c:	260d      	movs	r6, #13
 8000e2e:	19bc      	adds	r4, r7, r6
 8000e30:	2006      	movs	r0, #6
 8000e32:	f7ff fba9 	bl	8000588 <read_register>
 8000e36:	0003      	movs	r3, r0
 8000e38:	7023      	strb	r3, [r4, #0]

	if(ggg == setup)
 8000e3a:	19ba      	adds	r2, r7, r6
 8000e3c:	197b      	adds	r3, r7, r5
 8000e3e:	7812      	ldrb	r2, [r2, #0]
 8000e40:	781b      	ldrb	r3, [r3, #0]
 8000e42:	429a      	cmp	r2, r3
 8000e44:	d103      	bne.n	8000e4e <setDataRate+0x9e>
	{
		result = true;
 8000e46:	230f      	movs	r3, #15
 8000e48:	18fb      	adds	r3, r7, r3
 8000e4a:	2201      	movs	r2, #1
 8000e4c:	701a      	strb	r2, [r3, #0]
	}

	return result;
 8000e4e:	230f      	movs	r3, #15
 8000e50:	18fb      	adds	r3, r7, r3
 8000e52:	781b      	ldrb	r3, [r3, #0]
}
 8000e54:	0018      	movs	r0, r3
 8000e56:	46bd      	mov	sp, r7
 8000e58:	b005      	add	sp, #20
 8000e5a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000e5c:	20000032 	.word	0x20000032

08000e60 <setRetries>:
	uint8_t disable = read_register(NRF_CONFIG) & ~(1 << EN_CRC);
	write_register(NRF_CONFIG, disable);
}

void setRetries(uint8_t delay, uint8_t count)
{
 8000e60:	b580      	push	{r7, lr}
 8000e62:	b082      	sub	sp, #8
 8000e64:	af00      	add	r7, sp, #0
 8000e66:	0002      	movs	r2, r0
 8000e68:	1dfb      	adds	r3, r7, #7
 8000e6a:	701a      	strb	r2, [r3, #0]
 8000e6c:	1dbb      	adds	r3, r7, #6
 8000e6e:	1c0a      	adds	r2, r1, #0
 8000e70:	701a      	strb	r2, [r3, #0]
	write_register(SETUP_RETR, (delay&0xf)<<ARD | (count&0xf)<<ARC);
 8000e72:	1dfb      	adds	r3, r7, #7
 8000e74:	781b      	ldrb	r3, [r3, #0]
 8000e76:	011b      	lsls	r3, r3, #4
 8000e78:	b25a      	sxtb	r2, r3
 8000e7a:	1dbb      	adds	r3, r7, #6
 8000e7c:	781b      	ldrb	r3, [r3, #0]
 8000e7e:	b25b      	sxtb	r3, r3
 8000e80:	210f      	movs	r1, #15
 8000e82:	400b      	ands	r3, r1
 8000e84:	b25b      	sxtb	r3, r3
 8000e86:	4313      	orrs	r3, r2
 8000e88:	b25b      	sxtb	r3, r3
 8000e8a:	b2db      	uxtb	r3, r3
 8000e8c:	0019      	movs	r1, r3
 8000e8e:	2004      	movs	r0, #4
 8000e90:	f7ff fbe4 	bl	800065c <write_register>
}
 8000e94:	46c0      	nop			; (mov r8, r8)
 8000e96:	46bd      	mov	sp, r7
 8000e98:	b002      	add	sp, #8
 8000e9a:	bd80      	pop	{r7, pc}

08000e9c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000e9c:	b580      	push	{r7, lr}
 8000e9e:	b082      	sub	sp, #8
 8000ea0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ea2:	4b0f      	ldr	r3, [pc, #60]	; (8000ee0 <HAL_MspInit+0x44>)
 8000ea4:	699a      	ldr	r2, [r3, #24]
 8000ea6:	4b0e      	ldr	r3, [pc, #56]	; (8000ee0 <HAL_MspInit+0x44>)
 8000ea8:	2101      	movs	r1, #1
 8000eaa:	430a      	orrs	r2, r1
 8000eac:	619a      	str	r2, [r3, #24]
 8000eae:	4b0c      	ldr	r3, [pc, #48]	; (8000ee0 <HAL_MspInit+0x44>)
 8000eb0:	699b      	ldr	r3, [r3, #24]
 8000eb2:	2201      	movs	r2, #1
 8000eb4:	4013      	ands	r3, r2
 8000eb6:	607b      	str	r3, [r7, #4]
 8000eb8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000eba:	4b09      	ldr	r3, [pc, #36]	; (8000ee0 <HAL_MspInit+0x44>)
 8000ebc:	69da      	ldr	r2, [r3, #28]
 8000ebe:	4b08      	ldr	r3, [pc, #32]	; (8000ee0 <HAL_MspInit+0x44>)
 8000ec0:	2180      	movs	r1, #128	; 0x80
 8000ec2:	0549      	lsls	r1, r1, #21
 8000ec4:	430a      	orrs	r2, r1
 8000ec6:	61da      	str	r2, [r3, #28]
 8000ec8:	4b05      	ldr	r3, [pc, #20]	; (8000ee0 <HAL_MspInit+0x44>)
 8000eca:	69da      	ldr	r2, [r3, #28]
 8000ecc:	2380      	movs	r3, #128	; 0x80
 8000ece:	055b      	lsls	r3, r3, #21
 8000ed0:	4013      	ands	r3, r2
 8000ed2:	603b      	str	r3, [r7, #0]
 8000ed4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000ed6:	46c0      	nop			; (mov r8, r8)
 8000ed8:	46bd      	mov	sp, r7
 8000eda:	b002      	add	sp, #8
 8000edc:	bd80      	pop	{r7, pc}
 8000ede:	46c0      	nop			; (mov r8, r8)
 8000ee0:	40021000 	.word	0x40021000

08000ee4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000ee4:	b580      	push	{r7, lr}
 8000ee6:	b08a      	sub	sp, #40	; 0x28
 8000ee8:	af00      	add	r7, sp, #0
 8000eea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000eec:	2314      	movs	r3, #20
 8000eee:	18fb      	adds	r3, r7, r3
 8000ef0:	0018      	movs	r0, r3
 8000ef2:	2314      	movs	r3, #20
 8000ef4:	001a      	movs	r2, r3
 8000ef6:	2100      	movs	r1, #0
 8000ef8:	f001 fedb 	bl	8002cb2 <memset>
  if(hspi->Instance==SPI1)
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	681b      	ldr	r3, [r3, #0]
 8000f00:	4a1c      	ldr	r2, [pc, #112]	; (8000f74 <HAL_SPI_MspInit+0x90>)
 8000f02:	4293      	cmp	r3, r2
 8000f04:	d132      	bne.n	8000f6c <HAL_SPI_MspInit+0x88>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000f06:	4b1c      	ldr	r3, [pc, #112]	; (8000f78 <HAL_SPI_MspInit+0x94>)
 8000f08:	699a      	ldr	r2, [r3, #24]
 8000f0a:	4b1b      	ldr	r3, [pc, #108]	; (8000f78 <HAL_SPI_MspInit+0x94>)
 8000f0c:	2180      	movs	r1, #128	; 0x80
 8000f0e:	0149      	lsls	r1, r1, #5
 8000f10:	430a      	orrs	r2, r1
 8000f12:	619a      	str	r2, [r3, #24]
 8000f14:	4b18      	ldr	r3, [pc, #96]	; (8000f78 <HAL_SPI_MspInit+0x94>)
 8000f16:	699a      	ldr	r2, [r3, #24]
 8000f18:	2380      	movs	r3, #128	; 0x80
 8000f1a:	015b      	lsls	r3, r3, #5
 8000f1c:	4013      	ands	r3, r2
 8000f1e:	613b      	str	r3, [r7, #16]
 8000f20:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f22:	4b15      	ldr	r3, [pc, #84]	; (8000f78 <HAL_SPI_MspInit+0x94>)
 8000f24:	695a      	ldr	r2, [r3, #20]
 8000f26:	4b14      	ldr	r3, [pc, #80]	; (8000f78 <HAL_SPI_MspInit+0x94>)
 8000f28:	2180      	movs	r1, #128	; 0x80
 8000f2a:	0289      	lsls	r1, r1, #10
 8000f2c:	430a      	orrs	r2, r1
 8000f2e:	615a      	str	r2, [r3, #20]
 8000f30:	4b11      	ldr	r3, [pc, #68]	; (8000f78 <HAL_SPI_MspInit+0x94>)
 8000f32:	695a      	ldr	r2, [r3, #20]
 8000f34:	2380      	movs	r3, #128	; 0x80
 8000f36:	029b      	lsls	r3, r3, #10
 8000f38:	4013      	ands	r3, r2
 8000f3a:	60fb      	str	r3, [r7, #12]
 8000f3c:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8000f3e:	2114      	movs	r1, #20
 8000f40:	187b      	adds	r3, r7, r1
 8000f42:	22e0      	movs	r2, #224	; 0xe0
 8000f44:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f46:	187b      	adds	r3, r7, r1
 8000f48:	2202      	movs	r2, #2
 8000f4a:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f4c:	187b      	adds	r3, r7, r1
 8000f4e:	2200      	movs	r2, #0
 8000f50:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000f52:	187b      	adds	r3, r7, r1
 8000f54:	2203      	movs	r2, #3
 8000f56:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 8000f58:	187b      	adds	r3, r7, r1
 8000f5a:	2200      	movs	r2, #0
 8000f5c:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f5e:	187a      	adds	r2, r7, r1
 8000f60:	2390      	movs	r3, #144	; 0x90
 8000f62:	05db      	lsls	r3, r3, #23
 8000f64:	0011      	movs	r1, r2
 8000f66:	0018      	movs	r0, r3
 8000f68:	f000 f988 	bl	800127c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000f6c:	46c0      	nop			; (mov r8, r8)
 8000f6e:	46bd      	mov	sp, r7
 8000f70:	b00a      	add	sp, #40	; 0x28
 8000f72:	bd80      	pop	{r7, pc}
 8000f74:	40013000 	.word	0x40013000
 8000f78:	40021000 	.word	0x40021000

08000f7c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000f7c:	b580      	push	{r7, lr}
 8000f7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000f80:	e7fe      	b.n	8000f80 <NMI_Handler+0x4>

08000f82 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f82:	b580      	push	{r7, lr}
 8000f84:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f86:	e7fe      	b.n	8000f86 <HardFault_Handler+0x4>

08000f88 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000f88:	b580      	push	{r7, lr}
 8000f8a:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000f8c:	46c0      	nop			; (mov r8, r8)
 8000f8e:	46bd      	mov	sp, r7
 8000f90:	bd80      	pop	{r7, pc}

08000f92 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000f92:	b580      	push	{r7, lr}
 8000f94:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000f96:	46c0      	nop			; (mov r8, r8)
 8000f98:	46bd      	mov	sp, r7
 8000f9a:	bd80      	pop	{r7, pc}

08000f9c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000f9c:	b580      	push	{r7, lr}
 8000f9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000fa0:	f000 f87a 	bl	8001098 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000fa4:	46c0      	nop			; (mov r8, r8)
 8000fa6:	46bd      	mov	sp, r7
 8000fa8:	bd80      	pop	{r7, pc}

08000faa <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000faa:	b580      	push	{r7, lr}
 8000fac:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8000fae:	46c0      	nop			; (mov r8, r8)
 8000fb0:	46bd      	mov	sp, r7
 8000fb2:	bd80      	pop	{r7, pc}

08000fb4 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000fb4:	480d      	ldr	r0, [pc, #52]	; (8000fec <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000fb6:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000fb8:	480d      	ldr	r0, [pc, #52]	; (8000ff0 <LoopForever+0x6>)
  ldr r1, =_edata
 8000fba:	490e      	ldr	r1, [pc, #56]	; (8000ff4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000fbc:	4a0e      	ldr	r2, [pc, #56]	; (8000ff8 <LoopForever+0xe>)
  movs r3, #0
 8000fbe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000fc0:	e002      	b.n	8000fc8 <LoopCopyDataInit>

08000fc2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000fc2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000fc4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000fc6:	3304      	adds	r3, #4

08000fc8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000fc8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000fca:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000fcc:	d3f9      	bcc.n	8000fc2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000fce:	4a0b      	ldr	r2, [pc, #44]	; (8000ffc <LoopForever+0x12>)
  ldr r4, =_ebss
 8000fd0:	4c0b      	ldr	r4, [pc, #44]	; (8001000 <LoopForever+0x16>)
  movs r3, #0
 8000fd2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000fd4:	e001      	b.n	8000fda <LoopFillZerobss>

08000fd6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000fd6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000fd8:	3204      	adds	r2, #4

08000fda <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000fda:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000fdc:	d3fb      	bcc.n	8000fd6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000fde:	f7ff ffe4 	bl	8000faa <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 8000fe2:	f001 fe39 	bl	8002c58 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000fe6:	f7ff f91b 	bl	8000220 <main>

08000fea <LoopForever>:

LoopForever:
    b LoopForever
 8000fea:	e7fe      	b.n	8000fea <LoopForever>
  ldr   r0, =_estack
 8000fec:	20001000 	.word	0x20001000
  ldr r0, =_sdata
 8000ff0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000ff4:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000ff8:	08002d2c 	.word	0x08002d2c
  ldr r2, =_sbss
 8000ffc:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8001000:	200000a0 	.word	0x200000a0

08001004 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001004:	e7fe      	b.n	8001004 <ADC1_IRQHandler>
	...

08001008 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001008:	b580      	push	{r7, lr}
 800100a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800100c:	4b07      	ldr	r3, [pc, #28]	; (800102c <HAL_Init+0x24>)
 800100e:	681a      	ldr	r2, [r3, #0]
 8001010:	4b06      	ldr	r3, [pc, #24]	; (800102c <HAL_Init+0x24>)
 8001012:	2110      	movs	r1, #16
 8001014:	430a      	orrs	r2, r1
 8001016:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8001018:	2000      	movs	r0, #0
 800101a:	f000 f809 	bl	8001030 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800101e:	f7ff ff3d 	bl	8000e9c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001022:	2300      	movs	r3, #0
}
 8001024:	0018      	movs	r0, r3
 8001026:	46bd      	mov	sp, r7
 8001028:	bd80      	pop	{r7, pc}
 800102a:	46c0      	nop			; (mov r8, r8)
 800102c:	40022000 	.word	0x40022000

08001030 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001030:	b590      	push	{r4, r7, lr}
 8001032:	b083      	sub	sp, #12
 8001034:	af00      	add	r7, sp, #0
 8001036:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001038:	4b14      	ldr	r3, [pc, #80]	; (800108c <HAL_InitTick+0x5c>)
 800103a:	681c      	ldr	r4, [r3, #0]
 800103c:	4b14      	ldr	r3, [pc, #80]	; (8001090 <HAL_InitTick+0x60>)
 800103e:	781b      	ldrb	r3, [r3, #0]
 8001040:	0019      	movs	r1, r3
 8001042:	23fa      	movs	r3, #250	; 0xfa
 8001044:	0098      	lsls	r0, r3, #2
 8001046:	f7ff f85f 	bl	8000108 <__udivsi3>
 800104a:	0003      	movs	r3, r0
 800104c:	0019      	movs	r1, r3
 800104e:	0020      	movs	r0, r4
 8001050:	f7ff f85a 	bl	8000108 <__udivsi3>
 8001054:	0003      	movs	r3, r0
 8001056:	0018      	movs	r0, r3
 8001058:	f000 f903 	bl	8001262 <HAL_SYSTICK_Config>
 800105c:	1e03      	subs	r3, r0, #0
 800105e:	d001      	beq.n	8001064 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8001060:	2301      	movs	r3, #1
 8001062:	e00f      	b.n	8001084 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	2b03      	cmp	r3, #3
 8001068:	d80b      	bhi.n	8001082 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800106a:	6879      	ldr	r1, [r7, #4]
 800106c:	2301      	movs	r3, #1
 800106e:	425b      	negs	r3, r3
 8001070:	2200      	movs	r2, #0
 8001072:	0018      	movs	r0, r3
 8001074:	f000 f8e0 	bl	8001238 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001078:	4b06      	ldr	r3, [pc, #24]	; (8001094 <HAL_InitTick+0x64>)
 800107a:	687a      	ldr	r2, [r7, #4]
 800107c:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 800107e:	2300      	movs	r3, #0
 8001080:	e000      	b.n	8001084 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8001082:	2301      	movs	r3, #1
}
 8001084:	0018      	movs	r0, r3
 8001086:	46bd      	mov	sp, r7
 8001088:	b003      	add	sp, #12
 800108a:	bd90      	pop	{r4, r7, pc}
 800108c:	20000000 	.word	0x20000000
 8001090:	20000008 	.word	0x20000008
 8001094:	20000004 	.word	0x20000004

08001098 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001098:	b580      	push	{r7, lr}
 800109a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800109c:	4b05      	ldr	r3, [pc, #20]	; (80010b4 <HAL_IncTick+0x1c>)
 800109e:	781b      	ldrb	r3, [r3, #0]
 80010a0:	001a      	movs	r2, r3
 80010a2:	4b05      	ldr	r3, [pc, #20]	; (80010b8 <HAL_IncTick+0x20>)
 80010a4:	681b      	ldr	r3, [r3, #0]
 80010a6:	18d2      	adds	r2, r2, r3
 80010a8:	4b03      	ldr	r3, [pc, #12]	; (80010b8 <HAL_IncTick+0x20>)
 80010aa:	601a      	str	r2, [r3, #0]
}
 80010ac:	46c0      	nop			; (mov r8, r8)
 80010ae:	46bd      	mov	sp, r7
 80010b0:	bd80      	pop	{r7, pc}
 80010b2:	46c0      	nop			; (mov r8, r8)
 80010b4:	20000008 	.word	0x20000008
 80010b8:	2000009c 	.word	0x2000009c

080010bc <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80010bc:	b580      	push	{r7, lr}
 80010be:	af00      	add	r7, sp, #0
  return uwTick;
 80010c0:	4b02      	ldr	r3, [pc, #8]	; (80010cc <HAL_GetTick+0x10>)
 80010c2:	681b      	ldr	r3, [r3, #0]
}
 80010c4:	0018      	movs	r0, r3
 80010c6:	46bd      	mov	sp, r7
 80010c8:	bd80      	pop	{r7, pc}
 80010ca:	46c0      	nop			; (mov r8, r8)
 80010cc:	2000009c 	.word	0x2000009c

080010d0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80010d0:	b580      	push	{r7, lr}
 80010d2:	b084      	sub	sp, #16
 80010d4:	af00      	add	r7, sp, #0
 80010d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80010d8:	f7ff fff0 	bl	80010bc <HAL_GetTick>
 80010dc:	0003      	movs	r3, r0
 80010de:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	60fb      	str	r3, [r7, #12]
  
  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80010e4:	68fb      	ldr	r3, [r7, #12]
 80010e6:	3301      	adds	r3, #1
 80010e8:	d005      	beq.n	80010f6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80010ea:	4b09      	ldr	r3, [pc, #36]	; (8001110 <HAL_Delay+0x40>)
 80010ec:	781b      	ldrb	r3, [r3, #0]
 80010ee:	001a      	movs	r2, r3
 80010f0:	68fb      	ldr	r3, [r7, #12]
 80010f2:	189b      	adds	r3, r3, r2
 80010f4:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 80010f6:	46c0      	nop			; (mov r8, r8)
 80010f8:	f7ff ffe0 	bl	80010bc <HAL_GetTick>
 80010fc:	0002      	movs	r2, r0
 80010fe:	68bb      	ldr	r3, [r7, #8]
 8001100:	1ad3      	subs	r3, r2, r3
 8001102:	68fa      	ldr	r2, [r7, #12]
 8001104:	429a      	cmp	r2, r3
 8001106:	d8f7      	bhi.n	80010f8 <HAL_Delay+0x28>
  {
  }
}
 8001108:	46c0      	nop			; (mov r8, r8)
 800110a:	46bd      	mov	sp, r7
 800110c:	b004      	add	sp, #16
 800110e:	bd80      	pop	{r7, pc}
 8001110:	20000008 	.word	0x20000008

08001114 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001114:	b590      	push	{r4, r7, lr}
 8001116:	b083      	sub	sp, #12
 8001118:	af00      	add	r7, sp, #0
 800111a:	0002      	movs	r2, r0
 800111c:	6039      	str	r1, [r7, #0]
 800111e:	1dfb      	adds	r3, r7, #7
 8001120:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001122:	1dfb      	adds	r3, r7, #7
 8001124:	781b      	ldrb	r3, [r3, #0]
 8001126:	2b7f      	cmp	r3, #127	; 0x7f
 8001128:	d828      	bhi.n	800117c <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800112a:	4a2f      	ldr	r2, [pc, #188]	; (80011e8 <__NVIC_SetPriority+0xd4>)
 800112c:	1dfb      	adds	r3, r7, #7
 800112e:	781b      	ldrb	r3, [r3, #0]
 8001130:	b25b      	sxtb	r3, r3
 8001132:	089b      	lsrs	r3, r3, #2
 8001134:	33c0      	adds	r3, #192	; 0xc0
 8001136:	009b      	lsls	r3, r3, #2
 8001138:	589b      	ldr	r3, [r3, r2]
 800113a:	1dfa      	adds	r2, r7, #7
 800113c:	7812      	ldrb	r2, [r2, #0]
 800113e:	0011      	movs	r1, r2
 8001140:	2203      	movs	r2, #3
 8001142:	400a      	ands	r2, r1
 8001144:	00d2      	lsls	r2, r2, #3
 8001146:	21ff      	movs	r1, #255	; 0xff
 8001148:	4091      	lsls	r1, r2
 800114a:	000a      	movs	r2, r1
 800114c:	43d2      	mvns	r2, r2
 800114e:	401a      	ands	r2, r3
 8001150:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001152:	683b      	ldr	r3, [r7, #0]
 8001154:	019b      	lsls	r3, r3, #6
 8001156:	22ff      	movs	r2, #255	; 0xff
 8001158:	401a      	ands	r2, r3
 800115a:	1dfb      	adds	r3, r7, #7
 800115c:	781b      	ldrb	r3, [r3, #0]
 800115e:	0018      	movs	r0, r3
 8001160:	2303      	movs	r3, #3
 8001162:	4003      	ands	r3, r0
 8001164:	00db      	lsls	r3, r3, #3
 8001166:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001168:	481f      	ldr	r0, [pc, #124]	; (80011e8 <__NVIC_SetPriority+0xd4>)
 800116a:	1dfb      	adds	r3, r7, #7
 800116c:	781b      	ldrb	r3, [r3, #0]
 800116e:	b25b      	sxtb	r3, r3
 8001170:	089b      	lsrs	r3, r3, #2
 8001172:	430a      	orrs	r2, r1
 8001174:	33c0      	adds	r3, #192	; 0xc0
 8001176:	009b      	lsls	r3, r3, #2
 8001178:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 800117a:	e031      	b.n	80011e0 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800117c:	4a1b      	ldr	r2, [pc, #108]	; (80011ec <__NVIC_SetPriority+0xd8>)
 800117e:	1dfb      	adds	r3, r7, #7
 8001180:	781b      	ldrb	r3, [r3, #0]
 8001182:	0019      	movs	r1, r3
 8001184:	230f      	movs	r3, #15
 8001186:	400b      	ands	r3, r1
 8001188:	3b08      	subs	r3, #8
 800118a:	089b      	lsrs	r3, r3, #2
 800118c:	3306      	adds	r3, #6
 800118e:	009b      	lsls	r3, r3, #2
 8001190:	18d3      	adds	r3, r2, r3
 8001192:	3304      	adds	r3, #4
 8001194:	681b      	ldr	r3, [r3, #0]
 8001196:	1dfa      	adds	r2, r7, #7
 8001198:	7812      	ldrb	r2, [r2, #0]
 800119a:	0011      	movs	r1, r2
 800119c:	2203      	movs	r2, #3
 800119e:	400a      	ands	r2, r1
 80011a0:	00d2      	lsls	r2, r2, #3
 80011a2:	21ff      	movs	r1, #255	; 0xff
 80011a4:	4091      	lsls	r1, r2
 80011a6:	000a      	movs	r2, r1
 80011a8:	43d2      	mvns	r2, r2
 80011aa:	401a      	ands	r2, r3
 80011ac:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80011ae:	683b      	ldr	r3, [r7, #0]
 80011b0:	019b      	lsls	r3, r3, #6
 80011b2:	22ff      	movs	r2, #255	; 0xff
 80011b4:	401a      	ands	r2, r3
 80011b6:	1dfb      	adds	r3, r7, #7
 80011b8:	781b      	ldrb	r3, [r3, #0]
 80011ba:	0018      	movs	r0, r3
 80011bc:	2303      	movs	r3, #3
 80011be:	4003      	ands	r3, r0
 80011c0:	00db      	lsls	r3, r3, #3
 80011c2:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80011c4:	4809      	ldr	r0, [pc, #36]	; (80011ec <__NVIC_SetPriority+0xd8>)
 80011c6:	1dfb      	adds	r3, r7, #7
 80011c8:	781b      	ldrb	r3, [r3, #0]
 80011ca:	001c      	movs	r4, r3
 80011cc:	230f      	movs	r3, #15
 80011ce:	4023      	ands	r3, r4
 80011d0:	3b08      	subs	r3, #8
 80011d2:	089b      	lsrs	r3, r3, #2
 80011d4:	430a      	orrs	r2, r1
 80011d6:	3306      	adds	r3, #6
 80011d8:	009b      	lsls	r3, r3, #2
 80011da:	18c3      	adds	r3, r0, r3
 80011dc:	3304      	adds	r3, #4
 80011de:	601a      	str	r2, [r3, #0]
}
 80011e0:	46c0      	nop			; (mov r8, r8)
 80011e2:	46bd      	mov	sp, r7
 80011e4:	b003      	add	sp, #12
 80011e6:	bd90      	pop	{r4, r7, pc}
 80011e8:	e000e100 	.word	0xe000e100
 80011ec:	e000ed00 	.word	0xe000ed00

080011f0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80011f0:	b580      	push	{r7, lr}
 80011f2:	b082      	sub	sp, #8
 80011f4:	af00      	add	r7, sp, #0
 80011f6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	3b01      	subs	r3, #1
 80011fc:	4a0c      	ldr	r2, [pc, #48]	; (8001230 <SysTick_Config+0x40>)
 80011fe:	4293      	cmp	r3, r2
 8001200:	d901      	bls.n	8001206 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001202:	2301      	movs	r3, #1
 8001204:	e010      	b.n	8001228 <SysTick_Config+0x38>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001206:	4b0b      	ldr	r3, [pc, #44]	; (8001234 <SysTick_Config+0x44>)
 8001208:	687a      	ldr	r2, [r7, #4]
 800120a:	3a01      	subs	r2, #1
 800120c:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800120e:	2301      	movs	r3, #1
 8001210:	425b      	negs	r3, r3
 8001212:	2103      	movs	r1, #3
 8001214:	0018      	movs	r0, r3
 8001216:	f7ff ff7d 	bl	8001114 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800121a:	4b06      	ldr	r3, [pc, #24]	; (8001234 <SysTick_Config+0x44>)
 800121c:	2200      	movs	r2, #0
 800121e:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001220:	4b04      	ldr	r3, [pc, #16]	; (8001234 <SysTick_Config+0x44>)
 8001222:	2207      	movs	r2, #7
 8001224:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001226:	2300      	movs	r3, #0
}
 8001228:	0018      	movs	r0, r3
 800122a:	46bd      	mov	sp, r7
 800122c:	b002      	add	sp, #8
 800122e:	bd80      	pop	{r7, pc}
 8001230:	00ffffff 	.word	0x00ffffff
 8001234:	e000e010 	.word	0xe000e010

08001238 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001238:	b580      	push	{r7, lr}
 800123a:	b084      	sub	sp, #16
 800123c:	af00      	add	r7, sp, #0
 800123e:	60b9      	str	r1, [r7, #8]
 8001240:	607a      	str	r2, [r7, #4]
 8001242:	210f      	movs	r1, #15
 8001244:	187b      	adds	r3, r7, r1
 8001246:	1c02      	adds	r2, r0, #0
 8001248:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 800124a:	68ba      	ldr	r2, [r7, #8]
 800124c:	187b      	adds	r3, r7, r1
 800124e:	781b      	ldrb	r3, [r3, #0]
 8001250:	b25b      	sxtb	r3, r3
 8001252:	0011      	movs	r1, r2
 8001254:	0018      	movs	r0, r3
 8001256:	f7ff ff5d 	bl	8001114 <__NVIC_SetPriority>
}
 800125a:	46c0      	nop			; (mov r8, r8)
 800125c:	46bd      	mov	sp, r7
 800125e:	b004      	add	sp, #16
 8001260:	bd80      	pop	{r7, pc}

08001262 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001262:	b580      	push	{r7, lr}
 8001264:	b082      	sub	sp, #8
 8001266:	af00      	add	r7, sp, #0
 8001268:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	0018      	movs	r0, r3
 800126e:	f7ff ffbf 	bl	80011f0 <SysTick_Config>
 8001272:	0003      	movs	r3, r0
}
 8001274:	0018      	movs	r0, r3
 8001276:	46bd      	mov	sp, r7
 8001278:	b002      	add	sp, #8
 800127a:	bd80      	pop	{r7, pc}

0800127c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{ 
 800127c:	b580      	push	{r7, lr}
 800127e:	b086      	sub	sp, #24
 8001280:	af00      	add	r7, sp, #0
 8001282:	6078      	str	r0, [r7, #4]
 8001284:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001286:	2300      	movs	r3, #0
 8001288:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800128a:	e14f      	b.n	800152c <HAL_GPIO_Init+0x2b0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800128c:	683b      	ldr	r3, [r7, #0]
 800128e:	681b      	ldr	r3, [r3, #0]
 8001290:	2101      	movs	r1, #1
 8001292:	697a      	ldr	r2, [r7, #20]
 8001294:	4091      	lsls	r1, r2
 8001296:	000a      	movs	r2, r1
 8001298:	4013      	ands	r3, r2
 800129a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800129c:	68fb      	ldr	r3, [r7, #12]
 800129e:	2b00      	cmp	r3, #0
 80012a0:	d100      	bne.n	80012a4 <HAL_GPIO_Init+0x28>
 80012a2:	e140      	b.n	8001526 <HAL_GPIO_Init+0x2aa>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80012a4:	683b      	ldr	r3, [r7, #0]
 80012a6:	685b      	ldr	r3, [r3, #4]
 80012a8:	2b01      	cmp	r3, #1
 80012aa:	d00b      	beq.n	80012c4 <HAL_GPIO_Init+0x48>
 80012ac:	683b      	ldr	r3, [r7, #0]
 80012ae:	685b      	ldr	r3, [r3, #4]
 80012b0:	2b02      	cmp	r3, #2
 80012b2:	d007      	beq.n	80012c4 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80012b4:	683b      	ldr	r3, [r7, #0]
 80012b6:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80012b8:	2b11      	cmp	r3, #17
 80012ba:	d003      	beq.n	80012c4 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80012bc:	683b      	ldr	r3, [r7, #0]
 80012be:	685b      	ldr	r3, [r3, #4]
 80012c0:	2b12      	cmp	r3, #18
 80012c2:	d130      	bne.n	8001326 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	689b      	ldr	r3, [r3, #8]
 80012c8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 80012ca:	697b      	ldr	r3, [r7, #20]
 80012cc:	005b      	lsls	r3, r3, #1
 80012ce:	2203      	movs	r2, #3
 80012d0:	409a      	lsls	r2, r3
 80012d2:	0013      	movs	r3, r2
 80012d4:	43da      	mvns	r2, r3
 80012d6:	693b      	ldr	r3, [r7, #16]
 80012d8:	4013      	ands	r3, r2
 80012da:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80012dc:	683b      	ldr	r3, [r7, #0]
 80012de:	68da      	ldr	r2, [r3, #12]
 80012e0:	697b      	ldr	r3, [r7, #20]
 80012e2:	005b      	lsls	r3, r3, #1
 80012e4:	409a      	lsls	r2, r3
 80012e6:	0013      	movs	r3, r2
 80012e8:	693a      	ldr	r2, [r7, #16]
 80012ea:	4313      	orrs	r3, r2
 80012ec:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	693a      	ldr	r2, [r7, #16]
 80012f2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	685b      	ldr	r3, [r3, #4]
 80012f8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80012fa:	2201      	movs	r2, #1
 80012fc:	697b      	ldr	r3, [r7, #20]
 80012fe:	409a      	lsls	r2, r3
 8001300:	0013      	movs	r3, r2
 8001302:	43da      	mvns	r2, r3
 8001304:	693b      	ldr	r3, [r7, #16]
 8001306:	4013      	ands	r3, r2
 8001308:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 800130a:	683b      	ldr	r3, [r7, #0]
 800130c:	685b      	ldr	r3, [r3, #4]
 800130e:	091b      	lsrs	r3, r3, #4
 8001310:	2201      	movs	r2, #1
 8001312:	401a      	ands	r2, r3
 8001314:	697b      	ldr	r3, [r7, #20]
 8001316:	409a      	lsls	r2, r3
 8001318:	0013      	movs	r3, r2
 800131a:	693a      	ldr	r2, [r7, #16]
 800131c:	4313      	orrs	r3, r2
 800131e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	693a      	ldr	r2, [r7, #16]
 8001324:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	68db      	ldr	r3, [r3, #12]
 800132a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 800132c:	697b      	ldr	r3, [r7, #20]
 800132e:	005b      	lsls	r3, r3, #1
 8001330:	2203      	movs	r2, #3
 8001332:	409a      	lsls	r2, r3
 8001334:	0013      	movs	r3, r2
 8001336:	43da      	mvns	r2, r3
 8001338:	693b      	ldr	r3, [r7, #16]
 800133a:	4013      	ands	r3, r2
 800133c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 800133e:	683b      	ldr	r3, [r7, #0]
 8001340:	689a      	ldr	r2, [r3, #8]
 8001342:	697b      	ldr	r3, [r7, #20]
 8001344:	005b      	lsls	r3, r3, #1
 8001346:	409a      	lsls	r2, r3
 8001348:	0013      	movs	r3, r2
 800134a:	693a      	ldr	r2, [r7, #16]
 800134c:	4313      	orrs	r3, r2
 800134e:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	693a      	ldr	r2, [r7, #16]
 8001354:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001356:	683b      	ldr	r3, [r7, #0]
 8001358:	685b      	ldr	r3, [r3, #4]
 800135a:	2b02      	cmp	r3, #2
 800135c:	d003      	beq.n	8001366 <HAL_GPIO_Init+0xea>
 800135e:	683b      	ldr	r3, [r7, #0]
 8001360:	685b      	ldr	r3, [r3, #4]
 8001362:	2b12      	cmp	r3, #18
 8001364:	d123      	bne.n	80013ae <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001366:	697b      	ldr	r3, [r7, #20]
 8001368:	08da      	lsrs	r2, r3, #3
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	3208      	adds	r2, #8
 800136e:	0092      	lsls	r2, r2, #2
 8001370:	58d3      	ldr	r3, [r2, r3]
 8001372:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001374:	697b      	ldr	r3, [r7, #20]
 8001376:	2207      	movs	r2, #7
 8001378:	4013      	ands	r3, r2
 800137a:	009b      	lsls	r3, r3, #2
 800137c:	220f      	movs	r2, #15
 800137e:	409a      	lsls	r2, r3
 8001380:	0013      	movs	r3, r2
 8001382:	43da      	mvns	r2, r3
 8001384:	693b      	ldr	r3, [r7, #16]
 8001386:	4013      	ands	r3, r2
 8001388:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800138a:	683b      	ldr	r3, [r7, #0]
 800138c:	691a      	ldr	r2, [r3, #16]
 800138e:	697b      	ldr	r3, [r7, #20]
 8001390:	2107      	movs	r1, #7
 8001392:	400b      	ands	r3, r1
 8001394:	009b      	lsls	r3, r3, #2
 8001396:	409a      	lsls	r2, r3
 8001398:	0013      	movs	r3, r2
 800139a:	693a      	ldr	r2, [r7, #16]
 800139c:	4313      	orrs	r3, r2
 800139e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80013a0:	697b      	ldr	r3, [r7, #20]
 80013a2:	08da      	lsrs	r2, r3, #3
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	3208      	adds	r2, #8
 80013a8:	0092      	lsls	r2, r2, #2
 80013aa:	6939      	ldr	r1, [r7, #16]
 80013ac:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 80013b4:	697b      	ldr	r3, [r7, #20]
 80013b6:	005b      	lsls	r3, r3, #1
 80013b8:	2203      	movs	r2, #3
 80013ba:	409a      	lsls	r2, r3
 80013bc:	0013      	movs	r3, r2
 80013be:	43da      	mvns	r2, r3
 80013c0:	693b      	ldr	r3, [r7, #16]
 80013c2:	4013      	ands	r3, r2
 80013c4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80013c6:	683b      	ldr	r3, [r7, #0]
 80013c8:	685b      	ldr	r3, [r3, #4]
 80013ca:	2203      	movs	r2, #3
 80013cc:	401a      	ands	r2, r3
 80013ce:	697b      	ldr	r3, [r7, #20]
 80013d0:	005b      	lsls	r3, r3, #1
 80013d2:	409a      	lsls	r2, r3
 80013d4:	0013      	movs	r3, r2
 80013d6:	693a      	ldr	r2, [r7, #16]
 80013d8:	4313      	orrs	r3, r2
 80013da:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	693a      	ldr	r2, [r7, #16]
 80013e0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80013e2:	683b      	ldr	r3, [r7, #0]
 80013e4:	685a      	ldr	r2, [r3, #4]
 80013e6:	2380      	movs	r3, #128	; 0x80
 80013e8:	055b      	lsls	r3, r3, #21
 80013ea:	4013      	ands	r3, r2
 80013ec:	d100      	bne.n	80013f0 <HAL_GPIO_Init+0x174>
 80013ee:	e09a      	b.n	8001526 <HAL_GPIO_Init+0x2aa>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80013f0:	4b54      	ldr	r3, [pc, #336]	; (8001544 <HAL_GPIO_Init+0x2c8>)
 80013f2:	699a      	ldr	r2, [r3, #24]
 80013f4:	4b53      	ldr	r3, [pc, #332]	; (8001544 <HAL_GPIO_Init+0x2c8>)
 80013f6:	2101      	movs	r1, #1
 80013f8:	430a      	orrs	r2, r1
 80013fa:	619a      	str	r2, [r3, #24]
 80013fc:	4b51      	ldr	r3, [pc, #324]	; (8001544 <HAL_GPIO_Init+0x2c8>)
 80013fe:	699b      	ldr	r3, [r3, #24]
 8001400:	2201      	movs	r2, #1
 8001402:	4013      	ands	r3, r2
 8001404:	60bb      	str	r3, [r7, #8]
 8001406:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001408:	4a4f      	ldr	r2, [pc, #316]	; (8001548 <HAL_GPIO_Init+0x2cc>)
 800140a:	697b      	ldr	r3, [r7, #20]
 800140c:	089b      	lsrs	r3, r3, #2
 800140e:	3302      	adds	r3, #2
 8001410:	009b      	lsls	r3, r3, #2
 8001412:	589b      	ldr	r3, [r3, r2]
 8001414:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001416:	697b      	ldr	r3, [r7, #20]
 8001418:	2203      	movs	r2, #3
 800141a:	4013      	ands	r3, r2
 800141c:	009b      	lsls	r3, r3, #2
 800141e:	220f      	movs	r2, #15
 8001420:	409a      	lsls	r2, r3
 8001422:	0013      	movs	r3, r2
 8001424:	43da      	mvns	r2, r3
 8001426:	693b      	ldr	r3, [r7, #16]
 8001428:	4013      	ands	r3, r2
 800142a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800142c:	687a      	ldr	r2, [r7, #4]
 800142e:	2390      	movs	r3, #144	; 0x90
 8001430:	05db      	lsls	r3, r3, #23
 8001432:	429a      	cmp	r2, r3
 8001434:	d013      	beq.n	800145e <HAL_GPIO_Init+0x1e2>
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	4a44      	ldr	r2, [pc, #272]	; (800154c <HAL_GPIO_Init+0x2d0>)
 800143a:	4293      	cmp	r3, r2
 800143c:	d00d      	beq.n	800145a <HAL_GPIO_Init+0x1de>
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	4a43      	ldr	r2, [pc, #268]	; (8001550 <HAL_GPIO_Init+0x2d4>)
 8001442:	4293      	cmp	r3, r2
 8001444:	d007      	beq.n	8001456 <HAL_GPIO_Init+0x1da>
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	4a42      	ldr	r2, [pc, #264]	; (8001554 <HAL_GPIO_Init+0x2d8>)
 800144a:	4293      	cmp	r3, r2
 800144c:	d101      	bne.n	8001452 <HAL_GPIO_Init+0x1d6>
 800144e:	2303      	movs	r3, #3
 8001450:	e006      	b.n	8001460 <HAL_GPIO_Init+0x1e4>
 8001452:	2305      	movs	r3, #5
 8001454:	e004      	b.n	8001460 <HAL_GPIO_Init+0x1e4>
 8001456:	2302      	movs	r3, #2
 8001458:	e002      	b.n	8001460 <HAL_GPIO_Init+0x1e4>
 800145a:	2301      	movs	r3, #1
 800145c:	e000      	b.n	8001460 <HAL_GPIO_Init+0x1e4>
 800145e:	2300      	movs	r3, #0
 8001460:	697a      	ldr	r2, [r7, #20]
 8001462:	2103      	movs	r1, #3
 8001464:	400a      	ands	r2, r1
 8001466:	0092      	lsls	r2, r2, #2
 8001468:	4093      	lsls	r3, r2
 800146a:	693a      	ldr	r2, [r7, #16]
 800146c:	4313      	orrs	r3, r2
 800146e:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001470:	4935      	ldr	r1, [pc, #212]	; (8001548 <HAL_GPIO_Init+0x2cc>)
 8001472:	697b      	ldr	r3, [r7, #20]
 8001474:	089b      	lsrs	r3, r3, #2
 8001476:	3302      	adds	r3, #2
 8001478:	009b      	lsls	r3, r3, #2
 800147a:	693a      	ldr	r2, [r7, #16]
 800147c:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800147e:	4b36      	ldr	r3, [pc, #216]	; (8001558 <HAL_GPIO_Init+0x2dc>)
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001484:	68fb      	ldr	r3, [r7, #12]
 8001486:	43da      	mvns	r2, r3
 8001488:	693b      	ldr	r3, [r7, #16]
 800148a:	4013      	ands	r3, r2
 800148c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800148e:	683b      	ldr	r3, [r7, #0]
 8001490:	685a      	ldr	r2, [r3, #4]
 8001492:	2380      	movs	r3, #128	; 0x80
 8001494:	025b      	lsls	r3, r3, #9
 8001496:	4013      	ands	r3, r2
 8001498:	d003      	beq.n	80014a2 <HAL_GPIO_Init+0x226>
        {
          temp |= iocurrent;
 800149a:	693a      	ldr	r2, [r7, #16]
 800149c:	68fb      	ldr	r3, [r7, #12]
 800149e:	4313      	orrs	r3, r2
 80014a0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80014a2:	4b2d      	ldr	r3, [pc, #180]	; (8001558 <HAL_GPIO_Init+0x2dc>)
 80014a4:	693a      	ldr	r2, [r7, #16]
 80014a6:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 80014a8:	4b2b      	ldr	r3, [pc, #172]	; (8001558 <HAL_GPIO_Init+0x2dc>)
 80014aa:	685b      	ldr	r3, [r3, #4]
 80014ac:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80014ae:	68fb      	ldr	r3, [r7, #12]
 80014b0:	43da      	mvns	r2, r3
 80014b2:	693b      	ldr	r3, [r7, #16]
 80014b4:	4013      	ands	r3, r2
 80014b6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80014b8:	683b      	ldr	r3, [r7, #0]
 80014ba:	685a      	ldr	r2, [r3, #4]
 80014bc:	2380      	movs	r3, #128	; 0x80
 80014be:	029b      	lsls	r3, r3, #10
 80014c0:	4013      	ands	r3, r2
 80014c2:	d003      	beq.n	80014cc <HAL_GPIO_Init+0x250>
        {
          temp |= iocurrent;
 80014c4:	693a      	ldr	r2, [r7, #16]
 80014c6:	68fb      	ldr	r3, [r7, #12]
 80014c8:	4313      	orrs	r3, r2
 80014ca:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80014cc:	4b22      	ldr	r3, [pc, #136]	; (8001558 <HAL_GPIO_Init+0x2dc>)
 80014ce:	693a      	ldr	r2, [r7, #16]
 80014d0:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80014d2:	4b21      	ldr	r3, [pc, #132]	; (8001558 <HAL_GPIO_Init+0x2dc>)
 80014d4:	689b      	ldr	r3, [r3, #8]
 80014d6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80014d8:	68fb      	ldr	r3, [r7, #12]
 80014da:	43da      	mvns	r2, r3
 80014dc:	693b      	ldr	r3, [r7, #16]
 80014de:	4013      	ands	r3, r2
 80014e0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80014e2:	683b      	ldr	r3, [r7, #0]
 80014e4:	685a      	ldr	r2, [r3, #4]
 80014e6:	2380      	movs	r3, #128	; 0x80
 80014e8:	035b      	lsls	r3, r3, #13
 80014ea:	4013      	ands	r3, r2
 80014ec:	d003      	beq.n	80014f6 <HAL_GPIO_Init+0x27a>
        {
          temp |= iocurrent;
 80014ee:	693a      	ldr	r2, [r7, #16]
 80014f0:	68fb      	ldr	r3, [r7, #12]
 80014f2:	4313      	orrs	r3, r2
 80014f4:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80014f6:	4b18      	ldr	r3, [pc, #96]	; (8001558 <HAL_GPIO_Init+0x2dc>)
 80014f8:	693a      	ldr	r2, [r7, #16]
 80014fa:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 80014fc:	4b16      	ldr	r3, [pc, #88]	; (8001558 <HAL_GPIO_Init+0x2dc>)
 80014fe:	68db      	ldr	r3, [r3, #12]
 8001500:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001502:	68fb      	ldr	r3, [r7, #12]
 8001504:	43da      	mvns	r2, r3
 8001506:	693b      	ldr	r3, [r7, #16]
 8001508:	4013      	ands	r3, r2
 800150a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800150c:	683b      	ldr	r3, [r7, #0]
 800150e:	685a      	ldr	r2, [r3, #4]
 8001510:	2380      	movs	r3, #128	; 0x80
 8001512:	039b      	lsls	r3, r3, #14
 8001514:	4013      	ands	r3, r2
 8001516:	d003      	beq.n	8001520 <HAL_GPIO_Init+0x2a4>
        {
          temp |= iocurrent;
 8001518:	693a      	ldr	r2, [r7, #16]
 800151a:	68fb      	ldr	r3, [r7, #12]
 800151c:	4313      	orrs	r3, r2
 800151e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001520:	4b0d      	ldr	r3, [pc, #52]	; (8001558 <HAL_GPIO_Init+0x2dc>)
 8001522:	693a      	ldr	r2, [r7, #16]
 8001524:	60da      	str	r2, [r3, #12]
      }
    }

    position++;
 8001526:	697b      	ldr	r3, [r7, #20]
 8001528:	3301      	adds	r3, #1
 800152a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800152c:	683b      	ldr	r3, [r7, #0]
 800152e:	681a      	ldr	r2, [r3, #0]
 8001530:	697b      	ldr	r3, [r7, #20]
 8001532:	40da      	lsrs	r2, r3
 8001534:	1e13      	subs	r3, r2, #0
 8001536:	d000      	beq.n	800153a <HAL_GPIO_Init+0x2be>
 8001538:	e6a8      	b.n	800128c <HAL_GPIO_Init+0x10>
  } 
}
 800153a:	46c0      	nop			; (mov r8, r8)
 800153c:	46bd      	mov	sp, r7
 800153e:	b006      	add	sp, #24
 8001540:	bd80      	pop	{r7, pc}
 8001542:	46c0      	nop			; (mov r8, r8)
 8001544:	40021000 	.word	0x40021000
 8001548:	40010000 	.word	0x40010000
 800154c:	48000400 	.word	0x48000400
 8001550:	48000800 	.word	0x48000800
 8001554:	48000c00 	.word	0x48000c00
 8001558:	40010400 	.word	0x40010400

0800155c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800155c:	b580      	push	{r7, lr}
 800155e:	b082      	sub	sp, #8
 8001560:	af00      	add	r7, sp, #0
 8001562:	6078      	str	r0, [r7, #4]
 8001564:	0008      	movs	r0, r1
 8001566:	0011      	movs	r1, r2
 8001568:	1cbb      	adds	r3, r7, #2
 800156a:	1c02      	adds	r2, r0, #0
 800156c:	801a      	strh	r2, [r3, #0]
 800156e:	1c7b      	adds	r3, r7, #1
 8001570:	1c0a      	adds	r2, r1, #0
 8001572:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001574:	1c7b      	adds	r3, r7, #1
 8001576:	781b      	ldrb	r3, [r3, #0]
 8001578:	2b00      	cmp	r3, #0
 800157a:	d004      	beq.n	8001586 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800157c:	1cbb      	adds	r3, r7, #2
 800157e:	881a      	ldrh	r2, [r3, #0]
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001584:	e003      	b.n	800158e <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001586:	1cbb      	adds	r3, r7, #2
 8001588:	881a      	ldrh	r2, [r3, #0]
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	629a      	str	r2, [r3, #40]	; 0x28
}
 800158e:	46c0      	nop			; (mov r8, r8)
 8001590:	46bd      	mov	sp, r7
 8001592:	b002      	add	sp, #8
 8001594:	bd80      	pop	{r7, pc}

08001596 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..F) to select the GPIO peripheral for STM32F0 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001596:	b580      	push	{r7, lr}
 8001598:	b084      	sub	sp, #16
 800159a:	af00      	add	r7, sp, #0
 800159c:	6078      	str	r0, [r7, #4]
 800159e:	000a      	movs	r2, r1
 80015a0:	1cbb      	adds	r3, r7, #2
 80015a2:	801a      	strh	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	695b      	ldr	r3, [r3, #20]
 80015a8:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80015aa:	1cbb      	adds	r3, r7, #2
 80015ac:	881b      	ldrh	r3, [r3, #0]
 80015ae:	68fa      	ldr	r2, [r7, #12]
 80015b0:	4013      	ands	r3, r2
 80015b2:	041a      	lsls	r2, r3, #16
 80015b4:	68fb      	ldr	r3, [r7, #12]
 80015b6:	43db      	mvns	r3, r3
 80015b8:	1cb9      	adds	r1, r7, #2
 80015ba:	8809      	ldrh	r1, [r1, #0]
 80015bc:	400b      	ands	r3, r1
 80015be:	431a      	orrs	r2, r3
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	619a      	str	r2, [r3, #24]
}
 80015c4:	46c0      	nop			; (mov r8, r8)
 80015c6:	46bd      	mov	sp, r7
 80015c8:	b004      	add	sp, #16
 80015ca:	bd80      	pop	{r7, pc}

080015cc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80015cc:	b580      	push	{r7, lr}
 80015ce:	b088      	sub	sp, #32
 80015d0:	af00      	add	r7, sp, #0
 80015d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	2b00      	cmp	r3, #0
 80015d8:	d101      	bne.n	80015de <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80015da:	2301      	movs	r3, #1
 80015dc:	e303      	b.n	8001be6 <HAL_RCC_OscConfig+0x61a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	2201      	movs	r2, #1
 80015e4:	4013      	ands	r3, r2
 80015e6:	d100      	bne.n	80015ea <HAL_RCC_OscConfig+0x1e>
 80015e8:	e08d      	b.n	8001706 <HAL_RCC_OscConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80015ea:	4bc4      	ldr	r3, [pc, #784]	; (80018fc <HAL_RCC_OscConfig+0x330>)
 80015ec:	685b      	ldr	r3, [r3, #4]
 80015ee:	220c      	movs	r2, #12
 80015f0:	4013      	ands	r3, r2
 80015f2:	2b04      	cmp	r3, #4
 80015f4:	d00e      	beq.n	8001614 <HAL_RCC_OscConfig+0x48>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80015f6:	4bc1      	ldr	r3, [pc, #772]	; (80018fc <HAL_RCC_OscConfig+0x330>)
 80015f8:	685b      	ldr	r3, [r3, #4]
 80015fa:	220c      	movs	r2, #12
 80015fc:	4013      	ands	r3, r2
 80015fe:	2b08      	cmp	r3, #8
 8001600:	d116      	bne.n	8001630 <HAL_RCC_OscConfig+0x64>
 8001602:	4bbe      	ldr	r3, [pc, #760]	; (80018fc <HAL_RCC_OscConfig+0x330>)
 8001604:	685a      	ldr	r2, [r3, #4]
 8001606:	2380      	movs	r3, #128	; 0x80
 8001608:	025b      	lsls	r3, r3, #9
 800160a:	401a      	ands	r2, r3
 800160c:	2380      	movs	r3, #128	; 0x80
 800160e:	025b      	lsls	r3, r3, #9
 8001610:	429a      	cmp	r2, r3
 8001612:	d10d      	bne.n	8001630 <HAL_RCC_OscConfig+0x64>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001614:	4bb9      	ldr	r3, [pc, #740]	; (80018fc <HAL_RCC_OscConfig+0x330>)
 8001616:	681a      	ldr	r2, [r3, #0]
 8001618:	2380      	movs	r3, #128	; 0x80
 800161a:	029b      	lsls	r3, r3, #10
 800161c:	4013      	ands	r3, r2
 800161e:	d100      	bne.n	8001622 <HAL_RCC_OscConfig+0x56>
 8001620:	e070      	b.n	8001704 <HAL_RCC_OscConfig+0x138>
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	685b      	ldr	r3, [r3, #4]
 8001626:	2b00      	cmp	r3, #0
 8001628:	d000      	beq.n	800162c <HAL_RCC_OscConfig+0x60>
 800162a:	e06b      	b.n	8001704 <HAL_RCC_OscConfig+0x138>
      {
        return HAL_ERROR;
 800162c:	2301      	movs	r3, #1
 800162e:	e2da      	b.n	8001be6 <HAL_RCC_OscConfig+0x61a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	685b      	ldr	r3, [r3, #4]
 8001634:	2b01      	cmp	r3, #1
 8001636:	d107      	bne.n	8001648 <HAL_RCC_OscConfig+0x7c>
 8001638:	4bb0      	ldr	r3, [pc, #704]	; (80018fc <HAL_RCC_OscConfig+0x330>)
 800163a:	681a      	ldr	r2, [r3, #0]
 800163c:	4baf      	ldr	r3, [pc, #700]	; (80018fc <HAL_RCC_OscConfig+0x330>)
 800163e:	2180      	movs	r1, #128	; 0x80
 8001640:	0249      	lsls	r1, r1, #9
 8001642:	430a      	orrs	r2, r1
 8001644:	601a      	str	r2, [r3, #0]
 8001646:	e02f      	b.n	80016a8 <HAL_RCC_OscConfig+0xdc>
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	685b      	ldr	r3, [r3, #4]
 800164c:	2b00      	cmp	r3, #0
 800164e:	d10c      	bne.n	800166a <HAL_RCC_OscConfig+0x9e>
 8001650:	4baa      	ldr	r3, [pc, #680]	; (80018fc <HAL_RCC_OscConfig+0x330>)
 8001652:	681a      	ldr	r2, [r3, #0]
 8001654:	4ba9      	ldr	r3, [pc, #676]	; (80018fc <HAL_RCC_OscConfig+0x330>)
 8001656:	49aa      	ldr	r1, [pc, #680]	; (8001900 <HAL_RCC_OscConfig+0x334>)
 8001658:	400a      	ands	r2, r1
 800165a:	601a      	str	r2, [r3, #0]
 800165c:	4ba7      	ldr	r3, [pc, #668]	; (80018fc <HAL_RCC_OscConfig+0x330>)
 800165e:	681a      	ldr	r2, [r3, #0]
 8001660:	4ba6      	ldr	r3, [pc, #664]	; (80018fc <HAL_RCC_OscConfig+0x330>)
 8001662:	49a8      	ldr	r1, [pc, #672]	; (8001904 <HAL_RCC_OscConfig+0x338>)
 8001664:	400a      	ands	r2, r1
 8001666:	601a      	str	r2, [r3, #0]
 8001668:	e01e      	b.n	80016a8 <HAL_RCC_OscConfig+0xdc>
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	685b      	ldr	r3, [r3, #4]
 800166e:	2b05      	cmp	r3, #5
 8001670:	d10e      	bne.n	8001690 <HAL_RCC_OscConfig+0xc4>
 8001672:	4ba2      	ldr	r3, [pc, #648]	; (80018fc <HAL_RCC_OscConfig+0x330>)
 8001674:	681a      	ldr	r2, [r3, #0]
 8001676:	4ba1      	ldr	r3, [pc, #644]	; (80018fc <HAL_RCC_OscConfig+0x330>)
 8001678:	2180      	movs	r1, #128	; 0x80
 800167a:	02c9      	lsls	r1, r1, #11
 800167c:	430a      	orrs	r2, r1
 800167e:	601a      	str	r2, [r3, #0]
 8001680:	4b9e      	ldr	r3, [pc, #632]	; (80018fc <HAL_RCC_OscConfig+0x330>)
 8001682:	681a      	ldr	r2, [r3, #0]
 8001684:	4b9d      	ldr	r3, [pc, #628]	; (80018fc <HAL_RCC_OscConfig+0x330>)
 8001686:	2180      	movs	r1, #128	; 0x80
 8001688:	0249      	lsls	r1, r1, #9
 800168a:	430a      	orrs	r2, r1
 800168c:	601a      	str	r2, [r3, #0]
 800168e:	e00b      	b.n	80016a8 <HAL_RCC_OscConfig+0xdc>
 8001690:	4b9a      	ldr	r3, [pc, #616]	; (80018fc <HAL_RCC_OscConfig+0x330>)
 8001692:	681a      	ldr	r2, [r3, #0]
 8001694:	4b99      	ldr	r3, [pc, #612]	; (80018fc <HAL_RCC_OscConfig+0x330>)
 8001696:	499a      	ldr	r1, [pc, #616]	; (8001900 <HAL_RCC_OscConfig+0x334>)
 8001698:	400a      	ands	r2, r1
 800169a:	601a      	str	r2, [r3, #0]
 800169c:	4b97      	ldr	r3, [pc, #604]	; (80018fc <HAL_RCC_OscConfig+0x330>)
 800169e:	681a      	ldr	r2, [r3, #0]
 80016a0:	4b96      	ldr	r3, [pc, #600]	; (80018fc <HAL_RCC_OscConfig+0x330>)
 80016a2:	4998      	ldr	r1, [pc, #608]	; (8001904 <HAL_RCC_OscConfig+0x338>)
 80016a4:	400a      	ands	r2, r1
 80016a6:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	685b      	ldr	r3, [r3, #4]
 80016ac:	2b00      	cmp	r3, #0
 80016ae:	d014      	beq.n	80016da <HAL_RCC_OscConfig+0x10e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016b0:	f7ff fd04 	bl	80010bc <HAL_GetTick>
 80016b4:	0003      	movs	r3, r0
 80016b6:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80016b8:	e008      	b.n	80016cc <HAL_RCC_OscConfig+0x100>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80016ba:	f7ff fcff 	bl	80010bc <HAL_GetTick>
 80016be:	0002      	movs	r2, r0
 80016c0:	69bb      	ldr	r3, [r7, #24]
 80016c2:	1ad3      	subs	r3, r2, r3
 80016c4:	2b64      	cmp	r3, #100	; 0x64
 80016c6:	d901      	bls.n	80016cc <HAL_RCC_OscConfig+0x100>
          {
            return HAL_TIMEOUT;
 80016c8:	2303      	movs	r3, #3
 80016ca:	e28c      	b.n	8001be6 <HAL_RCC_OscConfig+0x61a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80016cc:	4b8b      	ldr	r3, [pc, #556]	; (80018fc <HAL_RCC_OscConfig+0x330>)
 80016ce:	681a      	ldr	r2, [r3, #0]
 80016d0:	2380      	movs	r3, #128	; 0x80
 80016d2:	029b      	lsls	r3, r3, #10
 80016d4:	4013      	ands	r3, r2
 80016d6:	d0f0      	beq.n	80016ba <HAL_RCC_OscConfig+0xee>
 80016d8:	e015      	b.n	8001706 <HAL_RCC_OscConfig+0x13a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016da:	f7ff fcef 	bl	80010bc <HAL_GetTick>
 80016de:	0003      	movs	r3, r0
 80016e0:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80016e2:	e008      	b.n	80016f6 <HAL_RCC_OscConfig+0x12a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80016e4:	f7ff fcea 	bl	80010bc <HAL_GetTick>
 80016e8:	0002      	movs	r2, r0
 80016ea:	69bb      	ldr	r3, [r7, #24]
 80016ec:	1ad3      	subs	r3, r2, r3
 80016ee:	2b64      	cmp	r3, #100	; 0x64
 80016f0:	d901      	bls.n	80016f6 <HAL_RCC_OscConfig+0x12a>
          {
            return HAL_TIMEOUT;
 80016f2:	2303      	movs	r3, #3
 80016f4:	e277      	b.n	8001be6 <HAL_RCC_OscConfig+0x61a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80016f6:	4b81      	ldr	r3, [pc, #516]	; (80018fc <HAL_RCC_OscConfig+0x330>)
 80016f8:	681a      	ldr	r2, [r3, #0]
 80016fa:	2380      	movs	r3, #128	; 0x80
 80016fc:	029b      	lsls	r3, r3, #10
 80016fe:	4013      	ands	r3, r2
 8001700:	d1f0      	bne.n	80016e4 <HAL_RCC_OscConfig+0x118>
 8001702:	e000      	b.n	8001706 <HAL_RCC_OscConfig+0x13a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001704:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	2202      	movs	r2, #2
 800170c:	4013      	ands	r3, r2
 800170e:	d100      	bne.n	8001712 <HAL_RCC_OscConfig+0x146>
 8001710:	e069      	b.n	80017e6 <HAL_RCC_OscConfig+0x21a>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001712:	4b7a      	ldr	r3, [pc, #488]	; (80018fc <HAL_RCC_OscConfig+0x330>)
 8001714:	685b      	ldr	r3, [r3, #4]
 8001716:	220c      	movs	r2, #12
 8001718:	4013      	ands	r3, r2
 800171a:	d00b      	beq.n	8001734 <HAL_RCC_OscConfig+0x168>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 800171c:	4b77      	ldr	r3, [pc, #476]	; (80018fc <HAL_RCC_OscConfig+0x330>)
 800171e:	685b      	ldr	r3, [r3, #4]
 8001720:	220c      	movs	r2, #12
 8001722:	4013      	ands	r3, r2
 8001724:	2b08      	cmp	r3, #8
 8001726:	d11c      	bne.n	8001762 <HAL_RCC_OscConfig+0x196>
 8001728:	4b74      	ldr	r3, [pc, #464]	; (80018fc <HAL_RCC_OscConfig+0x330>)
 800172a:	685a      	ldr	r2, [r3, #4]
 800172c:	2380      	movs	r3, #128	; 0x80
 800172e:	025b      	lsls	r3, r3, #9
 8001730:	4013      	ands	r3, r2
 8001732:	d116      	bne.n	8001762 <HAL_RCC_OscConfig+0x196>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001734:	4b71      	ldr	r3, [pc, #452]	; (80018fc <HAL_RCC_OscConfig+0x330>)
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	2202      	movs	r2, #2
 800173a:	4013      	ands	r3, r2
 800173c:	d005      	beq.n	800174a <HAL_RCC_OscConfig+0x17e>
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	68db      	ldr	r3, [r3, #12]
 8001742:	2b01      	cmp	r3, #1
 8001744:	d001      	beq.n	800174a <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8001746:	2301      	movs	r3, #1
 8001748:	e24d      	b.n	8001be6 <HAL_RCC_OscConfig+0x61a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800174a:	4b6c      	ldr	r3, [pc, #432]	; (80018fc <HAL_RCC_OscConfig+0x330>)
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	22f8      	movs	r2, #248	; 0xf8
 8001750:	4393      	bics	r3, r2
 8001752:	0019      	movs	r1, r3
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	691b      	ldr	r3, [r3, #16]
 8001758:	00da      	lsls	r2, r3, #3
 800175a:	4b68      	ldr	r3, [pc, #416]	; (80018fc <HAL_RCC_OscConfig+0x330>)
 800175c:	430a      	orrs	r2, r1
 800175e:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001760:	e041      	b.n	80017e6 <HAL_RCC_OscConfig+0x21a>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	68db      	ldr	r3, [r3, #12]
 8001766:	2b00      	cmp	r3, #0
 8001768:	d024      	beq.n	80017b4 <HAL_RCC_OscConfig+0x1e8>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800176a:	4b64      	ldr	r3, [pc, #400]	; (80018fc <HAL_RCC_OscConfig+0x330>)
 800176c:	681a      	ldr	r2, [r3, #0]
 800176e:	4b63      	ldr	r3, [pc, #396]	; (80018fc <HAL_RCC_OscConfig+0x330>)
 8001770:	2101      	movs	r1, #1
 8001772:	430a      	orrs	r2, r1
 8001774:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001776:	f7ff fca1 	bl	80010bc <HAL_GetTick>
 800177a:	0003      	movs	r3, r0
 800177c:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800177e:	e008      	b.n	8001792 <HAL_RCC_OscConfig+0x1c6>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001780:	f7ff fc9c 	bl	80010bc <HAL_GetTick>
 8001784:	0002      	movs	r2, r0
 8001786:	69bb      	ldr	r3, [r7, #24]
 8001788:	1ad3      	subs	r3, r2, r3
 800178a:	2b02      	cmp	r3, #2
 800178c:	d901      	bls.n	8001792 <HAL_RCC_OscConfig+0x1c6>
          {
            return HAL_TIMEOUT;
 800178e:	2303      	movs	r3, #3
 8001790:	e229      	b.n	8001be6 <HAL_RCC_OscConfig+0x61a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001792:	4b5a      	ldr	r3, [pc, #360]	; (80018fc <HAL_RCC_OscConfig+0x330>)
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	2202      	movs	r2, #2
 8001798:	4013      	ands	r3, r2
 800179a:	d0f1      	beq.n	8001780 <HAL_RCC_OscConfig+0x1b4>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800179c:	4b57      	ldr	r3, [pc, #348]	; (80018fc <HAL_RCC_OscConfig+0x330>)
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	22f8      	movs	r2, #248	; 0xf8
 80017a2:	4393      	bics	r3, r2
 80017a4:	0019      	movs	r1, r3
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	691b      	ldr	r3, [r3, #16]
 80017aa:	00da      	lsls	r2, r3, #3
 80017ac:	4b53      	ldr	r3, [pc, #332]	; (80018fc <HAL_RCC_OscConfig+0x330>)
 80017ae:	430a      	orrs	r2, r1
 80017b0:	601a      	str	r2, [r3, #0]
 80017b2:	e018      	b.n	80017e6 <HAL_RCC_OscConfig+0x21a>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80017b4:	4b51      	ldr	r3, [pc, #324]	; (80018fc <HAL_RCC_OscConfig+0x330>)
 80017b6:	681a      	ldr	r2, [r3, #0]
 80017b8:	4b50      	ldr	r3, [pc, #320]	; (80018fc <HAL_RCC_OscConfig+0x330>)
 80017ba:	2101      	movs	r1, #1
 80017bc:	438a      	bics	r2, r1
 80017be:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017c0:	f7ff fc7c 	bl	80010bc <HAL_GetTick>
 80017c4:	0003      	movs	r3, r0
 80017c6:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80017c8:	e008      	b.n	80017dc <HAL_RCC_OscConfig+0x210>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80017ca:	f7ff fc77 	bl	80010bc <HAL_GetTick>
 80017ce:	0002      	movs	r2, r0
 80017d0:	69bb      	ldr	r3, [r7, #24]
 80017d2:	1ad3      	subs	r3, r2, r3
 80017d4:	2b02      	cmp	r3, #2
 80017d6:	d901      	bls.n	80017dc <HAL_RCC_OscConfig+0x210>
          {
            return HAL_TIMEOUT;
 80017d8:	2303      	movs	r3, #3
 80017da:	e204      	b.n	8001be6 <HAL_RCC_OscConfig+0x61a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80017dc:	4b47      	ldr	r3, [pc, #284]	; (80018fc <HAL_RCC_OscConfig+0x330>)
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	2202      	movs	r2, #2
 80017e2:	4013      	ands	r3, r2
 80017e4:	d1f1      	bne.n	80017ca <HAL_RCC_OscConfig+0x1fe>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	2208      	movs	r2, #8
 80017ec:	4013      	ands	r3, r2
 80017ee:	d036      	beq.n	800185e <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	69db      	ldr	r3, [r3, #28]
 80017f4:	2b00      	cmp	r3, #0
 80017f6:	d019      	beq.n	800182c <HAL_RCC_OscConfig+0x260>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80017f8:	4b40      	ldr	r3, [pc, #256]	; (80018fc <HAL_RCC_OscConfig+0x330>)
 80017fa:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80017fc:	4b3f      	ldr	r3, [pc, #252]	; (80018fc <HAL_RCC_OscConfig+0x330>)
 80017fe:	2101      	movs	r1, #1
 8001800:	430a      	orrs	r2, r1
 8001802:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001804:	f7ff fc5a 	bl	80010bc <HAL_GetTick>
 8001808:	0003      	movs	r3, r0
 800180a:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800180c:	e008      	b.n	8001820 <HAL_RCC_OscConfig+0x254>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800180e:	f7ff fc55 	bl	80010bc <HAL_GetTick>
 8001812:	0002      	movs	r2, r0
 8001814:	69bb      	ldr	r3, [r7, #24]
 8001816:	1ad3      	subs	r3, r2, r3
 8001818:	2b02      	cmp	r3, #2
 800181a:	d901      	bls.n	8001820 <HAL_RCC_OscConfig+0x254>
        {
          return HAL_TIMEOUT;
 800181c:	2303      	movs	r3, #3
 800181e:	e1e2      	b.n	8001be6 <HAL_RCC_OscConfig+0x61a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001820:	4b36      	ldr	r3, [pc, #216]	; (80018fc <HAL_RCC_OscConfig+0x330>)
 8001822:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001824:	2202      	movs	r2, #2
 8001826:	4013      	ands	r3, r2
 8001828:	d0f1      	beq.n	800180e <HAL_RCC_OscConfig+0x242>
 800182a:	e018      	b.n	800185e <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800182c:	4b33      	ldr	r3, [pc, #204]	; (80018fc <HAL_RCC_OscConfig+0x330>)
 800182e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001830:	4b32      	ldr	r3, [pc, #200]	; (80018fc <HAL_RCC_OscConfig+0x330>)
 8001832:	2101      	movs	r1, #1
 8001834:	438a      	bics	r2, r1
 8001836:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001838:	f7ff fc40 	bl	80010bc <HAL_GetTick>
 800183c:	0003      	movs	r3, r0
 800183e:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001840:	e008      	b.n	8001854 <HAL_RCC_OscConfig+0x288>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001842:	f7ff fc3b 	bl	80010bc <HAL_GetTick>
 8001846:	0002      	movs	r2, r0
 8001848:	69bb      	ldr	r3, [r7, #24]
 800184a:	1ad3      	subs	r3, r2, r3
 800184c:	2b02      	cmp	r3, #2
 800184e:	d901      	bls.n	8001854 <HAL_RCC_OscConfig+0x288>
        {
          return HAL_TIMEOUT;
 8001850:	2303      	movs	r3, #3
 8001852:	e1c8      	b.n	8001be6 <HAL_RCC_OscConfig+0x61a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001854:	4b29      	ldr	r3, [pc, #164]	; (80018fc <HAL_RCC_OscConfig+0x330>)
 8001856:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001858:	2202      	movs	r2, #2
 800185a:	4013      	ands	r3, r2
 800185c:	d1f1      	bne.n	8001842 <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	2204      	movs	r2, #4
 8001864:	4013      	ands	r3, r2
 8001866:	d100      	bne.n	800186a <HAL_RCC_OscConfig+0x29e>
 8001868:	e0b6      	b.n	80019d8 <HAL_RCC_OscConfig+0x40c>
  {
    FlagStatus       pwrclkchanged = RESET;
 800186a:	231f      	movs	r3, #31
 800186c:	18fb      	adds	r3, r7, r3
 800186e:	2200      	movs	r2, #0
 8001870:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001872:	4b22      	ldr	r3, [pc, #136]	; (80018fc <HAL_RCC_OscConfig+0x330>)
 8001874:	69da      	ldr	r2, [r3, #28]
 8001876:	2380      	movs	r3, #128	; 0x80
 8001878:	055b      	lsls	r3, r3, #21
 800187a:	4013      	ands	r3, r2
 800187c:	d111      	bne.n	80018a2 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800187e:	4b1f      	ldr	r3, [pc, #124]	; (80018fc <HAL_RCC_OscConfig+0x330>)
 8001880:	69da      	ldr	r2, [r3, #28]
 8001882:	4b1e      	ldr	r3, [pc, #120]	; (80018fc <HAL_RCC_OscConfig+0x330>)
 8001884:	2180      	movs	r1, #128	; 0x80
 8001886:	0549      	lsls	r1, r1, #21
 8001888:	430a      	orrs	r2, r1
 800188a:	61da      	str	r2, [r3, #28]
 800188c:	4b1b      	ldr	r3, [pc, #108]	; (80018fc <HAL_RCC_OscConfig+0x330>)
 800188e:	69da      	ldr	r2, [r3, #28]
 8001890:	2380      	movs	r3, #128	; 0x80
 8001892:	055b      	lsls	r3, r3, #21
 8001894:	4013      	ands	r3, r2
 8001896:	60fb      	str	r3, [r7, #12]
 8001898:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800189a:	231f      	movs	r3, #31
 800189c:	18fb      	adds	r3, r7, r3
 800189e:	2201      	movs	r2, #1
 80018a0:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80018a2:	4b19      	ldr	r3, [pc, #100]	; (8001908 <HAL_RCC_OscConfig+0x33c>)
 80018a4:	681a      	ldr	r2, [r3, #0]
 80018a6:	2380      	movs	r3, #128	; 0x80
 80018a8:	005b      	lsls	r3, r3, #1
 80018aa:	4013      	ands	r3, r2
 80018ac:	d11a      	bne.n	80018e4 <HAL_RCC_OscConfig+0x318>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80018ae:	4b16      	ldr	r3, [pc, #88]	; (8001908 <HAL_RCC_OscConfig+0x33c>)
 80018b0:	681a      	ldr	r2, [r3, #0]
 80018b2:	4b15      	ldr	r3, [pc, #84]	; (8001908 <HAL_RCC_OscConfig+0x33c>)
 80018b4:	2180      	movs	r1, #128	; 0x80
 80018b6:	0049      	lsls	r1, r1, #1
 80018b8:	430a      	orrs	r2, r1
 80018ba:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80018bc:	f7ff fbfe 	bl	80010bc <HAL_GetTick>
 80018c0:	0003      	movs	r3, r0
 80018c2:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80018c4:	e008      	b.n	80018d8 <HAL_RCC_OscConfig+0x30c>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80018c6:	f7ff fbf9 	bl	80010bc <HAL_GetTick>
 80018ca:	0002      	movs	r2, r0
 80018cc:	69bb      	ldr	r3, [r7, #24]
 80018ce:	1ad3      	subs	r3, r2, r3
 80018d0:	2b64      	cmp	r3, #100	; 0x64
 80018d2:	d901      	bls.n	80018d8 <HAL_RCC_OscConfig+0x30c>
        {
          return HAL_TIMEOUT;
 80018d4:	2303      	movs	r3, #3
 80018d6:	e186      	b.n	8001be6 <HAL_RCC_OscConfig+0x61a>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80018d8:	4b0b      	ldr	r3, [pc, #44]	; (8001908 <HAL_RCC_OscConfig+0x33c>)
 80018da:	681a      	ldr	r2, [r3, #0]
 80018dc:	2380      	movs	r3, #128	; 0x80
 80018de:	005b      	lsls	r3, r3, #1
 80018e0:	4013      	ands	r3, r2
 80018e2:	d0f0      	beq.n	80018c6 <HAL_RCC_OscConfig+0x2fa>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	689b      	ldr	r3, [r3, #8]
 80018e8:	2b01      	cmp	r3, #1
 80018ea:	d10f      	bne.n	800190c <HAL_RCC_OscConfig+0x340>
 80018ec:	4b03      	ldr	r3, [pc, #12]	; (80018fc <HAL_RCC_OscConfig+0x330>)
 80018ee:	6a1a      	ldr	r2, [r3, #32]
 80018f0:	4b02      	ldr	r3, [pc, #8]	; (80018fc <HAL_RCC_OscConfig+0x330>)
 80018f2:	2101      	movs	r1, #1
 80018f4:	430a      	orrs	r2, r1
 80018f6:	621a      	str	r2, [r3, #32]
 80018f8:	e036      	b.n	8001968 <HAL_RCC_OscConfig+0x39c>
 80018fa:	46c0      	nop			; (mov r8, r8)
 80018fc:	40021000 	.word	0x40021000
 8001900:	fffeffff 	.word	0xfffeffff
 8001904:	fffbffff 	.word	0xfffbffff
 8001908:	40007000 	.word	0x40007000
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	689b      	ldr	r3, [r3, #8]
 8001910:	2b00      	cmp	r3, #0
 8001912:	d10c      	bne.n	800192e <HAL_RCC_OscConfig+0x362>
 8001914:	4bb6      	ldr	r3, [pc, #728]	; (8001bf0 <HAL_RCC_OscConfig+0x624>)
 8001916:	6a1a      	ldr	r2, [r3, #32]
 8001918:	4bb5      	ldr	r3, [pc, #724]	; (8001bf0 <HAL_RCC_OscConfig+0x624>)
 800191a:	2101      	movs	r1, #1
 800191c:	438a      	bics	r2, r1
 800191e:	621a      	str	r2, [r3, #32]
 8001920:	4bb3      	ldr	r3, [pc, #716]	; (8001bf0 <HAL_RCC_OscConfig+0x624>)
 8001922:	6a1a      	ldr	r2, [r3, #32]
 8001924:	4bb2      	ldr	r3, [pc, #712]	; (8001bf0 <HAL_RCC_OscConfig+0x624>)
 8001926:	2104      	movs	r1, #4
 8001928:	438a      	bics	r2, r1
 800192a:	621a      	str	r2, [r3, #32]
 800192c:	e01c      	b.n	8001968 <HAL_RCC_OscConfig+0x39c>
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	689b      	ldr	r3, [r3, #8]
 8001932:	2b05      	cmp	r3, #5
 8001934:	d10c      	bne.n	8001950 <HAL_RCC_OscConfig+0x384>
 8001936:	4bae      	ldr	r3, [pc, #696]	; (8001bf0 <HAL_RCC_OscConfig+0x624>)
 8001938:	6a1a      	ldr	r2, [r3, #32]
 800193a:	4bad      	ldr	r3, [pc, #692]	; (8001bf0 <HAL_RCC_OscConfig+0x624>)
 800193c:	2104      	movs	r1, #4
 800193e:	430a      	orrs	r2, r1
 8001940:	621a      	str	r2, [r3, #32]
 8001942:	4bab      	ldr	r3, [pc, #684]	; (8001bf0 <HAL_RCC_OscConfig+0x624>)
 8001944:	6a1a      	ldr	r2, [r3, #32]
 8001946:	4baa      	ldr	r3, [pc, #680]	; (8001bf0 <HAL_RCC_OscConfig+0x624>)
 8001948:	2101      	movs	r1, #1
 800194a:	430a      	orrs	r2, r1
 800194c:	621a      	str	r2, [r3, #32]
 800194e:	e00b      	b.n	8001968 <HAL_RCC_OscConfig+0x39c>
 8001950:	4ba7      	ldr	r3, [pc, #668]	; (8001bf0 <HAL_RCC_OscConfig+0x624>)
 8001952:	6a1a      	ldr	r2, [r3, #32]
 8001954:	4ba6      	ldr	r3, [pc, #664]	; (8001bf0 <HAL_RCC_OscConfig+0x624>)
 8001956:	2101      	movs	r1, #1
 8001958:	438a      	bics	r2, r1
 800195a:	621a      	str	r2, [r3, #32]
 800195c:	4ba4      	ldr	r3, [pc, #656]	; (8001bf0 <HAL_RCC_OscConfig+0x624>)
 800195e:	6a1a      	ldr	r2, [r3, #32]
 8001960:	4ba3      	ldr	r3, [pc, #652]	; (8001bf0 <HAL_RCC_OscConfig+0x624>)
 8001962:	2104      	movs	r1, #4
 8001964:	438a      	bics	r2, r1
 8001966:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	689b      	ldr	r3, [r3, #8]
 800196c:	2b00      	cmp	r3, #0
 800196e:	d014      	beq.n	800199a <HAL_RCC_OscConfig+0x3ce>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001970:	f7ff fba4 	bl	80010bc <HAL_GetTick>
 8001974:	0003      	movs	r3, r0
 8001976:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001978:	e009      	b.n	800198e <HAL_RCC_OscConfig+0x3c2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800197a:	f7ff fb9f 	bl	80010bc <HAL_GetTick>
 800197e:	0002      	movs	r2, r0
 8001980:	69bb      	ldr	r3, [r7, #24]
 8001982:	1ad3      	subs	r3, r2, r3
 8001984:	4a9b      	ldr	r2, [pc, #620]	; (8001bf4 <HAL_RCC_OscConfig+0x628>)
 8001986:	4293      	cmp	r3, r2
 8001988:	d901      	bls.n	800198e <HAL_RCC_OscConfig+0x3c2>
        {
          return HAL_TIMEOUT;
 800198a:	2303      	movs	r3, #3
 800198c:	e12b      	b.n	8001be6 <HAL_RCC_OscConfig+0x61a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800198e:	4b98      	ldr	r3, [pc, #608]	; (8001bf0 <HAL_RCC_OscConfig+0x624>)
 8001990:	6a1b      	ldr	r3, [r3, #32]
 8001992:	2202      	movs	r2, #2
 8001994:	4013      	ands	r3, r2
 8001996:	d0f0      	beq.n	800197a <HAL_RCC_OscConfig+0x3ae>
 8001998:	e013      	b.n	80019c2 <HAL_RCC_OscConfig+0x3f6>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800199a:	f7ff fb8f 	bl	80010bc <HAL_GetTick>
 800199e:	0003      	movs	r3, r0
 80019a0:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80019a2:	e009      	b.n	80019b8 <HAL_RCC_OscConfig+0x3ec>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80019a4:	f7ff fb8a 	bl	80010bc <HAL_GetTick>
 80019a8:	0002      	movs	r2, r0
 80019aa:	69bb      	ldr	r3, [r7, #24]
 80019ac:	1ad3      	subs	r3, r2, r3
 80019ae:	4a91      	ldr	r2, [pc, #580]	; (8001bf4 <HAL_RCC_OscConfig+0x628>)
 80019b0:	4293      	cmp	r3, r2
 80019b2:	d901      	bls.n	80019b8 <HAL_RCC_OscConfig+0x3ec>
        {
          return HAL_TIMEOUT;
 80019b4:	2303      	movs	r3, #3
 80019b6:	e116      	b.n	8001be6 <HAL_RCC_OscConfig+0x61a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80019b8:	4b8d      	ldr	r3, [pc, #564]	; (8001bf0 <HAL_RCC_OscConfig+0x624>)
 80019ba:	6a1b      	ldr	r3, [r3, #32]
 80019bc:	2202      	movs	r2, #2
 80019be:	4013      	ands	r3, r2
 80019c0:	d1f0      	bne.n	80019a4 <HAL_RCC_OscConfig+0x3d8>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80019c2:	231f      	movs	r3, #31
 80019c4:	18fb      	adds	r3, r7, r3
 80019c6:	781b      	ldrb	r3, [r3, #0]
 80019c8:	2b01      	cmp	r3, #1
 80019ca:	d105      	bne.n	80019d8 <HAL_RCC_OscConfig+0x40c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80019cc:	4b88      	ldr	r3, [pc, #544]	; (8001bf0 <HAL_RCC_OscConfig+0x624>)
 80019ce:	69da      	ldr	r2, [r3, #28]
 80019d0:	4b87      	ldr	r3, [pc, #540]	; (8001bf0 <HAL_RCC_OscConfig+0x624>)
 80019d2:	4989      	ldr	r1, [pc, #548]	; (8001bf8 <HAL_RCC_OscConfig+0x62c>)
 80019d4:	400a      	ands	r2, r1
 80019d6:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	2210      	movs	r2, #16
 80019de:	4013      	ands	r3, r2
 80019e0:	d063      	beq.n	8001aaa <HAL_RCC_OscConfig+0x4de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	695b      	ldr	r3, [r3, #20]
 80019e6:	2b01      	cmp	r3, #1
 80019e8:	d12a      	bne.n	8001a40 <HAL_RCC_OscConfig+0x474>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 80019ea:	4b81      	ldr	r3, [pc, #516]	; (8001bf0 <HAL_RCC_OscConfig+0x624>)
 80019ec:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80019ee:	4b80      	ldr	r3, [pc, #512]	; (8001bf0 <HAL_RCC_OscConfig+0x624>)
 80019f0:	2104      	movs	r1, #4
 80019f2:	430a      	orrs	r2, r1
 80019f4:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 80019f6:	4b7e      	ldr	r3, [pc, #504]	; (8001bf0 <HAL_RCC_OscConfig+0x624>)
 80019f8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80019fa:	4b7d      	ldr	r3, [pc, #500]	; (8001bf0 <HAL_RCC_OscConfig+0x624>)
 80019fc:	2101      	movs	r1, #1
 80019fe:	430a      	orrs	r2, r1
 8001a00:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001a02:	f7ff fb5b 	bl	80010bc <HAL_GetTick>
 8001a06:	0003      	movs	r3, r0
 8001a08:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8001a0a:	e008      	b.n	8001a1e <HAL_RCC_OscConfig+0x452>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8001a0c:	f7ff fb56 	bl	80010bc <HAL_GetTick>
 8001a10:	0002      	movs	r2, r0
 8001a12:	69bb      	ldr	r3, [r7, #24]
 8001a14:	1ad3      	subs	r3, r2, r3
 8001a16:	2b02      	cmp	r3, #2
 8001a18:	d901      	bls.n	8001a1e <HAL_RCC_OscConfig+0x452>
        {
          return HAL_TIMEOUT;
 8001a1a:	2303      	movs	r3, #3
 8001a1c:	e0e3      	b.n	8001be6 <HAL_RCC_OscConfig+0x61a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8001a1e:	4b74      	ldr	r3, [pc, #464]	; (8001bf0 <HAL_RCC_OscConfig+0x624>)
 8001a20:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001a22:	2202      	movs	r2, #2
 8001a24:	4013      	ands	r3, r2
 8001a26:	d0f1      	beq.n	8001a0c <HAL_RCC_OscConfig+0x440>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8001a28:	4b71      	ldr	r3, [pc, #452]	; (8001bf0 <HAL_RCC_OscConfig+0x624>)
 8001a2a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001a2c:	22f8      	movs	r2, #248	; 0xf8
 8001a2e:	4393      	bics	r3, r2
 8001a30:	0019      	movs	r1, r3
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	699b      	ldr	r3, [r3, #24]
 8001a36:	00da      	lsls	r2, r3, #3
 8001a38:	4b6d      	ldr	r3, [pc, #436]	; (8001bf0 <HAL_RCC_OscConfig+0x624>)
 8001a3a:	430a      	orrs	r2, r1
 8001a3c:	635a      	str	r2, [r3, #52]	; 0x34
 8001a3e:	e034      	b.n	8001aaa <HAL_RCC_OscConfig+0x4de>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	695b      	ldr	r3, [r3, #20]
 8001a44:	3305      	adds	r3, #5
 8001a46:	d111      	bne.n	8001a6c <HAL_RCC_OscConfig+0x4a0>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8001a48:	4b69      	ldr	r3, [pc, #420]	; (8001bf0 <HAL_RCC_OscConfig+0x624>)
 8001a4a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001a4c:	4b68      	ldr	r3, [pc, #416]	; (8001bf0 <HAL_RCC_OscConfig+0x624>)
 8001a4e:	2104      	movs	r1, #4
 8001a50:	438a      	bics	r2, r1
 8001a52:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8001a54:	4b66      	ldr	r3, [pc, #408]	; (8001bf0 <HAL_RCC_OscConfig+0x624>)
 8001a56:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001a58:	22f8      	movs	r2, #248	; 0xf8
 8001a5a:	4393      	bics	r3, r2
 8001a5c:	0019      	movs	r1, r3
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	699b      	ldr	r3, [r3, #24]
 8001a62:	00da      	lsls	r2, r3, #3
 8001a64:	4b62      	ldr	r3, [pc, #392]	; (8001bf0 <HAL_RCC_OscConfig+0x624>)
 8001a66:	430a      	orrs	r2, r1
 8001a68:	635a      	str	r2, [r3, #52]	; 0x34
 8001a6a:	e01e      	b.n	8001aaa <HAL_RCC_OscConfig+0x4de>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8001a6c:	4b60      	ldr	r3, [pc, #384]	; (8001bf0 <HAL_RCC_OscConfig+0x624>)
 8001a6e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001a70:	4b5f      	ldr	r3, [pc, #380]	; (8001bf0 <HAL_RCC_OscConfig+0x624>)
 8001a72:	2104      	movs	r1, #4
 8001a74:	430a      	orrs	r2, r1
 8001a76:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8001a78:	4b5d      	ldr	r3, [pc, #372]	; (8001bf0 <HAL_RCC_OscConfig+0x624>)
 8001a7a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001a7c:	4b5c      	ldr	r3, [pc, #368]	; (8001bf0 <HAL_RCC_OscConfig+0x624>)
 8001a7e:	2101      	movs	r1, #1
 8001a80:	438a      	bics	r2, r1
 8001a82:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001a84:	f7ff fb1a 	bl	80010bc <HAL_GetTick>
 8001a88:	0003      	movs	r3, r0
 8001a8a:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8001a8c:	e008      	b.n	8001aa0 <HAL_RCC_OscConfig+0x4d4>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8001a8e:	f7ff fb15 	bl	80010bc <HAL_GetTick>
 8001a92:	0002      	movs	r2, r0
 8001a94:	69bb      	ldr	r3, [r7, #24]
 8001a96:	1ad3      	subs	r3, r2, r3
 8001a98:	2b02      	cmp	r3, #2
 8001a9a:	d901      	bls.n	8001aa0 <HAL_RCC_OscConfig+0x4d4>
        {
          return HAL_TIMEOUT;
 8001a9c:	2303      	movs	r3, #3
 8001a9e:	e0a2      	b.n	8001be6 <HAL_RCC_OscConfig+0x61a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8001aa0:	4b53      	ldr	r3, [pc, #332]	; (8001bf0 <HAL_RCC_OscConfig+0x624>)
 8001aa2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001aa4:	2202      	movs	r2, #2
 8001aa6:	4013      	ands	r3, r2
 8001aa8:	d1f1      	bne.n	8001a8e <HAL_RCC_OscConfig+0x4c2>
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	6a1b      	ldr	r3, [r3, #32]
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	d100      	bne.n	8001ab4 <HAL_RCC_OscConfig+0x4e8>
 8001ab2:	e097      	b.n	8001be4 <HAL_RCC_OscConfig+0x618>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001ab4:	4b4e      	ldr	r3, [pc, #312]	; (8001bf0 <HAL_RCC_OscConfig+0x624>)
 8001ab6:	685b      	ldr	r3, [r3, #4]
 8001ab8:	220c      	movs	r2, #12
 8001aba:	4013      	ands	r3, r2
 8001abc:	2b08      	cmp	r3, #8
 8001abe:	d100      	bne.n	8001ac2 <HAL_RCC_OscConfig+0x4f6>
 8001ac0:	e06b      	b.n	8001b9a <HAL_RCC_OscConfig+0x5ce>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	6a1b      	ldr	r3, [r3, #32]
 8001ac6:	2b02      	cmp	r3, #2
 8001ac8:	d14c      	bne.n	8001b64 <HAL_RCC_OscConfig+0x598>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001aca:	4b49      	ldr	r3, [pc, #292]	; (8001bf0 <HAL_RCC_OscConfig+0x624>)
 8001acc:	681a      	ldr	r2, [r3, #0]
 8001ace:	4b48      	ldr	r3, [pc, #288]	; (8001bf0 <HAL_RCC_OscConfig+0x624>)
 8001ad0:	494a      	ldr	r1, [pc, #296]	; (8001bfc <HAL_RCC_OscConfig+0x630>)
 8001ad2:	400a      	ands	r2, r1
 8001ad4:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ad6:	f7ff faf1 	bl	80010bc <HAL_GetTick>
 8001ada:	0003      	movs	r3, r0
 8001adc:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001ade:	e008      	b.n	8001af2 <HAL_RCC_OscConfig+0x526>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001ae0:	f7ff faec 	bl	80010bc <HAL_GetTick>
 8001ae4:	0002      	movs	r2, r0
 8001ae6:	69bb      	ldr	r3, [r7, #24]
 8001ae8:	1ad3      	subs	r3, r2, r3
 8001aea:	2b02      	cmp	r3, #2
 8001aec:	d901      	bls.n	8001af2 <HAL_RCC_OscConfig+0x526>
          {
            return HAL_TIMEOUT;
 8001aee:	2303      	movs	r3, #3
 8001af0:	e079      	b.n	8001be6 <HAL_RCC_OscConfig+0x61a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001af2:	4b3f      	ldr	r3, [pc, #252]	; (8001bf0 <HAL_RCC_OscConfig+0x624>)
 8001af4:	681a      	ldr	r2, [r3, #0]
 8001af6:	2380      	movs	r3, #128	; 0x80
 8001af8:	049b      	lsls	r3, r3, #18
 8001afa:	4013      	ands	r3, r2
 8001afc:	d1f0      	bne.n	8001ae0 <HAL_RCC_OscConfig+0x514>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001afe:	4b3c      	ldr	r3, [pc, #240]	; (8001bf0 <HAL_RCC_OscConfig+0x624>)
 8001b00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b02:	220f      	movs	r2, #15
 8001b04:	4393      	bics	r3, r2
 8001b06:	0019      	movs	r1, r3
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001b0c:	4b38      	ldr	r3, [pc, #224]	; (8001bf0 <HAL_RCC_OscConfig+0x624>)
 8001b0e:	430a      	orrs	r2, r1
 8001b10:	62da      	str	r2, [r3, #44]	; 0x2c
 8001b12:	4b37      	ldr	r3, [pc, #220]	; (8001bf0 <HAL_RCC_OscConfig+0x624>)
 8001b14:	685b      	ldr	r3, [r3, #4]
 8001b16:	4a3a      	ldr	r2, [pc, #232]	; (8001c00 <HAL_RCC_OscConfig+0x634>)
 8001b18:	4013      	ands	r3, r2
 8001b1a:	0019      	movs	r1, r3
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b24:	431a      	orrs	r2, r3
 8001b26:	4b32      	ldr	r3, [pc, #200]	; (8001bf0 <HAL_RCC_OscConfig+0x624>)
 8001b28:	430a      	orrs	r2, r1
 8001b2a:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001b2c:	4b30      	ldr	r3, [pc, #192]	; (8001bf0 <HAL_RCC_OscConfig+0x624>)
 8001b2e:	681a      	ldr	r2, [r3, #0]
 8001b30:	4b2f      	ldr	r3, [pc, #188]	; (8001bf0 <HAL_RCC_OscConfig+0x624>)
 8001b32:	2180      	movs	r1, #128	; 0x80
 8001b34:	0449      	lsls	r1, r1, #17
 8001b36:	430a      	orrs	r2, r1
 8001b38:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b3a:	f7ff fabf 	bl	80010bc <HAL_GetTick>
 8001b3e:	0003      	movs	r3, r0
 8001b40:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001b42:	e008      	b.n	8001b56 <HAL_RCC_OscConfig+0x58a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001b44:	f7ff faba 	bl	80010bc <HAL_GetTick>
 8001b48:	0002      	movs	r2, r0
 8001b4a:	69bb      	ldr	r3, [r7, #24]
 8001b4c:	1ad3      	subs	r3, r2, r3
 8001b4e:	2b02      	cmp	r3, #2
 8001b50:	d901      	bls.n	8001b56 <HAL_RCC_OscConfig+0x58a>
          {
            return HAL_TIMEOUT;
 8001b52:	2303      	movs	r3, #3
 8001b54:	e047      	b.n	8001be6 <HAL_RCC_OscConfig+0x61a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001b56:	4b26      	ldr	r3, [pc, #152]	; (8001bf0 <HAL_RCC_OscConfig+0x624>)
 8001b58:	681a      	ldr	r2, [r3, #0]
 8001b5a:	2380      	movs	r3, #128	; 0x80
 8001b5c:	049b      	lsls	r3, r3, #18
 8001b5e:	4013      	ands	r3, r2
 8001b60:	d0f0      	beq.n	8001b44 <HAL_RCC_OscConfig+0x578>
 8001b62:	e03f      	b.n	8001be4 <HAL_RCC_OscConfig+0x618>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001b64:	4b22      	ldr	r3, [pc, #136]	; (8001bf0 <HAL_RCC_OscConfig+0x624>)
 8001b66:	681a      	ldr	r2, [r3, #0]
 8001b68:	4b21      	ldr	r3, [pc, #132]	; (8001bf0 <HAL_RCC_OscConfig+0x624>)
 8001b6a:	4924      	ldr	r1, [pc, #144]	; (8001bfc <HAL_RCC_OscConfig+0x630>)
 8001b6c:	400a      	ands	r2, r1
 8001b6e:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b70:	f7ff faa4 	bl	80010bc <HAL_GetTick>
 8001b74:	0003      	movs	r3, r0
 8001b76:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001b78:	e008      	b.n	8001b8c <HAL_RCC_OscConfig+0x5c0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001b7a:	f7ff fa9f 	bl	80010bc <HAL_GetTick>
 8001b7e:	0002      	movs	r2, r0
 8001b80:	69bb      	ldr	r3, [r7, #24]
 8001b82:	1ad3      	subs	r3, r2, r3
 8001b84:	2b02      	cmp	r3, #2
 8001b86:	d901      	bls.n	8001b8c <HAL_RCC_OscConfig+0x5c0>
          {
            return HAL_TIMEOUT;
 8001b88:	2303      	movs	r3, #3
 8001b8a:	e02c      	b.n	8001be6 <HAL_RCC_OscConfig+0x61a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001b8c:	4b18      	ldr	r3, [pc, #96]	; (8001bf0 <HAL_RCC_OscConfig+0x624>)
 8001b8e:	681a      	ldr	r2, [r3, #0]
 8001b90:	2380      	movs	r3, #128	; 0x80
 8001b92:	049b      	lsls	r3, r3, #18
 8001b94:	4013      	ands	r3, r2
 8001b96:	d1f0      	bne.n	8001b7a <HAL_RCC_OscConfig+0x5ae>
 8001b98:	e024      	b.n	8001be4 <HAL_RCC_OscConfig+0x618>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	6a1b      	ldr	r3, [r3, #32]
 8001b9e:	2b01      	cmp	r3, #1
 8001ba0:	d101      	bne.n	8001ba6 <HAL_RCC_OscConfig+0x5da>
      {
        return HAL_ERROR;
 8001ba2:	2301      	movs	r3, #1
 8001ba4:	e01f      	b.n	8001be6 <HAL_RCC_OscConfig+0x61a>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 8001ba6:	4b12      	ldr	r3, [pc, #72]	; (8001bf0 <HAL_RCC_OscConfig+0x624>)
 8001ba8:	685b      	ldr	r3, [r3, #4]
 8001baa:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 8001bac:	4b10      	ldr	r3, [pc, #64]	; (8001bf0 <HAL_RCC_OscConfig+0x624>)
 8001bae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001bb0:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001bb2:	697a      	ldr	r2, [r7, #20]
 8001bb4:	2380      	movs	r3, #128	; 0x80
 8001bb6:	025b      	lsls	r3, r3, #9
 8001bb8:	401a      	ands	r2, r3
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bbe:	429a      	cmp	r2, r3
 8001bc0:	d10e      	bne.n	8001be0 <HAL_RCC_OscConfig+0x614>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8001bc2:	693b      	ldr	r3, [r7, #16]
 8001bc4:	220f      	movs	r2, #15
 8001bc6:	401a      	ands	r2, r3
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001bcc:	429a      	cmp	r2, r3
 8001bce:	d107      	bne.n	8001be0 <HAL_RCC_OscConfig+0x614>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 8001bd0:	697a      	ldr	r2, [r7, #20]
 8001bd2:	23f0      	movs	r3, #240	; 0xf0
 8001bd4:	039b      	lsls	r3, r3, #14
 8001bd6:	401a      	ands	r2, r3
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8001bdc:	429a      	cmp	r2, r3
 8001bde:	d001      	beq.n	8001be4 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_ERROR;
 8001be0:	2301      	movs	r3, #1
 8001be2:	e000      	b.n	8001be6 <HAL_RCC_OscConfig+0x61a>
        }
      }
    }
  }

  return HAL_OK;
 8001be4:	2300      	movs	r3, #0
}
 8001be6:	0018      	movs	r0, r3
 8001be8:	46bd      	mov	sp, r7
 8001bea:	b008      	add	sp, #32
 8001bec:	bd80      	pop	{r7, pc}
 8001bee:	46c0      	nop			; (mov r8, r8)
 8001bf0:	40021000 	.word	0x40021000
 8001bf4:	00001388 	.word	0x00001388
 8001bf8:	efffffff 	.word	0xefffffff
 8001bfc:	feffffff 	.word	0xfeffffff
 8001c00:	ffc2ffff 	.word	0xffc2ffff

08001c04 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001c04:	b580      	push	{r7, lr}
 8001c06:	b084      	sub	sp, #16
 8001c08:	af00      	add	r7, sp, #0
 8001c0a:	6078      	str	r0, [r7, #4]
 8001c0c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	2b00      	cmp	r3, #0
 8001c12:	d101      	bne.n	8001c18 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001c14:	2301      	movs	r3, #1
 8001c16:	e0b3      	b.n	8001d80 <HAL_RCC_ClockConfig+0x17c>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001c18:	4b5b      	ldr	r3, [pc, #364]	; (8001d88 <HAL_RCC_ClockConfig+0x184>)
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	2201      	movs	r2, #1
 8001c1e:	4013      	ands	r3, r2
 8001c20:	683a      	ldr	r2, [r7, #0]
 8001c22:	429a      	cmp	r2, r3
 8001c24:	d911      	bls.n	8001c4a <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001c26:	4b58      	ldr	r3, [pc, #352]	; (8001d88 <HAL_RCC_ClockConfig+0x184>)
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	2201      	movs	r2, #1
 8001c2c:	4393      	bics	r3, r2
 8001c2e:	0019      	movs	r1, r3
 8001c30:	4b55      	ldr	r3, [pc, #340]	; (8001d88 <HAL_RCC_ClockConfig+0x184>)
 8001c32:	683a      	ldr	r2, [r7, #0]
 8001c34:	430a      	orrs	r2, r1
 8001c36:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001c38:	4b53      	ldr	r3, [pc, #332]	; (8001d88 <HAL_RCC_ClockConfig+0x184>)
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	2201      	movs	r2, #1
 8001c3e:	4013      	ands	r3, r2
 8001c40:	683a      	ldr	r2, [r7, #0]
 8001c42:	429a      	cmp	r2, r3
 8001c44:	d001      	beq.n	8001c4a <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 8001c46:	2301      	movs	r3, #1
 8001c48:	e09a      	b.n	8001d80 <HAL_RCC_ClockConfig+0x17c>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	2202      	movs	r2, #2
 8001c50:	4013      	ands	r3, r2
 8001c52:	d015      	beq.n	8001c80 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	2204      	movs	r2, #4
 8001c5a:	4013      	ands	r3, r2
 8001c5c:	d006      	beq.n	8001c6c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8001c5e:	4b4b      	ldr	r3, [pc, #300]	; (8001d8c <HAL_RCC_ClockConfig+0x188>)
 8001c60:	685a      	ldr	r2, [r3, #4]
 8001c62:	4b4a      	ldr	r3, [pc, #296]	; (8001d8c <HAL_RCC_ClockConfig+0x188>)
 8001c64:	21e0      	movs	r1, #224	; 0xe0
 8001c66:	00c9      	lsls	r1, r1, #3
 8001c68:	430a      	orrs	r2, r1
 8001c6a:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001c6c:	4b47      	ldr	r3, [pc, #284]	; (8001d8c <HAL_RCC_ClockConfig+0x188>)
 8001c6e:	685b      	ldr	r3, [r3, #4]
 8001c70:	22f0      	movs	r2, #240	; 0xf0
 8001c72:	4393      	bics	r3, r2
 8001c74:	0019      	movs	r1, r3
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	689a      	ldr	r2, [r3, #8]
 8001c7a:	4b44      	ldr	r3, [pc, #272]	; (8001d8c <HAL_RCC_ClockConfig+0x188>)
 8001c7c:	430a      	orrs	r2, r1
 8001c7e:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	2201      	movs	r2, #1
 8001c86:	4013      	ands	r3, r2
 8001c88:	d040      	beq.n	8001d0c <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	685b      	ldr	r3, [r3, #4]
 8001c8e:	2b01      	cmp	r3, #1
 8001c90:	d107      	bne.n	8001ca2 <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c92:	4b3e      	ldr	r3, [pc, #248]	; (8001d8c <HAL_RCC_ClockConfig+0x188>)
 8001c94:	681a      	ldr	r2, [r3, #0]
 8001c96:	2380      	movs	r3, #128	; 0x80
 8001c98:	029b      	lsls	r3, r3, #10
 8001c9a:	4013      	ands	r3, r2
 8001c9c:	d114      	bne.n	8001cc8 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8001c9e:	2301      	movs	r3, #1
 8001ca0:	e06e      	b.n	8001d80 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	685b      	ldr	r3, [r3, #4]
 8001ca6:	2b02      	cmp	r3, #2
 8001ca8:	d107      	bne.n	8001cba <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001caa:	4b38      	ldr	r3, [pc, #224]	; (8001d8c <HAL_RCC_ClockConfig+0x188>)
 8001cac:	681a      	ldr	r2, [r3, #0]
 8001cae:	2380      	movs	r3, #128	; 0x80
 8001cb0:	049b      	lsls	r3, r3, #18
 8001cb2:	4013      	ands	r3, r2
 8001cb4:	d108      	bne.n	8001cc8 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8001cb6:	2301      	movs	r3, #1
 8001cb8:	e062      	b.n	8001d80 <HAL_RCC_ClockConfig+0x17c>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001cba:	4b34      	ldr	r3, [pc, #208]	; (8001d8c <HAL_RCC_ClockConfig+0x188>)
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	2202      	movs	r2, #2
 8001cc0:	4013      	ands	r3, r2
 8001cc2:	d101      	bne.n	8001cc8 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8001cc4:	2301      	movs	r3, #1
 8001cc6:	e05b      	b.n	8001d80 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001cc8:	4b30      	ldr	r3, [pc, #192]	; (8001d8c <HAL_RCC_ClockConfig+0x188>)
 8001cca:	685b      	ldr	r3, [r3, #4]
 8001ccc:	2203      	movs	r2, #3
 8001cce:	4393      	bics	r3, r2
 8001cd0:	0019      	movs	r1, r3
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	685a      	ldr	r2, [r3, #4]
 8001cd6:	4b2d      	ldr	r3, [pc, #180]	; (8001d8c <HAL_RCC_ClockConfig+0x188>)
 8001cd8:	430a      	orrs	r2, r1
 8001cda:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001cdc:	f7ff f9ee 	bl	80010bc <HAL_GetTick>
 8001ce0:	0003      	movs	r3, r0
 8001ce2:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001ce4:	e009      	b.n	8001cfa <HAL_RCC_ClockConfig+0xf6>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001ce6:	f7ff f9e9 	bl	80010bc <HAL_GetTick>
 8001cea:	0002      	movs	r2, r0
 8001cec:	68fb      	ldr	r3, [r7, #12]
 8001cee:	1ad3      	subs	r3, r2, r3
 8001cf0:	4a27      	ldr	r2, [pc, #156]	; (8001d90 <HAL_RCC_ClockConfig+0x18c>)
 8001cf2:	4293      	cmp	r3, r2
 8001cf4:	d901      	bls.n	8001cfa <HAL_RCC_ClockConfig+0xf6>
      {
        return HAL_TIMEOUT;
 8001cf6:	2303      	movs	r3, #3
 8001cf8:	e042      	b.n	8001d80 <HAL_RCC_ClockConfig+0x17c>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001cfa:	4b24      	ldr	r3, [pc, #144]	; (8001d8c <HAL_RCC_ClockConfig+0x188>)
 8001cfc:	685b      	ldr	r3, [r3, #4]
 8001cfe:	220c      	movs	r2, #12
 8001d00:	401a      	ands	r2, r3
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	685b      	ldr	r3, [r3, #4]
 8001d06:	009b      	lsls	r3, r3, #2
 8001d08:	429a      	cmp	r2, r3
 8001d0a:	d1ec      	bne.n	8001ce6 <HAL_RCC_ClockConfig+0xe2>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001d0c:	4b1e      	ldr	r3, [pc, #120]	; (8001d88 <HAL_RCC_ClockConfig+0x184>)
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	2201      	movs	r2, #1
 8001d12:	4013      	ands	r3, r2
 8001d14:	683a      	ldr	r2, [r7, #0]
 8001d16:	429a      	cmp	r2, r3
 8001d18:	d211      	bcs.n	8001d3e <HAL_RCC_ClockConfig+0x13a>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d1a:	4b1b      	ldr	r3, [pc, #108]	; (8001d88 <HAL_RCC_ClockConfig+0x184>)
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	2201      	movs	r2, #1
 8001d20:	4393      	bics	r3, r2
 8001d22:	0019      	movs	r1, r3
 8001d24:	4b18      	ldr	r3, [pc, #96]	; (8001d88 <HAL_RCC_ClockConfig+0x184>)
 8001d26:	683a      	ldr	r2, [r7, #0]
 8001d28:	430a      	orrs	r2, r1
 8001d2a:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d2c:	4b16      	ldr	r3, [pc, #88]	; (8001d88 <HAL_RCC_ClockConfig+0x184>)
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	2201      	movs	r2, #1
 8001d32:	4013      	ands	r3, r2
 8001d34:	683a      	ldr	r2, [r7, #0]
 8001d36:	429a      	cmp	r2, r3
 8001d38:	d001      	beq.n	8001d3e <HAL_RCC_ClockConfig+0x13a>
    {
      return HAL_ERROR;
 8001d3a:	2301      	movs	r3, #1
 8001d3c:	e020      	b.n	8001d80 <HAL_RCC_ClockConfig+0x17c>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	2204      	movs	r2, #4
 8001d44:	4013      	ands	r3, r2
 8001d46:	d009      	beq.n	8001d5c <HAL_RCC_ClockConfig+0x158>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8001d48:	4b10      	ldr	r3, [pc, #64]	; (8001d8c <HAL_RCC_ClockConfig+0x188>)
 8001d4a:	685b      	ldr	r3, [r3, #4]
 8001d4c:	4a11      	ldr	r2, [pc, #68]	; (8001d94 <HAL_RCC_ClockConfig+0x190>)
 8001d4e:	4013      	ands	r3, r2
 8001d50:	0019      	movs	r1, r3
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	68da      	ldr	r2, [r3, #12]
 8001d56:	4b0d      	ldr	r3, [pc, #52]	; (8001d8c <HAL_RCC_ClockConfig+0x188>)
 8001d58:	430a      	orrs	r2, r1
 8001d5a:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8001d5c:	f000 f820 	bl	8001da0 <HAL_RCC_GetSysClockFreq>
 8001d60:	0001      	movs	r1, r0
 8001d62:	4b0a      	ldr	r3, [pc, #40]	; (8001d8c <HAL_RCC_ClockConfig+0x188>)
 8001d64:	685b      	ldr	r3, [r3, #4]
 8001d66:	091b      	lsrs	r3, r3, #4
 8001d68:	220f      	movs	r2, #15
 8001d6a:	4013      	ands	r3, r2
 8001d6c:	4a0a      	ldr	r2, [pc, #40]	; (8001d98 <HAL_RCC_ClockConfig+0x194>)
 8001d6e:	5cd3      	ldrb	r3, [r2, r3]
 8001d70:	000a      	movs	r2, r1
 8001d72:	40da      	lsrs	r2, r3
 8001d74:	4b09      	ldr	r3, [pc, #36]	; (8001d9c <HAL_RCC_ClockConfig+0x198>)
 8001d76:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8001d78:	2000      	movs	r0, #0
 8001d7a:	f7ff f959 	bl	8001030 <HAL_InitTick>
  
  return HAL_OK;
 8001d7e:	2300      	movs	r3, #0
}
 8001d80:	0018      	movs	r0, r3
 8001d82:	46bd      	mov	sp, r7
 8001d84:	b004      	add	sp, #16
 8001d86:	bd80      	pop	{r7, pc}
 8001d88:	40022000 	.word	0x40022000
 8001d8c:	40021000 	.word	0x40021000
 8001d90:	00001388 	.word	0x00001388
 8001d94:	fffff8ff 	.word	0xfffff8ff
 8001d98:	08002d14 	.word	0x08002d14
 8001d9c:	20000000 	.word	0x20000000

08001da0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001da0:	b590      	push	{r4, r7, lr}
 8001da2:	b08f      	sub	sp, #60	; 0x3c
 8001da4:	af00      	add	r7, sp, #0
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 8001da6:	2314      	movs	r3, #20
 8001da8:	18fb      	adds	r3, r7, r3
 8001daa:	4a2b      	ldr	r2, [pc, #172]	; (8001e58 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001dac:	ca13      	ldmia	r2!, {r0, r1, r4}
 8001dae:	c313      	stmia	r3!, {r0, r1, r4}
 8001db0:	6812      	ldr	r2, [r2, #0]
 8001db2:	601a      	str	r2, [r3, #0]
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 8001db4:	1d3b      	adds	r3, r7, #4
 8001db6:	4a29      	ldr	r2, [pc, #164]	; (8001e5c <HAL_RCC_GetSysClockFreq+0xbc>)
 8001db8:	ca13      	ldmia	r2!, {r0, r1, r4}
 8001dba:	c313      	stmia	r3!, {r0, r1, r4}
 8001dbc:	6812      	ldr	r2, [r2, #0]
 8001dbe:	601a      	str	r2, [r3, #0]
                                           9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001dc0:	2300      	movs	r3, #0
 8001dc2:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001dc4:	2300      	movs	r3, #0
 8001dc6:	62bb      	str	r3, [r7, #40]	; 0x28
 8001dc8:	2300      	movs	r3, #0
 8001dca:	637b      	str	r3, [r7, #52]	; 0x34
 8001dcc:	2300      	movs	r3, #0
 8001dce:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t sysclockfreq = 0U;
 8001dd0:	2300      	movs	r3, #0
 8001dd2:	633b      	str	r3, [r7, #48]	; 0x30
  
  tmpreg = RCC->CFGR;
 8001dd4:	4b22      	ldr	r3, [pc, #136]	; (8001e60 <HAL_RCC_GetSysClockFreq+0xc0>)
 8001dd6:	685b      	ldr	r3, [r3, #4]
 8001dd8:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001dda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001ddc:	220c      	movs	r2, #12
 8001dde:	4013      	ands	r3, r2
 8001de0:	2b04      	cmp	r3, #4
 8001de2:	d002      	beq.n	8001dea <HAL_RCC_GetSysClockFreq+0x4a>
 8001de4:	2b08      	cmp	r3, #8
 8001de6:	d003      	beq.n	8001df0 <HAL_RCC_GetSysClockFreq+0x50>
 8001de8:	e02d      	b.n	8001e46 <HAL_RCC_GetSysClockFreq+0xa6>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001dea:	4b1e      	ldr	r3, [pc, #120]	; (8001e64 <HAL_RCC_GetSysClockFreq+0xc4>)
 8001dec:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001dee:	e02d      	b.n	8001e4c <HAL_RCC_GetSysClockFreq+0xac>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8001df0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001df2:	0c9b      	lsrs	r3, r3, #18
 8001df4:	220f      	movs	r2, #15
 8001df6:	4013      	ands	r3, r2
 8001df8:	2214      	movs	r2, #20
 8001dfa:	18ba      	adds	r2, r7, r2
 8001dfc:	5cd3      	ldrb	r3, [r2, r3]
 8001dfe:	627b      	str	r3, [r7, #36]	; 0x24
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8001e00:	4b17      	ldr	r3, [pc, #92]	; (8001e60 <HAL_RCC_GetSysClockFreq+0xc0>)
 8001e02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e04:	220f      	movs	r2, #15
 8001e06:	4013      	ands	r3, r2
 8001e08:	1d3a      	adds	r2, r7, #4
 8001e0a:	5cd3      	ldrb	r3, [r2, r3]
 8001e0c:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8001e0e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001e10:	2380      	movs	r3, #128	; 0x80
 8001e12:	025b      	lsls	r3, r3, #9
 8001e14:	4013      	ands	r3, r2
 8001e16:	d009      	beq.n	8001e2c <HAL_RCC_GetSysClockFreq+0x8c>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8001e18:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001e1a:	4812      	ldr	r0, [pc, #72]	; (8001e64 <HAL_RCC_GetSysClockFreq+0xc4>)
 8001e1c:	f7fe f974 	bl	8000108 <__udivsi3>
 8001e20:	0003      	movs	r3, r0
 8001e22:	001a      	movs	r2, r3
 8001e24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e26:	4353      	muls	r3, r2
 8001e28:	637b      	str	r3, [r7, #52]	; 0x34
 8001e2a:	e009      	b.n	8001e40 <HAL_RCC_GetSysClockFreq+0xa0>
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8001e2c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001e2e:	000a      	movs	r2, r1
 8001e30:	0152      	lsls	r2, r2, #5
 8001e32:	1a52      	subs	r2, r2, r1
 8001e34:	0193      	lsls	r3, r2, #6
 8001e36:	1a9b      	subs	r3, r3, r2
 8001e38:	00db      	lsls	r3, r3, #3
 8001e3a:	185b      	adds	r3, r3, r1
 8001e3c:	021b      	lsls	r3, r3, #8
 8001e3e:	637b      	str	r3, [r7, #52]	; 0x34
#endif
      }
      sysclockfreq = pllclk;
 8001e40:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001e42:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001e44:	e002      	b.n	8001e4c <HAL_RCC_GetSysClockFreq+0xac>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001e46:	4b07      	ldr	r3, [pc, #28]	; (8001e64 <HAL_RCC_GetSysClockFreq+0xc4>)
 8001e48:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001e4a:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8001e4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8001e4e:	0018      	movs	r0, r3
 8001e50:	46bd      	mov	sp, r7
 8001e52:	b00f      	add	sp, #60	; 0x3c
 8001e54:	bd90      	pop	{r4, r7, pc}
 8001e56:	46c0      	nop			; (mov r8, r8)
 8001e58:	08002cdc 	.word	0x08002cdc
 8001e5c:	08002cec 	.word	0x08002cec
 8001e60:	40021000 	.word	0x40021000
 8001e64:	007a1200 	.word	0x007a1200

08001e68 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8001e68:	b580      	push	{r7, lr}
 8001e6a:	b084      	sub	sp, #16
 8001e6c:	af00      	add	r7, sp, #0
 8001e6e:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	d101      	bne.n	8001e7a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8001e76:	2301      	movs	r3, #1
 8001e78:	e0a8      	b.n	8001fcc <HAL_SPI_Init+0x164>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	d109      	bne.n	8001e96 <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	685a      	ldr	r2, [r3, #4]
 8001e86:	2382      	movs	r3, #130	; 0x82
 8001e88:	005b      	lsls	r3, r3, #1
 8001e8a:	429a      	cmp	r2, r3
 8001e8c:	d009      	beq.n	8001ea2 <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	2200      	movs	r2, #0
 8001e92:	61da      	str	r2, [r3, #28]
 8001e94:	e005      	b.n	8001ea2 <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	2200      	movs	r2, #0
 8001e9a:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	2200      	movs	r2, #0
 8001ea0:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	2200      	movs	r2, #0
 8001ea6:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	225d      	movs	r2, #93	; 0x5d
 8001eac:	5c9b      	ldrb	r3, [r3, r2]
 8001eae:	b2db      	uxtb	r3, r3
 8001eb0:	2b00      	cmp	r3, #0
 8001eb2:	d107      	bne.n	8001ec4 <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	225c      	movs	r2, #92	; 0x5c
 8001eb8:	2100      	movs	r1, #0
 8001eba:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	0018      	movs	r0, r3
 8001ec0:	f7ff f810 	bl	8000ee4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	225d      	movs	r2, #93	; 0x5d
 8001ec8:	2102      	movs	r1, #2
 8001eca:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	681a      	ldr	r2, [r3, #0]
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	2140      	movs	r1, #64	; 0x40
 8001ed8:	438a      	bics	r2, r1
 8001eda:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	68da      	ldr	r2, [r3, #12]
 8001ee0:	23e0      	movs	r3, #224	; 0xe0
 8001ee2:	00db      	lsls	r3, r3, #3
 8001ee4:	429a      	cmp	r2, r3
 8001ee6:	d902      	bls.n	8001eee <HAL_SPI_Init+0x86>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8001ee8:	2300      	movs	r3, #0
 8001eea:	60fb      	str	r3, [r7, #12]
 8001eec:	e002      	b.n	8001ef4 <HAL_SPI_Init+0x8c>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8001eee:	2380      	movs	r3, #128	; 0x80
 8001ef0:	015b      	lsls	r3, r3, #5
 8001ef2:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	68da      	ldr	r2, [r3, #12]
 8001ef8:	23f0      	movs	r3, #240	; 0xf0
 8001efa:	011b      	lsls	r3, r3, #4
 8001efc:	429a      	cmp	r2, r3
 8001efe:	d008      	beq.n	8001f12 <HAL_SPI_Init+0xaa>
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	68da      	ldr	r2, [r3, #12]
 8001f04:	23e0      	movs	r3, #224	; 0xe0
 8001f06:	00db      	lsls	r3, r3, #3
 8001f08:	429a      	cmp	r2, r3
 8001f0a:	d002      	beq.n	8001f12 <HAL_SPI_Init+0xaa>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	2200      	movs	r2, #0
 8001f10:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	685a      	ldr	r2, [r3, #4]
 8001f16:	2382      	movs	r3, #130	; 0x82
 8001f18:	005b      	lsls	r3, r3, #1
 8001f1a:	401a      	ands	r2, r3
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	6899      	ldr	r1, [r3, #8]
 8001f20:	2384      	movs	r3, #132	; 0x84
 8001f22:	021b      	lsls	r3, r3, #8
 8001f24:	400b      	ands	r3, r1
 8001f26:	431a      	orrs	r2, r3
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	691b      	ldr	r3, [r3, #16]
 8001f2c:	2102      	movs	r1, #2
 8001f2e:	400b      	ands	r3, r1
 8001f30:	431a      	orrs	r2, r3
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	695b      	ldr	r3, [r3, #20]
 8001f36:	2101      	movs	r1, #1
 8001f38:	400b      	ands	r3, r1
 8001f3a:	431a      	orrs	r2, r3
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	6999      	ldr	r1, [r3, #24]
 8001f40:	2380      	movs	r3, #128	; 0x80
 8001f42:	009b      	lsls	r3, r3, #2
 8001f44:	400b      	ands	r3, r1
 8001f46:	431a      	orrs	r2, r3
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	69db      	ldr	r3, [r3, #28]
 8001f4c:	2138      	movs	r1, #56	; 0x38
 8001f4e:	400b      	ands	r3, r1
 8001f50:	431a      	orrs	r2, r3
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	6a1b      	ldr	r3, [r3, #32]
 8001f56:	2180      	movs	r1, #128	; 0x80
 8001f58:	400b      	ands	r3, r1
 8001f5a:	431a      	orrs	r2, r3
 8001f5c:	0011      	movs	r1, r2
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001f62:	2380      	movs	r3, #128	; 0x80
 8001f64:	019b      	lsls	r3, r3, #6
 8001f66:	401a      	ands	r2, r3
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	430a      	orrs	r2, r1
 8001f6e:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	699b      	ldr	r3, [r3, #24]
 8001f74:	0c1b      	lsrs	r3, r3, #16
 8001f76:	2204      	movs	r2, #4
 8001f78:	401a      	ands	r2, r3
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f7e:	2110      	movs	r1, #16
 8001f80:	400b      	ands	r3, r1
 8001f82:	431a      	orrs	r2, r3
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001f88:	2108      	movs	r1, #8
 8001f8a:	400b      	ands	r3, r1
 8001f8c:	431a      	orrs	r2, r3
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	68d9      	ldr	r1, [r3, #12]
 8001f92:	23f0      	movs	r3, #240	; 0xf0
 8001f94:	011b      	lsls	r3, r3, #4
 8001f96:	400b      	ands	r3, r1
 8001f98:	431a      	orrs	r2, r3
 8001f9a:	0011      	movs	r1, r2
 8001f9c:	68fa      	ldr	r2, [r7, #12]
 8001f9e:	2380      	movs	r3, #128	; 0x80
 8001fa0:	015b      	lsls	r3, r3, #5
 8001fa2:	401a      	ands	r2, r3
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	430a      	orrs	r2, r1
 8001faa:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	69da      	ldr	r2, [r3, #28]
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	4907      	ldr	r1, [pc, #28]	; (8001fd4 <HAL_SPI_Init+0x16c>)
 8001fb8:	400a      	ands	r2, r1
 8001fba:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	2200      	movs	r2, #0
 8001fc0:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	225d      	movs	r2, #93	; 0x5d
 8001fc6:	2101      	movs	r1, #1
 8001fc8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001fca:	2300      	movs	r3, #0
}
 8001fcc:	0018      	movs	r0, r3
 8001fce:	46bd      	mov	sp, r7
 8001fd0:	b004      	add	sp, #16
 8001fd2:	bd80      	pop	{r7, pc}
 8001fd4:	fffff7ff 	.word	0xfffff7ff

08001fd8 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001fd8:	b580      	push	{r7, lr}
 8001fda:	b088      	sub	sp, #32
 8001fdc:	af00      	add	r7, sp, #0
 8001fde:	60f8      	str	r0, [r7, #12]
 8001fe0:	60b9      	str	r1, [r7, #8]
 8001fe2:	603b      	str	r3, [r7, #0]
 8001fe4:	1dbb      	adds	r3, r7, #6
 8001fe6:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8001fe8:	231f      	movs	r3, #31
 8001fea:	18fb      	adds	r3, r7, r3
 8001fec:	2200      	movs	r2, #0
 8001fee:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8001ff0:	68fb      	ldr	r3, [r7, #12]
 8001ff2:	225c      	movs	r2, #92	; 0x5c
 8001ff4:	5c9b      	ldrb	r3, [r3, r2]
 8001ff6:	2b01      	cmp	r3, #1
 8001ff8:	d101      	bne.n	8001ffe <HAL_SPI_Transmit+0x26>
 8001ffa:	2302      	movs	r3, #2
 8001ffc:	e140      	b.n	8002280 <HAL_SPI_Transmit+0x2a8>
 8001ffe:	68fb      	ldr	r3, [r7, #12]
 8002000:	225c      	movs	r2, #92	; 0x5c
 8002002:	2101      	movs	r1, #1
 8002004:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002006:	f7ff f859 	bl	80010bc <HAL_GetTick>
 800200a:	0003      	movs	r3, r0
 800200c:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 800200e:	2316      	movs	r3, #22
 8002010:	18fb      	adds	r3, r7, r3
 8002012:	1dba      	adds	r2, r7, #6
 8002014:	8812      	ldrh	r2, [r2, #0]
 8002016:	801a      	strh	r2, [r3, #0]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002018:	68fb      	ldr	r3, [r7, #12]
 800201a:	225d      	movs	r2, #93	; 0x5d
 800201c:	5c9b      	ldrb	r3, [r3, r2]
 800201e:	b2db      	uxtb	r3, r3
 8002020:	2b01      	cmp	r3, #1
 8002022:	d004      	beq.n	800202e <HAL_SPI_Transmit+0x56>
  {
    errorcode = HAL_BUSY;
 8002024:	231f      	movs	r3, #31
 8002026:	18fb      	adds	r3, r7, r3
 8002028:	2202      	movs	r2, #2
 800202a:	701a      	strb	r2, [r3, #0]
    goto error;
 800202c:	e11d      	b.n	800226a <HAL_SPI_Transmit+0x292>
  }

  if ((pData == NULL) || (Size == 0U))
 800202e:	68bb      	ldr	r3, [r7, #8]
 8002030:	2b00      	cmp	r3, #0
 8002032:	d003      	beq.n	800203c <HAL_SPI_Transmit+0x64>
 8002034:	1dbb      	adds	r3, r7, #6
 8002036:	881b      	ldrh	r3, [r3, #0]
 8002038:	2b00      	cmp	r3, #0
 800203a:	d104      	bne.n	8002046 <HAL_SPI_Transmit+0x6e>
  {
    errorcode = HAL_ERROR;
 800203c:	231f      	movs	r3, #31
 800203e:	18fb      	adds	r3, r7, r3
 8002040:	2201      	movs	r2, #1
 8002042:	701a      	strb	r2, [r3, #0]
    goto error;
 8002044:	e111      	b.n	800226a <HAL_SPI_Transmit+0x292>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8002046:	68fb      	ldr	r3, [r7, #12]
 8002048:	225d      	movs	r2, #93	; 0x5d
 800204a:	2103      	movs	r1, #3
 800204c:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800204e:	68fb      	ldr	r3, [r7, #12]
 8002050:	2200      	movs	r2, #0
 8002052:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8002054:	68fb      	ldr	r3, [r7, #12]
 8002056:	68ba      	ldr	r2, [r7, #8]
 8002058:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 800205a:	68fb      	ldr	r3, [r7, #12]
 800205c:	1dba      	adds	r2, r7, #6
 800205e:	8812      	ldrh	r2, [r2, #0]
 8002060:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8002062:	68fb      	ldr	r3, [r7, #12]
 8002064:	1dba      	adds	r2, r7, #6
 8002066:	8812      	ldrh	r2, [r2, #0]
 8002068:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800206a:	68fb      	ldr	r3, [r7, #12]
 800206c:	2200      	movs	r2, #0
 800206e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8002070:	68fb      	ldr	r3, [r7, #12]
 8002072:	2244      	movs	r2, #68	; 0x44
 8002074:	2100      	movs	r1, #0
 8002076:	5299      	strh	r1, [r3, r2]
  hspi->RxXferCount = 0U;
 8002078:	68fb      	ldr	r3, [r7, #12]
 800207a:	2246      	movs	r2, #70	; 0x46
 800207c:	2100      	movs	r1, #0
 800207e:	5299      	strh	r1, [r3, r2]
  hspi->TxISR       = NULL;
 8002080:	68fb      	ldr	r3, [r7, #12]
 8002082:	2200      	movs	r2, #0
 8002084:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8002086:	68fb      	ldr	r3, [r7, #12]
 8002088:	2200      	movs	r2, #0
 800208a:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800208c:	68fb      	ldr	r3, [r7, #12]
 800208e:	689a      	ldr	r2, [r3, #8]
 8002090:	2380      	movs	r3, #128	; 0x80
 8002092:	021b      	lsls	r3, r3, #8
 8002094:	429a      	cmp	r2, r3
 8002096:	d110      	bne.n	80020ba <HAL_SPI_Transmit+0xe2>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8002098:	68fb      	ldr	r3, [r7, #12]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	681a      	ldr	r2, [r3, #0]
 800209e:	68fb      	ldr	r3, [r7, #12]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	2140      	movs	r1, #64	; 0x40
 80020a4:	438a      	bics	r2, r1
 80020a6:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80020a8:	68fb      	ldr	r3, [r7, #12]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	681a      	ldr	r2, [r3, #0]
 80020ae:	68fb      	ldr	r3, [r7, #12]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	2180      	movs	r1, #128	; 0x80
 80020b4:	01c9      	lsls	r1, r1, #7
 80020b6:	430a      	orrs	r2, r1
 80020b8:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80020ba:	68fb      	ldr	r3, [r7, #12]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	2240      	movs	r2, #64	; 0x40
 80020c2:	4013      	ands	r3, r2
 80020c4:	2b40      	cmp	r3, #64	; 0x40
 80020c6:	d007      	beq.n	80020d8 <HAL_SPI_Transmit+0x100>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80020c8:	68fb      	ldr	r3, [r7, #12]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	681a      	ldr	r2, [r3, #0]
 80020ce:	68fb      	ldr	r3, [r7, #12]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	2140      	movs	r1, #64	; 0x40
 80020d4:	430a      	orrs	r2, r1
 80020d6:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80020d8:	68fb      	ldr	r3, [r7, #12]
 80020da:	68da      	ldr	r2, [r3, #12]
 80020dc:	23e0      	movs	r3, #224	; 0xe0
 80020de:	00db      	lsls	r3, r3, #3
 80020e0:	429a      	cmp	r2, r3
 80020e2:	d94e      	bls.n	8002182 <HAL_SPI_Transmit+0x1aa>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80020e4:	68fb      	ldr	r3, [r7, #12]
 80020e6:	685b      	ldr	r3, [r3, #4]
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	d004      	beq.n	80020f6 <HAL_SPI_Transmit+0x11e>
 80020ec:	2316      	movs	r3, #22
 80020ee:	18fb      	adds	r3, r7, r3
 80020f0:	881b      	ldrh	r3, [r3, #0]
 80020f2:	2b01      	cmp	r3, #1
 80020f4:	d13f      	bne.n	8002176 <HAL_SPI_Transmit+0x19e>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80020f6:	68fb      	ldr	r3, [r7, #12]
 80020f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80020fa:	881a      	ldrh	r2, [r3, #0]
 80020fc:	68fb      	ldr	r3, [r7, #12]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002102:	68fb      	ldr	r3, [r7, #12]
 8002104:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002106:	1c9a      	adds	r2, r3, #2
 8002108:	68fb      	ldr	r3, [r7, #12]
 800210a:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 800210c:	68fb      	ldr	r3, [r7, #12]
 800210e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002110:	b29b      	uxth	r3, r3
 8002112:	3b01      	subs	r3, #1
 8002114:	b29a      	uxth	r2, r3
 8002116:	68fb      	ldr	r3, [r7, #12]
 8002118:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800211a:	e02c      	b.n	8002176 <HAL_SPI_Transmit+0x19e>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800211c:	68fb      	ldr	r3, [r7, #12]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	689b      	ldr	r3, [r3, #8]
 8002122:	2202      	movs	r2, #2
 8002124:	4013      	ands	r3, r2
 8002126:	2b02      	cmp	r3, #2
 8002128:	d112      	bne.n	8002150 <HAL_SPI_Transmit+0x178>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800212a:	68fb      	ldr	r3, [r7, #12]
 800212c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800212e:	881a      	ldrh	r2, [r3, #0]
 8002130:	68fb      	ldr	r3, [r7, #12]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002136:	68fb      	ldr	r3, [r7, #12]
 8002138:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800213a:	1c9a      	adds	r2, r3, #2
 800213c:	68fb      	ldr	r3, [r7, #12]
 800213e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8002140:	68fb      	ldr	r3, [r7, #12]
 8002142:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002144:	b29b      	uxth	r3, r3
 8002146:	3b01      	subs	r3, #1
 8002148:	b29a      	uxth	r2, r3
 800214a:	68fb      	ldr	r3, [r7, #12]
 800214c:	87da      	strh	r2, [r3, #62]	; 0x3e
 800214e:	e012      	b.n	8002176 <HAL_SPI_Transmit+0x19e>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002150:	f7fe ffb4 	bl	80010bc <HAL_GetTick>
 8002154:	0002      	movs	r2, r0
 8002156:	69bb      	ldr	r3, [r7, #24]
 8002158:	1ad3      	subs	r3, r2, r3
 800215a:	683a      	ldr	r2, [r7, #0]
 800215c:	429a      	cmp	r2, r3
 800215e:	d802      	bhi.n	8002166 <HAL_SPI_Transmit+0x18e>
 8002160:	683b      	ldr	r3, [r7, #0]
 8002162:	3301      	adds	r3, #1
 8002164:	d102      	bne.n	800216c <HAL_SPI_Transmit+0x194>
 8002166:	683b      	ldr	r3, [r7, #0]
 8002168:	2b00      	cmp	r3, #0
 800216a:	d104      	bne.n	8002176 <HAL_SPI_Transmit+0x19e>
        {
          errorcode = HAL_TIMEOUT;
 800216c:	231f      	movs	r3, #31
 800216e:	18fb      	adds	r3, r7, r3
 8002170:	2203      	movs	r2, #3
 8002172:	701a      	strb	r2, [r3, #0]
          goto error;
 8002174:	e079      	b.n	800226a <HAL_SPI_Transmit+0x292>
    while (hspi->TxXferCount > 0U)
 8002176:	68fb      	ldr	r3, [r7, #12]
 8002178:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800217a:	b29b      	uxth	r3, r3
 800217c:	2b00      	cmp	r3, #0
 800217e:	d1cd      	bne.n	800211c <HAL_SPI_Transmit+0x144>
 8002180:	e04f      	b.n	8002222 <HAL_SPI_Transmit+0x24a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002182:	68fb      	ldr	r3, [r7, #12]
 8002184:	685b      	ldr	r3, [r3, #4]
 8002186:	2b00      	cmp	r3, #0
 8002188:	d004      	beq.n	8002194 <HAL_SPI_Transmit+0x1bc>
 800218a:	2316      	movs	r3, #22
 800218c:	18fb      	adds	r3, r7, r3
 800218e:	881b      	ldrh	r3, [r3, #0]
 8002190:	2b01      	cmp	r3, #1
 8002192:	d141      	bne.n	8002218 <HAL_SPI_Transmit+0x240>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002194:	68fb      	ldr	r3, [r7, #12]
 8002196:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002198:	68fb      	ldr	r3, [r7, #12]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	330c      	adds	r3, #12
 800219e:	7812      	ldrb	r2, [r2, #0]
 80021a0:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80021a2:	68fb      	ldr	r3, [r7, #12]
 80021a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80021a6:	1c5a      	adds	r2, r3, #1
 80021a8:	68fb      	ldr	r3, [r7, #12]
 80021aa:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 80021ac:	68fb      	ldr	r3, [r7, #12]
 80021ae:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80021b0:	b29b      	uxth	r3, r3
 80021b2:	3b01      	subs	r3, #1
 80021b4:	b29a      	uxth	r2, r3
 80021b6:	68fb      	ldr	r3, [r7, #12]
 80021b8:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while (hspi->TxXferCount > 0U)
 80021ba:	e02d      	b.n	8002218 <HAL_SPI_Transmit+0x240>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80021bc:	68fb      	ldr	r3, [r7, #12]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	689b      	ldr	r3, [r3, #8]
 80021c2:	2202      	movs	r2, #2
 80021c4:	4013      	ands	r3, r2
 80021c6:	2b02      	cmp	r3, #2
 80021c8:	d113      	bne.n	80021f2 <HAL_SPI_Transmit+0x21a>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80021ca:	68fb      	ldr	r3, [r7, #12]
 80021cc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80021ce:	68fb      	ldr	r3, [r7, #12]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	330c      	adds	r3, #12
 80021d4:	7812      	ldrb	r2, [r2, #0]
 80021d6:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80021d8:	68fb      	ldr	r3, [r7, #12]
 80021da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80021dc:	1c5a      	adds	r2, r3, #1
 80021de:	68fb      	ldr	r3, [r7, #12]
 80021e0:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80021e2:	68fb      	ldr	r3, [r7, #12]
 80021e4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80021e6:	b29b      	uxth	r3, r3
 80021e8:	3b01      	subs	r3, #1
 80021ea:	b29a      	uxth	r2, r3
 80021ec:	68fb      	ldr	r3, [r7, #12]
 80021ee:	87da      	strh	r2, [r3, #62]	; 0x3e
 80021f0:	e012      	b.n	8002218 <HAL_SPI_Transmit+0x240>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80021f2:	f7fe ff63 	bl	80010bc <HAL_GetTick>
 80021f6:	0002      	movs	r2, r0
 80021f8:	69bb      	ldr	r3, [r7, #24]
 80021fa:	1ad3      	subs	r3, r2, r3
 80021fc:	683a      	ldr	r2, [r7, #0]
 80021fe:	429a      	cmp	r2, r3
 8002200:	d802      	bhi.n	8002208 <HAL_SPI_Transmit+0x230>
 8002202:	683b      	ldr	r3, [r7, #0]
 8002204:	3301      	adds	r3, #1
 8002206:	d102      	bne.n	800220e <HAL_SPI_Transmit+0x236>
 8002208:	683b      	ldr	r3, [r7, #0]
 800220a:	2b00      	cmp	r3, #0
 800220c:	d104      	bne.n	8002218 <HAL_SPI_Transmit+0x240>
        {
          errorcode = HAL_TIMEOUT;
 800220e:	231f      	movs	r3, #31
 8002210:	18fb      	adds	r3, r7, r3
 8002212:	2203      	movs	r2, #3
 8002214:	701a      	strb	r2, [r3, #0]
          goto error;
 8002216:	e028      	b.n	800226a <HAL_SPI_Transmit+0x292>
    while (hspi->TxXferCount > 0U)
 8002218:	68fb      	ldr	r3, [r7, #12]
 800221a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800221c:	b29b      	uxth	r3, r3
 800221e:	2b00      	cmp	r3, #0
 8002220:	d1cc      	bne.n	80021bc <HAL_SPI_Transmit+0x1e4>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002222:	69ba      	ldr	r2, [r7, #24]
 8002224:	6839      	ldr	r1, [r7, #0]
 8002226:	68fb      	ldr	r3, [r7, #12]
 8002228:	0018      	movs	r0, r3
 800222a:	f000 fccf 	bl	8002bcc <SPI_EndRxTxTransaction>
 800222e:	1e03      	subs	r3, r0, #0
 8002230:	d002      	beq.n	8002238 <HAL_SPI_Transmit+0x260>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002232:	68fb      	ldr	r3, [r7, #12]
 8002234:	2220      	movs	r2, #32
 8002236:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002238:	68fb      	ldr	r3, [r7, #12]
 800223a:	689b      	ldr	r3, [r3, #8]
 800223c:	2b00      	cmp	r3, #0
 800223e:	d10a      	bne.n	8002256 <HAL_SPI_Transmit+0x27e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002240:	2300      	movs	r3, #0
 8002242:	613b      	str	r3, [r7, #16]
 8002244:	68fb      	ldr	r3, [r7, #12]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	68db      	ldr	r3, [r3, #12]
 800224a:	613b      	str	r3, [r7, #16]
 800224c:	68fb      	ldr	r3, [r7, #12]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	689b      	ldr	r3, [r3, #8]
 8002252:	613b      	str	r3, [r7, #16]
 8002254:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002256:	68fb      	ldr	r3, [r7, #12]
 8002258:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800225a:	2b00      	cmp	r3, #0
 800225c:	d004      	beq.n	8002268 <HAL_SPI_Transmit+0x290>
  {
    errorcode = HAL_ERROR;
 800225e:	231f      	movs	r3, #31
 8002260:	18fb      	adds	r3, r7, r3
 8002262:	2201      	movs	r2, #1
 8002264:	701a      	strb	r2, [r3, #0]
 8002266:	e000      	b.n	800226a <HAL_SPI_Transmit+0x292>
  }

error:
 8002268:	46c0      	nop			; (mov r8, r8)
  hspi->State = HAL_SPI_STATE_READY;
 800226a:	68fb      	ldr	r3, [r7, #12]
 800226c:	225d      	movs	r2, #93	; 0x5d
 800226e:	2101      	movs	r1, #1
 8002270:	5499      	strb	r1, [r3, r2]
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8002272:	68fb      	ldr	r3, [r7, #12]
 8002274:	225c      	movs	r2, #92	; 0x5c
 8002276:	2100      	movs	r1, #0
 8002278:	5499      	strb	r1, [r3, r2]
  return errorcode;
 800227a:	231f      	movs	r3, #31
 800227c:	18fb      	adds	r3, r7, r3
 800227e:	781b      	ldrb	r3, [r3, #0]
}
 8002280:	0018      	movs	r0, r3
 8002282:	46bd      	mov	sp, r7
 8002284:	b008      	add	sp, #32
 8002286:	bd80      	pop	{r7, pc}

08002288 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002288:	b590      	push	{r4, r7, lr}
 800228a:	b089      	sub	sp, #36	; 0x24
 800228c:	af02      	add	r7, sp, #8
 800228e:	60f8      	str	r0, [r7, #12]
 8002290:	60b9      	str	r1, [r7, #8]
 8002292:	603b      	str	r3, [r7, #0]
 8002294:	1dbb      	adds	r3, r7, #6
 8002296:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002298:	2317      	movs	r3, #23
 800229a:	18fb      	adds	r3, r7, r3
 800229c:	2200      	movs	r2, #0
 800229e:	701a      	strb	r2, [r3, #0]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80022a0:	68fb      	ldr	r3, [r7, #12]
 80022a2:	685a      	ldr	r2, [r3, #4]
 80022a4:	2382      	movs	r3, #130	; 0x82
 80022a6:	005b      	lsls	r3, r3, #1
 80022a8:	429a      	cmp	r2, r3
 80022aa:	d113      	bne.n	80022d4 <HAL_SPI_Receive+0x4c>
 80022ac:	68fb      	ldr	r3, [r7, #12]
 80022ae:	689b      	ldr	r3, [r3, #8]
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	d10f      	bne.n	80022d4 <HAL_SPI_Receive+0x4c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80022b4:	68fb      	ldr	r3, [r7, #12]
 80022b6:	225d      	movs	r2, #93	; 0x5d
 80022b8:	2104      	movs	r1, #4
 80022ba:	5499      	strb	r1, [r3, r2]
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 80022bc:	1dbb      	adds	r3, r7, #6
 80022be:	881c      	ldrh	r4, [r3, #0]
 80022c0:	68ba      	ldr	r2, [r7, #8]
 80022c2:	68b9      	ldr	r1, [r7, #8]
 80022c4:	68f8      	ldr	r0, [r7, #12]
 80022c6:	683b      	ldr	r3, [r7, #0]
 80022c8:	9300      	str	r3, [sp, #0]
 80022ca:	0023      	movs	r3, r4
 80022cc:	f000 f928 	bl	8002520 <HAL_SPI_TransmitReceive>
 80022d0:	0003      	movs	r3, r0
 80022d2:	e11c      	b.n	800250e <HAL_SPI_Receive+0x286>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80022d4:	68fb      	ldr	r3, [r7, #12]
 80022d6:	225c      	movs	r2, #92	; 0x5c
 80022d8:	5c9b      	ldrb	r3, [r3, r2]
 80022da:	2b01      	cmp	r3, #1
 80022dc:	d101      	bne.n	80022e2 <HAL_SPI_Receive+0x5a>
 80022de:	2302      	movs	r3, #2
 80022e0:	e115      	b.n	800250e <HAL_SPI_Receive+0x286>
 80022e2:	68fb      	ldr	r3, [r7, #12]
 80022e4:	225c      	movs	r2, #92	; 0x5c
 80022e6:	2101      	movs	r1, #1
 80022e8:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80022ea:	f7fe fee7 	bl	80010bc <HAL_GetTick>
 80022ee:	0003      	movs	r3, r0
 80022f0:	613b      	str	r3, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 80022f2:	68fb      	ldr	r3, [r7, #12]
 80022f4:	225d      	movs	r2, #93	; 0x5d
 80022f6:	5c9b      	ldrb	r3, [r3, r2]
 80022f8:	b2db      	uxtb	r3, r3
 80022fa:	2b01      	cmp	r3, #1
 80022fc:	d004      	beq.n	8002308 <HAL_SPI_Receive+0x80>
  {
    errorcode = HAL_BUSY;
 80022fe:	2317      	movs	r3, #23
 8002300:	18fb      	adds	r3, r7, r3
 8002302:	2202      	movs	r2, #2
 8002304:	701a      	strb	r2, [r3, #0]
    goto error;
 8002306:	e0f7      	b.n	80024f8 <HAL_SPI_Receive+0x270>
  }

  if ((pData == NULL) || (Size == 0U))
 8002308:	68bb      	ldr	r3, [r7, #8]
 800230a:	2b00      	cmp	r3, #0
 800230c:	d003      	beq.n	8002316 <HAL_SPI_Receive+0x8e>
 800230e:	1dbb      	adds	r3, r7, #6
 8002310:	881b      	ldrh	r3, [r3, #0]
 8002312:	2b00      	cmp	r3, #0
 8002314:	d104      	bne.n	8002320 <HAL_SPI_Receive+0x98>
  {
    errorcode = HAL_ERROR;
 8002316:	2317      	movs	r3, #23
 8002318:	18fb      	adds	r3, r7, r3
 800231a:	2201      	movs	r2, #1
 800231c:	701a      	strb	r2, [r3, #0]
    goto error;
 800231e:	e0eb      	b.n	80024f8 <HAL_SPI_Receive+0x270>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8002320:	68fb      	ldr	r3, [r7, #12]
 8002322:	225d      	movs	r2, #93	; 0x5d
 8002324:	2104      	movs	r1, #4
 8002326:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002328:	68fb      	ldr	r3, [r7, #12]
 800232a:	2200      	movs	r2, #0
 800232c:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800232e:	68fb      	ldr	r3, [r7, #12]
 8002330:	68ba      	ldr	r2, [r7, #8]
 8002332:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 8002334:	68fb      	ldr	r3, [r7, #12]
 8002336:	1dba      	adds	r2, r7, #6
 8002338:	2144      	movs	r1, #68	; 0x44
 800233a:	8812      	ldrh	r2, [r2, #0]
 800233c:	525a      	strh	r2, [r3, r1]
  hspi->RxXferCount = Size;
 800233e:	68fb      	ldr	r3, [r7, #12]
 8002340:	1dba      	adds	r2, r7, #6
 8002342:	2146      	movs	r1, #70	; 0x46
 8002344:	8812      	ldrh	r2, [r2, #0]
 8002346:	525a      	strh	r2, [r3, r1]

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8002348:	68fb      	ldr	r3, [r7, #12]
 800234a:	2200      	movs	r2, #0
 800234c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 800234e:	68fb      	ldr	r3, [r7, #12]
 8002350:	2200      	movs	r2, #0
 8002352:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 8002354:	68fb      	ldr	r3, [r7, #12]
 8002356:	2200      	movs	r2, #0
 8002358:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 800235a:	68fb      	ldr	r3, [r7, #12]
 800235c:	2200      	movs	r2, #0
 800235e:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8002360:	68fb      	ldr	r3, [r7, #12]
 8002362:	2200      	movs	r2, #0
 8002364:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002366:	68fb      	ldr	r3, [r7, #12]
 8002368:	68da      	ldr	r2, [r3, #12]
 800236a:	23e0      	movs	r3, #224	; 0xe0
 800236c:	00db      	lsls	r3, r3, #3
 800236e:	429a      	cmp	r2, r3
 8002370:	d908      	bls.n	8002384 <HAL_SPI_Receive+0xfc>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8002372:	68fb      	ldr	r3, [r7, #12]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	685a      	ldr	r2, [r3, #4]
 8002378:	68fb      	ldr	r3, [r7, #12]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	4966      	ldr	r1, [pc, #408]	; (8002518 <HAL_SPI_Receive+0x290>)
 800237e:	400a      	ands	r2, r1
 8002380:	605a      	str	r2, [r3, #4]
 8002382:	e008      	b.n	8002396 <HAL_SPI_Receive+0x10e>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8002384:	68fb      	ldr	r3, [r7, #12]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	685a      	ldr	r2, [r3, #4]
 800238a:	68fb      	ldr	r3, [r7, #12]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	2180      	movs	r1, #128	; 0x80
 8002390:	0149      	lsls	r1, r1, #5
 8002392:	430a      	orrs	r2, r1
 8002394:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002396:	68fb      	ldr	r3, [r7, #12]
 8002398:	689a      	ldr	r2, [r3, #8]
 800239a:	2380      	movs	r3, #128	; 0x80
 800239c:	021b      	lsls	r3, r3, #8
 800239e:	429a      	cmp	r2, r3
 80023a0:	d10f      	bne.n	80023c2 <HAL_SPI_Receive+0x13a>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80023a2:	68fb      	ldr	r3, [r7, #12]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	681a      	ldr	r2, [r3, #0]
 80023a8:	68fb      	ldr	r3, [r7, #12]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	2140      	movs	r1, #64	; 0x40
 80023ae:	438a      	bics	r2, r1
 80023b0:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 80023b2:	68fb      	ldr	r3, [r7, #12]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	681a      	ldr	r2, [r3, #0]
 80023b8:	68fb      	ldr	r3, [r7, #12]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	4957      	ldr	r1, [pc, #348]	; (800251c <HAL_SPI_Receive+0x294>)
 80023be:	400a      	ands	r2, r1
 80023c0:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80023c2:	68fb      	ldr	r3, [r7, #12]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	2240      	movs	r2, #64	; 0x40
 80023ca:	4013      	ands	r3, r2
 80023cc:	2b40      	cmp	r3, #64	; 0x40
 80023ce:	d007      	beq.n	80023e0 <HAL_SPI_Receive+0x158>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80023d0:	68fb      	ldr	r3, [r7, #12]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	681a      	ldr	r2, [r3, #0]
 80023d6:	68fb      	ldr	r3, [r7, #12]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	2140      	movs	r1, #64	; 0x40
 80023dc:	430a      	orrs	r2, r1
 80023de:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 80023e0:	68fb      	ldr	r3, [r7, #12]
 80023e2:	68da      	ldr	r2, [r3, #12]
 80023e4:	23e0      	movs	r3, #224	; 0xe0
 80023e6:	00db      	lsls	r3, r3, #3
 80023e8:	429a      	cmp	r2, r3
 80023ea:	d900      	bls.n	80023ee <HAL_SPI_Receive+0x166>
 80023ec:	e069      	b.n	80024c2 <HAL_SPI_Receive+0x23a>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 80023ee:	e031      	b.n	8002454 <HAL_SPI_Receive+0x1cc>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80023f0:	68fb      	ldr	r3, [r7, #12]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	689b      	ldr	r3, [r3, #8]
 80023f6:	2201      	movs	r2, #1
 80023f8:	4013      	ands	r3, r2
 80023fa:	2b01      	cmp	r3, #1
 80023fc:	d117      	bne.n	800242e <HAL_SPI_Receive+0x1a6>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80023fe:	68fb      	ldr	r3, [r7, #12]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	330c      	adds	r3, #12
 8002404:	001a      	movs	r2, r3
 8002406:	68fb      	ldr	r3, [r7, #12]
 8002408:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800240a:	7812      	ldrb	r2, [r2, #0]
 800240c:	b2d2      	uxtb	r2, r2
 800240e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8002410:	68fb      	ldr	r3, [r7, #12]
 8002412:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002414:	1c5a      	adds	r2, r3, #1
 8002416:	68fb      	ldr	r3, [r7, #12]
 8002418:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 800241a:	68fb      	ldr	r3, [r7, #12]
 800241c:	2246      	movs	r2, #70	; 0x46
 800241e:	5a9b      	ldrh	r3, [r3, r2]
 8002420:	b29b      	uxth	r3, r3
 8002422:	3b01      	subs	r3, #1
 8002424:	b299      	uxth	r1, r3
 8002426:	68fb      	ldr	r3, [r7, #12]
 8002428:	2246      	movs	r2, #70	; 0x46
 800242a:	5299      	strh	r1, [r3, r2]
 800242c:	e012      	b.n	8002454 <HAL_SPI_Receive+0x1cc>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800242e:	f7fe fe45 	bl	80010bc <HAL_GetTick>
 8002432:	0002      	movs	r2, r0
 8002434:	693b      	ldr	r3, [r7, #16]
 8002436:	1ad3      	subs	r3, r2, r3
 8002438:	683a      	ldr	r2, [r7, #0]
 800243a:	429a      	cmp	r2, r3
 800243c:	d802      	bhi.n	8002444 <HAL_SPI_Receive+0x1bc>
 800243e:	683b      	ldr	r3, [r7, #0]
 8002440:	3301      	adds	r3, #1
 8002442:	d102      	bne.n	800244a <HAL_SPI_Receive+0x1c2>
 8002444:	683b      	ldr	r3, [r7, #0]
 8002446:	2b00      	cmp	r3, #0
 8002448:	d104      	bne.n	8002454 <HAL_SPI_Receive+0x1cc>
        {
          errorcode = HAL_TIMEOUT;
 800244a:	2317      	movs	r3, #23
 800244c:	18fb      	adds	r3, r7, r3
 800244e:	2203      	movs	r2, #3
 8002450:	701a      	strb	r2, [r3, #0]
          goto error;
 8002452:	e051      	b.n	80024f8 <HAL_SPI_Receive+0x270>
    while (hspi->RxXferCount > 0U)
 8002454:	68fb      	ldr	r3, [r7, #12]
 8002456:	2246      	movs	r2, #70	; 0x46
 8002458:	5a9b      	ldrh	r3, [r3, r2]
 800245a:	b29b      	uxth	r3, r3
 800245c:	2b00      	cmp	r3, #0
 800245e:	d1c7      	bne.n	80023f0 <HAL_SPI_Receive+0x168>
 8002460:	e035      	b.n	80024ce <HAL_SPI_Receive+0x246>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8002462:	68fb      	ldr	r3, [r7, #12]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	689b      	ldr	r3, [r3, #8]
 8002468:	2201      	movs	r2, #1
 800246a:	4013      	ands	r3, r2
 800246c:	2b01      	cmp	r3, #1
 800246e:	d115      	bne.n	800249c <HAL_SPI_Receive+0x214>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002470:	68fb      	ldr	r3, [r7, #12]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	68da      	ldr	r2, [r3, #12]
 8002476:	68fb      	ldr	r3, [r7, #12]
 8002478:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800247a:	b292      	uxth	r2, r2
 800247c:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800247e:	68fb      	ldr	r3, [r7, #12]
 8002480:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002482:	1c9a      	adds	r2, r3, #2
 8002484:	68fb      	ldr	r3, [r7, #12]
 8002486:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8002488:	68fb      	ldr	r3, [r7, #12]
 800248a:	2246      	movs	r2, #70	; 0x46
 800248c:	5a9b      	ldrh	r3, [r3, r2]
 800248e:	b29b      	uxth	r3, r3
 8002490:	3b01      	subs	r3, #1
 8002492:	b299      	uxth	r1, r3
 8002494:	68fb      	ldr	r3, [r7, #12]
 8002496:	2246      	movs	r2, #70	; 0x46
 8002498:	5299      	strh	r1, [r3, r2]
 800249a:	e012      	b.n	80024c2 <HAL_SPI_Receive+0x23a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800249c:	f7fe fe0e 	bl	80010bc <HAL_GetTick>
 80024a0:	0002      	movs	r2, r0
 80024a2:	693b      	ldr	r3, [r7, #16]
 80024a4:	1ad3      	subs	r3, r2, r3
 80024a6:	683a      	ldr	r2, [r7, #0]
 80024a8:	429a      	cmp	r2, r3
 80024aa:	d802      	bhi.n	80024b2 <HAL_SPI_Receive+0x22a>
 80024ac:	683b      	ldr	r3, [r7, #0]
 80024ae:	3301      	adds	r3, #1
 80024b0:	d102      	bne.n	80024b8 <HAL_SPI_Receive+0x230>
 80024b2:	683b      	ldr	r3, [r7, #0]
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	d104      	bne.n	80024c2 <HAL_SPI_Receive+0x23a>
        {
          errorcode = HAL_TIMEOUT;
 80024b8:	2317      	movs	r3, #23
 80024ba:	18fb      	adds	r3, r7, r3
 80024bc:	2203      	movs	r2, #3
 80024be:	701a      	strb	r2, [r3, #0]
          goto error;
 80024c0:	e01a      	b.n	80024f8 <HAL_SPI_Receive+0x270>
    while (hspi->RxXferCount > 0U)
 80024c2:	68fb      	ldr	r3, [r7, #12]
 80024c4:	2246      	movs	r2, #70	; 0x46
 80024c6:	5a9b      	ldrh	r3, [r3, r2]
 80024c8:	b29b      	uxth	r3, r3
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	d1c9      	bne.n	8002462 <HAL_SPI_Receive+0x1da>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80024ce:	693a      	ldr	r2, [r7, #16]
 80024d0:	6839      	ldr	r1, [r7, #0]
 80024d2:	68fb      	ldr	r3, [r7, #12]
 80024d4:	0018      	movs	r0, r3
 80024d6:	f000 fb1b 	bl	8002b10 <SPI_EndRxTransaction>
 80024da:	1e03      	subs	r3, r0, #0
 80024dc:	d002      	beq.n	80024e4 <HAL_SPI_Receive+0x25c>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80024de:	68fb      	ldr	r3, [r7, #12]
 80024e0:	2220      	movs	r2, #32
 80024e2:	661a      	str	r2, [r3, #96]	; 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80024e4:	68fb      	ldr	r3, [r7, #12]
 80024e6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	d004      	beq.n	80024f6 <HAL_SPI_Receive+0x26e>
  {
    errorcode = HAL_ERROR;
 80024ec:	2317      	movs	r3, #23
 80024ee:	18fb      	adds	r3, r7, r3
 80024f0:	2201      	movs	r2, #1
 80024f2:	701a      	strb	r2, [r3, #0]
 80024f4:	e000      	b.n	80024f8 <HAL_SPI_Receive+0x270>
  }

error :
 80024f6:	46c0      	nop			; (mov r8, r8)
  hspi->State = HAL_SPI_STATE_READY;
 80024f8:	68fb      	ldr	r3, [r7, #12]
 80024fa:	225d      	movs	r2, #93	; 0x5d
 80024fc:	2101      	movs	r1, #1
 80024fe:	5499      	strb	r1, [r3, r2]
  __HAL_UNLOCK(hspi);
 8002500:	68fb      	ldr	r3, [r7, #12]
 8002502:	225c      	movs	r2, #92	; 0x5c
 8002504:	2100      	movs	r1, #0
 8002506:	5499      	strb	r1, [r3, r2]
  return errorcode;
 8002508:	2317      	movs	r3, #23
 800250a:	18fb      	adds	r3, r7, r3
 800250c:	781b      	ldrb	r3, [r3, #0]
}
 800250e:	0018      	movs	r0, r3
 8002510:	46bd      	mov	sp, r7
 8002512:	b007      	add	sp, #28
 8002514:	bd90      	pop	{r4, r7, pc}
 8002516:	46c0      	nop			; (mov r8, r8)
 8002518:	ffffefff 	.word	0xffffefff
 800251c:	ffffbfff 	.word	0xffffbfff

08002520 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8002520:	b580      	push	{r7, lr}
 8002522:	b08a      	sub	sp, #40	; 0x28
 8002524:	af00      	add	r7, sp, #0
 8002526:	60f8      	str	r0, [r7, #12]
 8002528:	60b9      	str	r1, [r7, #8]
 800252a:	607a      	str	r2, [r7, #4]
 800252c:	001a      	movs	r2, r3
 800252e:	1cbb      	adds	r3, r7, #2
 8002530:	801a      	strh	r2, [r3, #0]
  uint32_t             spi_cr1;
  uint32_t             spi_cr2;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8002532:	2301      	movs	r3, #1
 8002534:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8002536:	2323      	movs	r3, #35	; 0x23
 8002538:	18fb      	adds	r3, r7, r3
 800253a:	2200      	movs	r2, #0
 800253c:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800253e:	68fb      	ldr	r3, [r7, #12]
 8002540:	225c      	movs	r2, #92	; 0x5c
 8002542:	5c9b      	ldrb	r3, [r3, r2]
 8002544:	2b01      	cmp	r3, #1
 8002546:	d101      	bne.n	800254c <HAL_SPI_TransmitReceive+0x2c>
 8002548:	2302      	movs	r3, #2
 800254a:	e1b6      	b.n	80028ba <HAL_SPI_TransmitReceive+0x39a>
 800254c:	68fb      	ldr	r3, [r7, #12]
 800254e:	225c      	movs	r2, #92	; 0x5c
 8002550:	2101      	movs	r1, #1
 8002552:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002554:	f7fe fdb2 	bl	80010bc <HAL_GetTick>
 8002558:	0003      	movs	r3, r0
 800255a:	61fb      	str	r3, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800255c:	201b      	movs	r0, #27
 800255e:	183b      	adds	r3, r7, r0
 8002560:	68fa      	ldr	r2, [r7, #12]
 8002562:	215d      	movs	r1, #93	; 0x5d
 8002564:	5c52      	ldrb	r2, [r2, r1]
 8002566:	701a      	strb	r2, [r3, #0]
  tmp_mode            = hspi->Init.Mode;
 8002568:	68fb      	ldr	r3, [r7, #12]
 800256a:	685b      	ldr	r3, [r3, #4]
 800256c:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 800256e:	2312      	movs	r3, #18
 8002570:	18fb      	adds	r3, r7, r3
 8002572:	1cba      	adds	r2, r7, #2
 8002574:	8812      	ldrh	r2, [r2, #0]
 8002576:	801a      	strh	r2, [r3, #0]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8002578:	183b      	adds	r3, r7, r0
 800257a:	781b      	ldrb	r3, [r3, #0]
 800257c:	2b01      	cmp	r3, #1
 800257e:	d012      	beq.n	80025a6 <HAL_SPI_TransmitReceive+0x86>
 8002580:	697a      	ldr	r2, [r7, #20]
 8002582:	2382      	movs	r3, #130	; 0x82
 8002584:	005b      	lsls	r3, r3, #1
 8002586:	429a      	cmp	r2, r3
 8002588:	d108      	bne.n	800259c <HAL_SPI_TransmitReceive+0x7c>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800258a:	68fb      	ldr	r3, [r7, #12]
 800258c:	689b      	ldr	r3, [r3, #8]
 800258e:	2b00      	cmp	r3, #0
 8002590:	d104      	bne.n	800259c <HAL_SPI_TransmitReceive+0x7c>
 8002592:	231b      	movs	r3, #27
 8002594:	18fb      	adds	r3, r7, r3
 8002596:	781b      	ldrb	r3, [r3, #0]
 8002598:	2b04      	cmp	r3, #4
 800259a:	d004      	beq.n	80025a6 <HAL_SPI_TransmitReceive+0x86>
  {
    errorcode = HAL_BUSY;
 800259c:	2323      	movs	r3, #35	; 0x23
 800259e:	18fb      	adds	r3, r7, r3
 80025a0:	2202      	movs	r2, #2
 80025a2:	701a      	strb	r2, [r3, #0]
    goto error;
 80025a4:	e17e      	b.n	80028a4 <HAL_SPI_TransmitReceive+0x384>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80025a6:	68bb      	ldr	r3, [r7, #8]
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	d006      	beq.n	80025ba <HAL_SPI_TransmitReceive+0x9a>
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d003      	beq.n	80025ba <HAL_SPI_TransmitReceive+0x9a>
 80025b2:	1cbb      	adds	r3, r7, #2
 80025b4:	881b      	ldrh	r3, [r3, #0]
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d104      	bne.n	80025c4 <HAL_SPI_TransmitReceive+0xa4>
  {
    errorcode = HAL_ERROR;
 80025ba:	2323      	movs	r3, #35	; 0x23
 80025bc:	18fb      	adds	r3, r7, r3
 80025be:	2201      	movs	r2, #1
 80025c0:	701a      	strb	r2, [r3, #0]
    goto error;
 80025c2:	e16f      	b.n	80028a4 <HAL_SPI_TransmitReceive+0x384>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	225d      	movs	r2, #93	; 0x5d
 80025c8:	5c9b      	ldrb	r3, [r3, r2]
 80025ca:	b2db      	uxtb	r3, r3
 80025cc:	2b04      	cmp	r3, #4
 80025ce:	d003      	beq.n	80025d8 <HAL_SPI_TransmitReceive+0xb8>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80025d0:	68fb      	ldr	r3, [r7, #12]
 80025d2:	225d      	movs	r2, #93	; 0x5d
 80025d4:	2105      	movs	r1, #5
 80025d6:	5499      	strb	r1, [r3, r2]
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80025d8:	68fb      	ldr	r3, [r7, #12]
 80025da:	2200      	movs	r2, #0
 80025dc:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80025de:	68fb      	ldr	r3, [r7, #12]
 80025e0:	687a      	ldr	r2, [r7, #4]
 80025e2:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	1cba      	adds	r2, r7, #2
 80025e8:	2146      	movs	r1, #70	; 0x46
 80025ea:	8812      	ldrh	r2, [r2, #0]
 80025ec:	525a      	strh	r2, [r3, r1]
  hspi->RxXferSize  = Size;
 80025ee:	68fb      	ldr	r3, [r7, #12]
 80025f0:	1cba      	adds	r2, r7, #2
 80025f2:	2144      	movs	r1, #68	; 0x44
 80025f4:	8812      	ldrh	r2, [r2, #0]
 80025f6:	525a      	strh	r2, [r3, r1]
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80025f8:	68fb      	ldr	r3, [r7, #12]
 80025fa:	68ba      	ldr	r2, [r7, #8]
 80025fc:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 80025fe:	68fb      	ldr	r3, [r7, #12]
 8002600:	1cba      	adds	r2, r7, #2
 8002602:	8812      	ldrh	r2, [r2, #0]
 8002604:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8002606:	68fb      	ldr	r3, [r7, #12]
 8002608:	1cba      	adds	r2, r7, #2
 800260a:	8812      	ldrh	r2, [r2, #0]
 800260c:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800260e:	68fb      	ldr	r3, [r7, #12]
 8002610:	2200      	movs	r2, #0
 8002612:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	2200      	movs	r2, #0
 8002618:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800261a:	68fb      	ldr	r3, [r7, #12]
 800261c:	68da      	ldr	r2, [r3, #12]
 800261e:	23e0      	movs	r3, #224	; 0xe0
 8002620:	00db      	lsls	r3, r3, #3
 8002622:	429a      	cmp	r2, r3
 8002624:	d908      	bls.n	8002638 <HAL_SPI_TransmitReceive+0x118>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8002626:	68fb      	ldr	r3, [r7, #12]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	685a      	ldr	r2, [r3, #4]
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	49a4      	ldr	r1, [pc, #656]	; (80028c4 <HAL_SPI_TransmitReceive+0x3a4>)
 8002632:	400a      	ands	r2, r1
 8002634:	605a      	str	r2, [r3, #4]
 8002636:	e008      	b.n	800264a <HAL_SPI_TransmitReceive+0x12a>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8002638:	68fb      	ldr	r3, [r7, #12]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	685a      	ldr	r2, [r3, #4]
 800263e:	68fb      	ldr	r3, [r7, #12]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	2180      	movs	r1, #128	; 0x80
 8002644:	0149      	lsls	r1, r1, #5
 8002646:	430a      	orrs	r2, r1
 8002648:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800264a:	68fb      	ldr	r3, [r7, #12]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	2240      	movs	r2, #64	; 0x40
 8002652:	4013      	ands	r3, r2
 8002654:	2b40      	cmp	r3, #64	; 0x40
 8002656:	d007      	beq.n	8002668 <HAL_SPI_TransmitReceive+0x148>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002658:	68fb      	ldr	r3, [r7, #12]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	681a      	ldr	r2, [r3, #0]
 800265e:	68fb      	ldr	r3, [r7, #12]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	2140      	movs	r1, #64	; 0x40
 8002664:	430a      	orrs	r2, r1
 8002666:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002668:	68fb      	ldr	r3, [r7, #12]
 800266a:	68da      	ldr	r2, [r3, #12]
 800266c:	23e0      	movs	r3, #224	; 0xe0
 800266e:	00db      	lsls	r3, r3, #3
 8002670:	429a      	cmp	r2, r3
 8002672:	d800      	bhi.n	8002676 <HAL_SPI_TransmitReceive+0x156>
 8002674:	e07f      	b.n	8002776 <HAL_SPI_TransmitReceive+0x256>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002676:	68fb      	ldr	r3, [r7, #12]
 8002678:	685b      	ldr	r3, [r3, #4]
 800267a:	2b00      	cmp	r3, #0
 800267c:	d005      	beq.n	800268a <HAL_SPI_TransmitReceive+0x16a>
 800267e:	2312      	movs	r3, #18
 8002680:	18fb      	adds	r3, r7, r3
 8002682:	881b      	ldrh	r3, [r3, #0]
 8002684:	2b01      	cmp	r3, #1
 8002686:	d000      	beq.n	800268a <HAL_SPI_TransmitReceive+0x16a>
 8002688:	e069      	b.n	800275e <HAL_SPI_TransmitReceive+0x23e>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800268a:	68fb      	ldr	r3, [r7, #12]
 800268c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800268e:	881a      	ldrh	r2, [r3, #0]
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002696:	68fb      	ldr	r3, [r7, #12]
 8002698:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800269a:	1c9a      	adds	r2, r3, #2
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 80026a0:	68fb      	ldr	r3, [r7, #12]
 80026a2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80026a4:	b29b      	uxth	r3, r3
 80026a6:	3b01      	subs	r3, #1
 80026a8:	b29a      	uxth	r2, r3
 80026aa:	68fb      	ldr	r3, [r7, #12]
 80026ac:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80026ae:	e056      	b.n	800275e <HAL_SPI_TransmitReceive+0x23e>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80026b0:	68fb      	ldr	r3, [r7, #12]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	689b      	ldr	r3, [r3, #8]
 80026b6:	2202      	movs	r2, #2
 80026b8:	4013      	ands	r3, r2
 80026ba:	2b02      	cmp	r3, #2
 80026bc:	d11b      	bne.n	80026f6 <HAL_SPI_TransmitReceive+0x1d6>
 80026be:	68fb      	ldr	r3, [r7, #12]
 80026c0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80026c2:	b29b      	uxth	r3, r3
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	d016      	beq.n	80026f6 <HAL_SPI_TransmitReceive+0x1d6>
 80026c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026ca:	2b01      	cmp	r3, #1
 80026cc:	d113      	bne.n	80026f6 <HAL_SPI_TransmitReceive+0x1d6>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80026ce:	68fb      	ldr	r3, [r7, #12]
 80026d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80026d2:	881a      	ldrh	r2, [r3, #0]
 80026d4:	68fb      	ldr	r3, [r7, #12]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80026da:	68fb      	ldr	r3, [r7, #12]
 80026dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80026de:	1c9a      	adds	r2, r3, #2
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80026e8:	b29b      	uxth	r3, r3
 80026ea:	3b01      	subs	r3, #1
 80026ec:	b29a      	uxth	r2, r3
 80026ee:	68fb      	ldr	r3, [r7, #12]
 80026f0:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80026f2:	2300      	movs	r3, #0
 80026f4:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80026f6:	68fb      	ldr	r3, [r7, #12]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	689b      	ldr	r3, [r3, #8]
 80026fc:	2201      	movs	r2, #1
 80026fe:	4013      	ands	r3, r2
 8002700:	2b01      	cmp	r3, #1
 8002702:	d11c      	bne.n	800273e <HAL_SPI_TransmitReceive+0x21e>
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	2246      	movs	r2, #70	; 0x46
 8002708:	5a9b      	ldrh	r3, [r3, r2]
 800270a:	b29b      	uxth	r3, r3
 800270c:	2b00      	cmp	r3, #0
 800270e:	d016      	beq.n	800273e <HAL_SPI_TransmitReceive+0x21e>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002710:	68fb      	ldr	r3, [r7, #12]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	68da      	ldr	r2, [r3, #12]
 8002716:	68fb      	ldr	r3, [r7, #12]
 8002718:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800271a:	b292      	uxth	r2, r2
 800271c:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800271e:	68fb      	ldr	r3, [r7, #12]
 8002720:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002722:	1c9a      	adds	r2, r3, #2
 8002724:	68fb      	ldr	r3, [r7, #12]
 8002726:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8002728:	68fb      	ldr	r3, [r7, #12]
 800272a:	2246      	movs	r2, #70	; 0x46
 800272c:	5a9b      	ldrh	r3, [r3, r2]
 800272e:	b29b      	uxth	r3, r3
 8002730:	3b01      	subs	r3, #1
 8002732:	b299      	uxth	r1, r3
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	2246      	movs	r2, #70	; 0x46
 8002738:	5299      	strh	r1, [r3, r2]
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800273a:	2301      	movs	r3, #1
 800273c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800273e:	f7fe fcbd 	bl	80010bc <HAL_GetTick>
 8002742:	0002      	movs	r2, r0
 8002744:	69fb      	ldr	r3, [r7, #28]
 8002746:	1ad3      	subs	r3, r2, r3
 8002748:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800274a:	429a      	cmp	r2, r3
 800274c:	d807      	bhi.n	800275e <HAL_SPI_TransmitReceive+0x23e>
 800274e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002750:	3301      	adds	r3, #1
 8002752:	d004      	beq.n	800275e <HAL_SPI_TransmitReceive+0x23e>
      {
        errorcode = HAL_TIMEOUT;
 8002754:	2323      	movs	r3, #35	; 0x23
 8002756:	18fb      	adds	r3, r7, r3
 8002758:	2203      	movs	r2, #3
 800275a:	701a      	strb	r2, [r3, #0]
        goto error;
 800275c:	e0a2      	b.n	80028a4 <HAL_SPI_TransmitReceive+0x384>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800275e:	68fb      	ldr	r3, [r7, #12]
 8002760:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002762:	b29b      	uxth	r3, r3
 8002764:	2b00      	cmp	r3, #0
 8002766:	d1a3      	bne.n	80026b0 <HAL_SPI_TransmitReceive+0x190>
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	2246      	movs	r2, #70	; 0x46
 800276c:	5a9b      	ldrh	r3, [r3, r2]
 800276e:	b29b      	uxth	r3, r3
 8002770:	2b00      	cmp	r3, #0
 8002772:	d19d      	bne.n	80026b0 <HAL_SPI_TransmitReceive+0x190>
 8002774:	e085      	b.n	8002882 <HAL_SPI_TransmitReceive+0x362>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002776:	68fb      	ldr	r3, [r7, #12]
 8002778:	685b      	ldr	r3, [r3, #4]
 800277a:	2b00      	cmp	r3, #0
 800277c:	d005      	beq.n	800278a <HAL_SPI_TransmitReceive+0x26a>
 800277e:	2312      	movs	r3, #18
 8002780:	18fb      	adds	r3, r7, r3
 8002782:	881b      	ldrh	r3, [r3, #0]
 8002784:	2b01      	cmp	r3, #1
 8002786:	d000      	beq.n	800278a <HAL_SPI_TransmitReceive+0x26a>
 8002788:	e070      	b.n	800286c <HAL_SPI_TransmitReceive+0x34c>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800278a:	68fb      	ldr	r3, [r7, #12]
 800278c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800278e:	68fb      	ldr	r3, [r7, #12]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	330c      	adds	r3, #12
 8002794:	7812      	ldrb	r2, [r2, #0]
 8002796:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002798:	68fb      	ldr	r3, [r7, #12]
 800279a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800279c:	1c5a      	adds	r2, r3, #1
 800279e:	68fb      	ldr	r3, [r7, #12]
 80027a0:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 80027a2:	68fb      	ldr	r3, [r7, #12]
 80027a4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80027a6:	b29b      	uxth	r3, r3
 80027a8:	3b01      	subs	r3, #1
 80027aa:	b29a      	uxth	r2, r3
 80027ac:	68fb      	ldr	r3, [r7, #12]
 80027ae:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80027b0:	e05c      	b.n	800286c <HAL_SPI_TransmitReceive+0x34c>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80027b2:	68fb      	ldr	r3, [r7, #12]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	689b      	ldr	r3, [r3, #8]
 80027b8:	2202      	movs	r2, #2
 80027ba:	4013      	ands	r3, r2
 80027bc:	2b02      	cmp	r3, #2
 80027be:	d11c      	bne.n	80027fa <HAL_SPI_TransmitReceive+0x2da>
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80027c4:	b29b      	uxth	r3, r3
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d017      	beq.n	80027fa <HAL_SPI_TransmitReceive+0x2da>
 80027ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027cc:	2b01      	cmp	r3, #1
 80027ce:	d114      	bne.n	80027fa <HAL_SPI_TransmitReceive+0x2da>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80027d0:	68fb      	ldr	r3, [r7, #12]
 80027d2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	330c      	adds	r3, #12
 80027da:	7812      	ldrb	r2, [r2, #0]
 80027dc:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80027de:	68fb      	ldr	r3, [r7, #12]
 80027e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80027e2:	1c5a      	adds	r2, r3, #1
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80027ec:	b29b      	uxth	r3, r3
 80027ee:	3b01      	subs	r3, #1
 80027f0:	b29a      	uxth	r2, r3
 80027f2:	68fb      	ldr	r3, [r7, #12]
 80027f4:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80027f6:	2300      	movs	r3, #0
 80027f8:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80027fa:	68fb      	ldr	r3, [r7, #12]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	689b      	ldr	r3, [r3, #8]
 8002800:	2201      	movs	r2, #1
 8002802:	4013      	ands	r3, r2
 8002804:	2b01      	cmp	r3, #1
 8002806:	d11e      	bne.n	8002846 <HAL_SPI_TransmitReceive+0x326>
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	2246      	movs	r2, #70	; 0x46
 800280c:	5a9b      	ldrh	r3, [r3, r2]
 800280e:	b29b      	uxth	r3, r3
 8002810:	2b00      	cmp	r3, #0
 8002812:	d018      	beq.n	8002846 <HAL_SPI_TransmitReceive+0x326>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8002814:	68fb      	ldr	r3, [r7, #12]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	330c      	adds	r3, #12
 800281a:	001a      	movs	r2, r3
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002820:	7812      	ldrb	r2, [r2, #0]
 8002822:	b2d2      	uxtb	r2, r2
 8002824:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8002826:	68fb      	ldr	r3, [r7, #12]
 8002828:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800282a:	1c5a      	adds	r2, r3, #1
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8002830:	68fb      	ldr	r3, [r7, #12]
 8002832:	2246      	movs	r2, #70	; 0x46
 8002834:	5a9b      	ldrh	r3, [r3, r2]
 8002836:	b29b      	uxth	r3, r3
 8002838:	3b01      	subs	r3, #1
 800283a:	b299      	uxth	r1, r3
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	2246      	movs	r2, #70	; 0x46
 8002840:	5299      	strh	r1, [r3, r2]
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002842:	2301      	movs	r3, #1
 8002844:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8002846:	f7fe fc39 	bl	80010bc <HAL_GetTick>
 800284a:	0002      	movs	r2, r0
 800284c:	69fb      	ldr	r3, [r7, #28]
 800284e:	1ad3      	subs	r3, r2, r3
 8002850:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002852:	429a      	cmp	r2, r3
 8002854:	d802      	bhi.n	800285c <HAL_SPI_TransmitReceive+0x33c>
 8002856:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002858:	3301      	adds	r3, #1
 800285a:	d102      	bne.n	8002862 <HAL_SPI_TransmitReceive+0x342>
 800285c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800285e:	2b00      	cmp	r3, #0
 8002860:	d104      	bne.n	800286c <HAL_SPI_TransmitReceive+0x34c>
      {
        errorcode = HAL_TIMEOUT;
 8002862:	2323      	movs	r3, #35	; 0x23
 8002864:	18fb      	adds	r3, r7, r3
 8002866:	2203      	movs	r2, #3
 8002868:	701a      	strb	r2, [r3, #0]
        goto error;
 800286a:	e01b      	b.n	80028a4 <HAL_SPI_TransmitReceive+0x384>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800286c:	68fb      	ldr	r3, [r7, #12]
 800286e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002870:	b29b      	uxth	r3, r3
 8002872:	2b00      	cmp	r3, #0
 8002874:	d19d      	bne.n	80027b2 <HAL_SPI_TransmitReceive+0x292>
 8002876:	68fb      	ldr	r3, [r7, #12]
 8002878:	2246      	movs	r2, #70	; 0x46
 800287a:	5a9b      	ldrh	r3, [r3, r2]
 800287c:	b29b      	uxth	r3, r3
 800287e:	2b00      	cmp	r3, #0
 8002880:	d197      	bne.n	80027b2 <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002882:	69fa      	ldr	r2, [r7, #28]
 8002884:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002886:	68fb      	ldr	r3, [r7, #12]
 8002888:	0018      	movs	r0, r3
 800288a:	f000 f99f 	bl	8002bcc <SPI_EndRxTxTransaction>
 800288e:	1e03      	subs	r3, r0, #0
 8002890:	d007      	beq.n	80028a2 <HAL_SPI_TransmitReceive+0x382>
  {
    errorcode = HAL_ERROR;
 8002892:	2323      	movs	r3, #35	; 0x23
 8002894:	18fb      	adds	r3, r7, r3
 8002896:	2201      	movs	r2, #1
 8002898:	701a      	strb	r2, [r3, #0]
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800289a:	68fb      	ldr	r3, [r7, #12]
 800289c:	2220      	movs	r2, #32
 800289e:	661a      	str	r2, [r3, #96]	; 0x60
 80028a0:	e000      	b.n	80028a4 <HAL_SPI_TransmitReceive+0x384>
  }

error :
 80028a2:	46c0      	nop			; (mov r8, r8)
  hspi->State = HAL_SPI_STATE_READY;
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	225d      	movs	r2, #93	; 0x5d
 80028a8:	2101      	movs	r1, #1
 80028aa:	5499      	strb	r1, [r3, r2]
  __HAL_UNLOCK(hspi);
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	225c      	movs	r2, #92	; 0x5c
 80028b0:	2100      	movs	r1, #0
 80028b2:	5499      	strb	r1, [r3, r2]
  return errorcode;
 80028b4:	2323      	movs	r3, #35	; 0x23
 80028b6:	18fb      	adds	r3, r7, r3
 80028b8:	781b      	ldrb	r3, [r3, #0]
}
 80028ba:	0018      	movs	r0, r3
 80028bc:	46bd      	mov	sp, r7
 80028be:	b00a      	add	sp, #40	; 0x28
 80028c0:	bd80      	pop	{r7, pc}
 80028c2:	46c0      	nop			; (mov r8, r8)
 80028c4:	ffffefff 	.word	0xffffefff

080028c8 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80028c8:	b580      	push	{r7, lr}
 80028ca:	b088      	sub	sp, #32
 80028cc:	af00      	add	r7, sp, #0
 80028ce:	60f8      	str	r0, [r7, #12]
 80028d0:	60b9      	str	r1, [r7, #8]
 80028d2:	603b      	str	r3, [r7, #0]
 80028d4:	1dfb      	adds	r3, r7, #7
 80028d6:	701a      	strb	r2, [r3, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80028d8:	f7fe fbf0 	bl	80010bc <HAL_GetTick>
 80028dc:	0002      	movs	r2, r0
 80028de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80028e0:	1a9b      	subs	r3, r3, r2
 80028e2:	683a      	ldr	r2, [r7, #0]
 80028e4:	18d3      	adds	r3, r2, r3
 80028e6:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80028e8:	f7fe fbe8 	bl	80010bc <HAL_GetTick>
 80028ec:	0003      	movs	r3, r0
 80028ee:	61bb      	str	r3, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80028f0:	4b3a      	ldr	r3, [pc, #232]	; (80029dc <SPI_WaitFlagStateUntilTimeout+0x114>)
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	015b      	lsls	r3, r3, #5
 80028f6:	0d1b      	lsrs	r3, r3, #20
 80028f8:	69fa      	ldr	r2, [r7, #28]
 80028fa:	4353      	muls	r3, r2
 80028fc:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80028fe:	e058      	b.n	80029b2 <SPI_WaitFlagStateUntilTimeout+0xea>
  {
    if (Timeout != HAL_MAX_DELAY)
 8002900:	683b      	ldr	r3, [r7, #0]
 8002902:	3301      	adds	r3, #1
 8002904:	d055      	beq.n	80029b2 <SPI_WaitFlagStateUntilTimeout+0xea>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8002906:	f7fe fbd9 	bl	80010bc <HAL_GetTick>
 800290a:	0002      	movs	r2, r0
 800290c:	69bb      	ldr	r3, [r7, #24]
 800290e:	1ad3      	subs	r3, r2, r3
 8002910:	69fa      	ldr	r2, [r7, #28]
 8002912:	429a      	cmp	r2, r3
 8002914:	d902      	bls.n	800291c <SPI_WaitFlagStateUntilTimeout+0x54>
 8002916:	69fb      	ldr	r3, [r7, #28]
 8002918:	2b00      	cmp	r3, #0
 800291a:	d142      	bne.n	80029a2 <SPI_WaitFlagStateUntilTimeout+0xda>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	685a      	ldr	r2, [r3, #4]
 8002922:	68fb      	ldr	r3, [r7, #12]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	21e0      	movs	r1, #224	; 0xe0
 8002928:	438a      	bics	r2, r1
 800292a:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	685a      	ldr	r2, [r3, #4]
 8002930:	2382      	movs	r3, #130	; 0x82
 8002932:	005b      	lsls	r3, r3, #1
 8002934:	429a      	cmp	r2, r3
 8002936:	d113      	bne.n	8002960 <SPI_WaitFlagStateUntilTimeout+0x98>
 8002938:	68fb      	ldr	r3, [r7, #12]
 800293a:	689a      	ldr	r2, [r3, #8]
 800293c:	2380      	movs	r3, #128	; 0x80
 800293e:	021b      	lsls	r3, r3, #8
 8002940:	429a      	cmp	r2, r3
 8002942:	d005      	beq.n	8002950 <SPI_WaitFlagStateUntilTimeout+0x88>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	689a      	ldr	r2, [r3, #8]
 8002948:	2380      	movs	r3, #128	; 0x80
 800294a:	00db      	lsls	r3, r3, #3
 800294c:	429a      	cmp	r2, r3
 800294e:	d107      	bne.n	8002960 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	681a      	ldr	r2, [r3, #0]
 8002956:	68fb      	ldr	r3, [r7, #12]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	2140      	movs	r1, #64	; 0x40
 800295c:	438a      	bics	r2, r1
 800295e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002964:	2380      	movs	r3, #128	; 0x80
 8002966:	019b      	lsls	r3, r3, #6
 8002968:	429a      	cmp	r2, r3
 800296a:	d110      	bne.n	800298e <SPI_WaitFlagStateUntilTimeout+0xc6>
        {
          SPI_RESET_CRC(hspi);
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	681a      	ldr	r2, [r3, #0]
 8002972:	68fb      	ldr	r3, [r7, #12]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	491a      	ldr	r1, [pc, #104]	; (80029e0 <SPI_WaitFlagStateUntilTimeout+0x118>)
 8002978:	400a      	ands	r2, r1
 800297a:	601a      	str	r2, [r3, #0]
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	681a      	ldr	r2, [r3, #0]
 8002982:	68fb      	ldr	r3, [r7, #12]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	2180      	movs	r1, #128	; 0x80
 8002988:	0189      	lsls	r1, r1, #6
 800298a:	430a      	orrs	r2, r1
 800298c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800298e:	68fb      	ldr	r3, [r7, #12]
 8002990:	225d      	movs	r2, #93	; 0x5d
 8002992:	2101      	movs	r1, #1
 8002994:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002996:	68fb      	ldr	r3, [r7, #12]
 8002998:	225c      	movs	r2, #92	; 0x5c
 800299a:	2100      	movs	r1, #0
 800299c:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 800299e:	2303      	movs	r3, #3
 80029a0:	e017      	b.n	80029d2 <SPI_WaitFlagStateUntilTimeout+0x10a>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 80029a2:	697b      	ldr	r3, [r7, #20]
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	d101      	bne.n	80029ac <SPI_WaitFlagStateUntilTimeout+0xe4>
      {
        tmp_timeout = 0U;
 80029a8:	2300      	movs	r3, #0
 80029aa:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80029ac:	697b      	ldr	r3, [r7, #20]
 80029ae:	3b01      	subs	r3, #1
 80029b0:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80029b2:	68fb      	ldr	r3, [r7, #12]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	689b      	ldr	r3, [r3, #8]
 80029b8:	68ba      	ldr	r2, [r7, #8]
 80029ba:	4013      	ands	r3, r2
 80029bc:	68ba      	ldr	r2, [r7, #8]
 80029be:	1ad3      	subs	r3, r2, r3
 80029c0:	425a      	negs	r2, r3
 80029c2:	4153      	adcs	r3, r2
 80029c4:	b2db      	uxtb	r3, r3
 80029c6:	001a      	movs	r2, r3
 80029c8:	1dfb      	adds	r3, r7, #7
 80029ca:	781b      	ldrb	r3, [r3, #0]
 80029cc:	429a      	cmp	r2, r3
 80029ce:	d197      	bne.n	8002900 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80029d0:	2300      	movs	r3, #0
}
 80029d2:	0018      	movs	r0, r3
 80029d4:	46bd      	mov	sp, r7
 80029d6:	b008      	add	sp, #32
 80029d8:	bd80      	pop	{r7, pc}
 80029da:	46c0      	nop			; (mov r8, r8)
 80029dc:	20000000 	.word	0x20000000
 80029e0:	ffffdfff 	.word	0xffffdfff

080029e4 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80029e4:	b580      	push	{r7, lr}
 80029e6:	b088      	sub	sp, #32
 80029e8:	af00      	add	r7, sp, #0
 80029ea:	60f8      	str	r0, [r7, #12]
 80029ec:	60b9      	str	r1, [r7, #8]
 80029ee:	607a      	str	r2, [r7, #4]
 80029f0:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 80029f2:	f7fe fb63 	bl	80010bc <HAL_GetTick>
 80029f6:	0002      	movs	r2, r0
 80029f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80029fa:	1a9b      	subs	r3, r3, r2
 80029fc:	683a      	ldr	r2, [r7, #0]
 80029fe:	18d3      	adds	r3, r2, r3
 8002a00:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8002a02:	f7fe fb5b 	bl	80010bc <HAL_GetTick>
 8002a06:	0003      	movs	r3, r0
 8002a08:	61bb      	str	r3, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8002a0a:	4b3f      	ldr	r3, [pc, #252]	; (8002b08 <SPI_WaitFifoStateUntilTimeout+0x124>)
 8002a0c:	681a      	ldr	r2, [r3, #0]
 8002a0e:	0013      	movs	r3, r2
 8002a10:	009b      	lsls	r3, r3, #2
 8002a12:	189b      	adds	r3, r3, r2
 8002a14:	00da      	lsls	r2, r3, #3
 8002a16:	1ad3      	subs	r3, r2, r3
 8002a18:	0d1b      	lsrs	r3, r3, #20
 8002a1a:	69fa      	ldr	r2, [r7, #28]
 8002a1c:	4353      	muls	r3, r2
 8002a1e:	617b      	str	r3, [r7, #20]

  while ((hspi->Instance->SR & Fifo) != State)
 8002a20:	e064      	b.n	8002aec <SPI_WaitFifoStateUntilTimeout+0x108>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8002a22:	68ba      	ldr	r2, [r7, #8]
 8002a24:	23c0      	movs	r3, #192	; 0xc0
 8002a26:	00db      	lsls	r3, r3, #3
 8002a28:	429a      	cmp	r2, r3
 8002a2a:	d106      	bne.n	8002a3a <SPI_WaitFifoStateUntilTimeout+0x56>
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d103      	bne.n	8002a3a <SPI_WaitFifoStateUntilTimeout+0x56>
    {
      /* Read 8bit CRC to flush Data Register */
      READ_REG(*((__IO uint8_t *)&hspi->Instance->DR));
 8002a32:	68fb      	ldr	r3, [r7, #12]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	330c      	adds	r3, #12
 8002a38:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 8002a3a:	683b      	ldr	r3, [r7, #0]
 8002a3c:	3301      	adds	r3, #1
 8002a3e:	d055      	beq.n	8002aec <SPI_WaitFifoStateUntilTimeout+0x108>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8002a40:	f7fe fb3c 	bl	80010bc <HAL_GetTick>
 8002a44:	0002      	movs	r2, r0
 8002a46:	69bb      	ldr	r3, [r7, #24]
 8002a48:	1ad3      	subs	r3, r2, r3
 8002a4a:	69fa      	ldr	r2, [r7, #28]
 8002a4c:	429a      	cmp	r2, r3
 8002a4e:	d902      	bls.n	8002a56 <SPI_WaitFifoStateUntilTimeout+0x72>
 8002a50:	69fb      	ldr	r3, [r7, #28]
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d142      	bne.n	8002adc <SPI_WaitFifoStateUntilTimeout+0xf8>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002a56:	68fb      	ldr	r3, [r7, #12]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	685a      	ldr	r2, [r3, #4]
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	21e0      	movs	r1, #224	; 0xe0
 8002a62:	438a      	bics	r2, r1
 8002a64:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002a66:	68fb      	ldr	r3, [r7, #12]
 8002a68:	685a      	ldr	r2, [r3, #4]
 8002a6a:	2382      	movs	r3, #130	; 0x82
 8002a6c:	005b      	lsls	r3, r3, #1
 8002a6e:	429a      	cmp	r2, r3
 8002a70:	d113      	bne.n	8002a9a <SPI_WaitFifoStateUntilTimeout+0xb6>
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	689a      	ldr	r2, [r3, #8]
 8002a76:	2380      	movs	r3, #128	; 0x80
 8002a78:	021b      	lsls	r3, r3, #8
 8002a7a:	429a      	cmp	r2, r3
 8002a7c:	d005      	beq.n	8002a8a <SPI_WaitFifoStateUntilTimeout+0xa6>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002a7e:	68fb      	ldr	r3, [r7, #12]
 8002a80:	689a      	ldr	r2, [r3, #8]
 8002a82:	2380      	movs	r3, #128	; 0x80
 8002a84:	00db      	lsls	r3, r3, #3
 8002a86:	429a      	cmp	r2, r3
 8002a88:	d107      	bne.n	8002a9a <SPI_WaitFifoStateUntilTimeout+0xb6>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	681a      	ldr	r2, [r3, #0]
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	2140      	movs	r1, #64	; 0x40
 8002a96:	438a      	bics	r2, r1
 8002a98:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002a9a:	68fb      	ldr	r3, [r7, #12]
 8002a9c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002a9e:	2380      	movs	r3, #128	; 0x80
 8002aa0:	019b      	lsls	r3, r3, #6
 8002aa2:	429a      	cmp	r2, r3
 8002aa4:	d110      	bne.n	8002ac8 <SPI_WaitFifoStateUntilTimeout+0xe4>
        {
          SPI_RESET_CRC(hspi);
 8002aa6:	68fb      	ldr	r3, [r7, #12]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	681a      	ldr	r2, [r3, #0]
 8002aac:	68fb      	ldr	r3, [r7, #12]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	4916      	ldr	r1, [pc, #88]	; (8002b0c <SPI_WaitFifoStateUntilTimeout+0x128>)
 8002ab2:	400a      	ands	r2, r1
 8002ab4:	601a      	str	r2, [r3, #0]
 8002ab6:	68fb      	ldr	r3, [r7, #12]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	681a      	ldr	r2, [r3, #0]
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	2180      	movs	r1, #128	; 0x80
 8002ac2:	0189      	lsls	r1, r1, #6
 8002ac4:	430a      	orrs	r2, r1
 8002ac6:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	225d      	movs	r2, #93	; 0x5d
 8002acc:	2101      	movs	r1, #1
 8002ace:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	225c      	movs	r2, #92	; 0x5c
 8002ad4:	2100      	movs	r1, #0
 8002ad6:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8002ad8:	2303      	movs	r3, #3
 8002ada:	e010      	b.n	8002afe <SPI_WaitFifoStateUntilTimeout+0x11a>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8002adc:	697b      	ldr	r3, [r7, #20]
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d101      	bne.n	8002ae6 <SPI_WaitFifoStateUntilTimeout+0x102>
      {
        tmp_timeout = 0U;
 8002ae2:	2300      	movs	r3, #0
 8002ae4:	61fb      	str	r3, [r7, #28]
      }      
      count--;
 8002ae6:	697b      	ldr	r3, [r7, #20]
 8002ae8:	3b01      	subs	r3, #1
 8002aea:	617b      	str	r3, [r7, #20]
  while ((hspi->Instance->SR & Fifo) != State)
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	689b      	ldr	r3, [r3, #8]
 8002af2:	68ba      	ldr	r2, [r7, #8]
 8002af4:	4013      	ands	r3, r2
 8002af6:	687a      	ldr	r2, [r7, #4]
 8002af8:	429a      	cmp	r2, r3
 8002afa:	d192      	bne.n	8002a22 <SPI_WaitFifoStateUntilTimeout+0x3e>
    }
  }

  return HAL_OK;
 8002afc:	2300      	movs	r3, #0
}
 8002afe:	0018      	movs	r0, r3
 8002b00:	46bd      	mov	sp, r7
 8002b02:	b008      	add	sp, #32
 8002b04:	bd80      	pop	{r7, pc}
 8002b06:	46c0      	nop			; (mov r8, r8)
 8002b08:	20000000 	.word	0x20000000
 8002b0c:	ffffdfff 	.word	0xffffdfff

08002b10 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8002b10:	b580      	push	{r7, lr}
 8002b12:	b086      	sub	sp, #24
 8002b14:	af02      	add	r7, sp, #8
 8002b16:	60f8      	str	r0, [r7, #12]
 8002b18:	60b9      	str	r1, [r7, #8]
 8002b1a:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	685a      	ldr	r2, [r3, #4]
 8002b20:	2382      	movs	r3, #130	; 0x82
 8002b22:	005b      	lsls	r3, r3, #1
 8002b24:	429a      	cmp	r2, r3
 8002b26:	d113      	bne.n	8002b50 <SPI_EndRxTransaction+0x40>
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	689a      	ldr	r2, [r3, #8]
 8002b2c:	2380      	movs	r3, #128	; 0x80
 8002b2e:	021b      	lsls	r3, r3, #8
 8002b30:	429a      	cmp	r2, r3
 8002b32:	d005      	beq.n	8002b40 <SPI_EndRxTransaction+0x30>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	689a      	ldr	r2, [r3, #8]
 8002b38:	2380      	movs	r3, #128	; 0x80
 8002b3a:	00db      	lsls	r3, r3, #3
 8002b3c:	429a      	cmp	r2, r3
 8002b3e:	d107      	bne.n	8002b50 <SPI_EndRxTransaction+0x40>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	681a      	ldr	r2, [r3, #0]
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	2140      	movs	r1, #64	; 0x40
 8002b4c:	438a      	bics	r2, r1
 8002b4e:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002b50:	68ba      	ldr	r2, [r7, #8]
 8002b52:	68f8      	ldr	r0, [r7, #12]
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	9300      	str	r3, [sp, #0]
 8002b58:	0013      	movs	r3, r2
 8002b5a:	2200      	movs	r2, #0
 8002b5c:	2180      	movs	r1, #128	; 0x80
 8002b5e:	f7ff feb3 	bl	80028c8 <SPI_WaitFlagStateUntilTimeout>
 8002b62:	1e03      	subs	r3, r0, #0
 8002b64:	d007      	beq.n	8002b76 <SPI_EndRxTransaction+0x66>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002b6a:	2220      	movs	r2, #32
 8002b6c:	431a      	orrs	r2, r3
 8002b6e:	68fb      	ldr	r3, [r7, #12]
 8002b70:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8002b72:	2303      	movs	r3, #3
 8002b74:	e026      	b.n	8002bc4 <SPI_EndRxTransaction+0xb4>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	685a      	ldr	r2, [r3, #4]
 8002b7a:	2382      	movs	r3, #130	; 0x82
 8002b7c:	005b      	lsls	r3, r3, #1
 8002b7e:	429a      	cmp	r2, r3
 8002b80:	d11f      	bne.n	8002bc2 <SPI_EndRxTransaction+0xb2>
 8002b82:	68fb      	ldr	r3, [r7, #12]
 8002b84:	689a      	ldr	r2, [r3, #8]
 8002b86:	2380      	movs	r3, #128	; 0x80
 8002b88:	021b      	lsls	r3, r3, #8
 8002b8a:	429a      	cmp	r2, r3
 8002b8c:	d005      	beq.n	8002b9a <SPI_EndRxTransaction+0x8a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	689a      	ldr	r2, [r3, #8]
 8002b92:	2380      	movs	r3, #128	; 0x80
 8002b94:	00db      	lsls	r3, r3, #3
 8002b96:	429a      	cmp	r2, r3
 8002b98:	d113      	bne.n	8002bc2 <SPI_EndRxTransaction+0xb2>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8002b9a:	68ba      	ldr	r2, [r7, #8]
 8002b9c:	23c0      	movs	r3, #192	; 0xc0
 8002b9e:	00d9      	lsls	r1, r3, #3
 8002ba0:	68f8      	ldr	r0, [r7, #12]
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	9300      	str	r3, [sp, #0]
 8002ba6:	0013      	movs	r3, r2
 8002ba8:	2200      	movs	r2, #0
 8002baa:	f7ff ff1b 	bl	80029e4 <SPI_WaitFifoStateUntilTimeout>
 8002bae:	1e03      	subs	r3, r0, #0
 8002bb0:	d007      	beq.n	8002bc2 <SPI_EndRxTransaction+0xb2>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002bb2:	68fb      	ldr	r3, [r7, #12]
 8002bb4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002bb6:	2220      	movs	r2, #32
 8002bb8:	431a      	orrs	r2, r3
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 8002bbe:	2303      	movs	r3, #3
 8002bc0:	e000      	b.n	8002bc4 <SPI_EndRxTransaction+0xb4>
    }
  }
  return HAL_OK;
 8002bc2:	2300      	movs	r3, #0
}
 8002bc4:	0018      	movs	r0, r3
 8002bc6:	46bd      	mov	sp, r7
 8002bc8:	b004      	add	sp, #16
 8002bca:	bd80      	pop	{r7, pc}

08002bcc <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8002bcc:	b580      	push	{r7, lr}
 8002bce:	b086      	sub	sp, #24
 8002bd0:	af02      	add	r7, sp, #8
 8002bd2:	60f8      	str	r0, [r7, #12]
 8002bd4:	60b9      	str	r1, [r7, #8]
 8002bd6:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8002bd8:	68ba      	ldr	r2, [r7, #8]
 8002bda:	23c0      	movs	r3, #192	; 0xc0
 8002bdc:	0159      	lsls	r1, r3, #5
 8002bde:	68f8      	ldr	r0, [r7, #12]
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	9300      	str	r3, [sp, #0]
 8002be4:	0013      	movs	r3, r2
 8002be6:	2200      	movs	r2, #0
 8002be8:	f7ff fefc 	bl	80029e4 <SPI_WaitFifoStateUntilTimeout>
 8002bec:	1e03      	subs	r3, r0, #0
 8002bee:	d007      	beq.n	8002c00 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002bf4:	2220      	movs	r2, #32
 8002bf6:	431a      	orrs	r2, r3
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8002bfc:	2303      	movs	r3, #3
 8002bfe:	e027      	b.n	8002c50 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002c00:	68ba      	ldr	r2, [r7, #8]
 8002c02:	68f8      	ldr	r0, [r7, #12]
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	9300      	str	r3, [sp, #0]
 8002c08:	0013      	movs	r3, r2
 8002c0a:	2200      	movs	r2, #0
 8002c0c:	2180      	movs	r1, #128	; 0x80
 8002c0e:	f7ff fe5b 	bl	80028c8 <SPI_WaitFlagStateUntilTimeout>
 8002c12:	1e03      	subs	r3, r0, #0
 8002c14:	d007      	beq.n	8002c26 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002c16:	68fb      	ldr	r3, [r7, #12]
 8002c18:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002c1a:	2220      	movs	r2, #32
 8002c1c:	431a      	orrs	r2, r3
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8002c22:	2303      	movs	r3, #3
 8002c24:	e014      	b.n	8002c50 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8002c26:	68ba      	ldr	r2, [r7, #8]
 8002c28:	23c0      	movs	r3, #192	; 0xc0
 8002c2a:	00d9      	lsls	r1, r3, #3
 8002c2c:	68f8      	ldr	r0, [r7, #12]
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	9300      	str	r3, [sp, #0]
 8002c32:	0013      	movs	r3, r2
 8002c34:	2200      	movs	r2, #0
 8002c36:	f7ff fed5 	bl	80029e4 <SPI_WaitFifoStateUntilTimeout>
 8002c3a:	1e03      	subs	r3, r0, #0
 8002c3c:	d007      	beq.n	8002c4e <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002c42:	2220      	movs	r2, #32
 8002c44:	431a      	orrs	r2, r3
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8002c4a:	2303      	movs	r3, #3
 8002c4c:	e000      	b.n	8002c50 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8002c4e:	2300      	movs	r3, #0
}
 8002c50:	0018      	movs	r0, r3
 8002c52:	46bd      	mov	sp, r7
 8002c54:	b004      	add	sp, #16
 8002c56:	bd80      	pop	{r7, pc}

08002c58 <__libc_init_array>:
 8002c58:	b570      	push	{r4, r5, r6, lr}
 8002c5a:	2600      	movs	r6, #0
 8002c5c:	4d0c      	ldr	r5, [pc, #48]	; (8002c90 <__libc_init_array+0x38>)
 8002c5e:	4c0d      	ldr	r4, [pc, #52]	; (8002c94 <__libc_init_array+0x3c>)
 8002c60:	1b64      	subs	r4, r4, r5
 8002c62:	10a4      	asrs	r4, r4, #2
 8002c64:	42a6      	cmp	r6, r4
 8002c66:	d109      	bne.n	8002c7c <__libc_init_array+0x24>
 8002c68:	2600      	movs	r6, #0
 8002c6a:	f000 f82b 	bl	8002cc4 <_init>
 8002c6e:	4d0a      	ldr	r5, [pc, #40]	; (8002c98 <__libc_init_array+0x40>)
 8002c70:	4c0a      	ldr	r4, [pc, #40]	; (8002c9c <__libc_init_array+0x44>)
 8002c72:	1b64      	subs	r4, r4, r5
 8002c74:	10a4      	asrs	r4, r4, #2
 8002c76:	42a6      	cmp	r6, r4
 8002c78:	d105      	bne.n	8002c86 <__libc_init_array+0x2e>
 8002c7a:	bd70      	pop	{r4, r5, r6, pc}
 8002c7c:	00b3      	lsls	r3, r6, #2
 8002c7e:	58eb      	ldr	r3, [r5, r3]
 8002c80:	4798      	blx	r3
 8002c82:	3601      	adds	r6, #1
 8002c84:	e7ee      	b.n	8002c64 <__libc_init_array+0xc>
 8002c86:	00b3      	lsls	r3, r6, #2
 8002c88:	58eb      	ldr	r3, [r5, r3]
 8002c8a:	4798      	blx	r3
 8002c8c:	3601      	adds	r6, #1
 8002c8e:	e7f2      	b.n	8002c76 <__libc_init_array+0x1e>
 8002c90:	08002d24 	.word	0x08002d24
 8002c94:	08002d24 	.word	0x08002d24
 8002c98:	08002d24 	.word	0x08002d24
 8002c9c:	08002d28 	.word	0x08002d28

08002ca0 <memcpy>:
 8002ca0:	2300      	movs	r3, #0
 8002ca2:	b510      	push	{r4, lr}
 8002ca4:	429a      	cmp	r2, r3
 8002ca6:	d100      	bne.n	8002caa <memcpy+0xa>
 8002ca8:	bd10      	pop	{r4, pc}
 8002caa:	5ccc      	ldrb	r4, [r1, r3]
 8002cac:	54c4      	strb	r4, [r0, r3]
 8002cae:	3301      	adds	r3, #1
 8002cb0:	e7f8      	b.n	8002ca4 <memcpy+0x4>

08002cb2 <memset>:
 8002cb2:	0003      	movs	r3, r0
 8002cb4:	1812      	adds	r2, r2, r0
 8002cb6:	4293      	cmp	r3, r2
 8002cb8:	d100      	bne.n	8002cbc <memset+0xa>
 8002cba:	4770      	bx	lr
 8002cbc:	7019      	strb	r1, [r3, #0]
 8002cbe:	3301      	adds	r3, #1
 8002cc0:	e7f9      	b.n	8002cb6 <memset+0x4>
	...

08002cc4 <_init>:
 8002cc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002cc6:	46c0      	nop			; (mov r8, r8)
 8002cc8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002cca:	bc08      	pop	{r3}
 8002ccc:	469e      	mov	lr, r3
 8002cce:	4770      	bx	lr

08002cd0 <_fini>:
 8002cd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002cd2:	46c0      	nop			; (mov r8, r8)
 8002cd4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002cd6:	bc08      	pop	{r3}
 8002cd8:	469e      	mov	lr, r3
 8002cda:	4770      	bx	lr
