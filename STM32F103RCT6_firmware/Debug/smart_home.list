
smart_home.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003870  080001e8  080001e8  000101e8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000210  08003a58  08003a58  00013a58  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003c68  08003c68  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  08003c68  08003c68  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003c68  08003c68  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003c68  08003c68  00013c68  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003c6c  08003c6c  00013c6c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08003c70  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000d8  20000070  08003ce0  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000148  08003ce0  00020148  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000928c  00000000  00000000  00020099  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001889  00000000  00000000  00029325  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000988  00000000  00000000  0002abb0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000008c0  00000000  00000000  0002b538  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000195dd  00000000  00000000  0002bdf8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000714a  00000000  00000000  000453d5  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00092815  00000000  00000000  0004c51f  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000ded34  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000293c  00000000  00000000  000dedb0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001e8 <__do_global_dtors_aux>:
 80001e8:	b510      	push	{r4, lr}
 80001ea:	4c05      	ldr	r4, [pc, #20]	; (8000200 <__do_global_dtors_aux+0x18>)
 80001ec:	7823      	ldrb	r3, [r4, #0]
 80001ee:	b933      	cbnz	r3, 80001fe <__do_global_dtors_aux+0x16>
 80001f0:	4b04      	ldr	r3, [pc, #16]	; (8000204 <__do_global_dtors_aux+0x1c>)
 80001f2:	b113      	cbz	r3, 80001fa <__do_global_dtors_aux+0x12>
 80001f4:	4804      	ldr	r0, [pc, #16]	; (8000208 <__do_global_dtors_aux+0x20>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	2301      	movs	r3, #1
 80001fc:	7023      	strb	r3, [r4, #0]
 80001fe:	bd10      	pop	{r4, pc}
 8000200:	20000070 	.word	0x20000070
 8000204:	00000000 	.word	0x00000000
 8000208:	08003a40 	.word	0x08003a40

0800020c <frame_dummy>:
 800020c:	b508      	push	{r3, lr}
 800020e:	4b03      	ldr	r3, [pc, #12]	; (800021c <frame_dummy+0x10>)
 8000210:	b11b      	cbz	r3, 800021a <frame_dummy+0xe>
 8000212:	4903      	ldr	r1, [pc, #12]	; (8000220 <frame_dummy+0x14>)
 8000214:	4803      	ldr	r0, [pc, #12]	; (8000224 <frame_dummy+0x18>)
 8000216:	f3af 8000 	nop.w
 800021a:	bd08      	pop	{r3, pc}
 800021c:	00000000 	.word	0x00000000
 8000220:	20000074 	.word	0x20000074
 8000224:	08003a40 	.word	0x08003a40

08000228 <strlen>:
 8000228:	4603      	mov	r3, r0
 800022a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800022e:	2a00      	cmp	r2, #0
 8000230:	d1fb      	bne.n	800022a <strlen+0x2>
 8000232:	1a18      	subs	r0, r3, r0
 8000234:	3801      	subs	r0, #1
 8000236:	4770      	bx	lr

08000238 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000238:	b590      	push	{r4, r7, lr}
 800023a:	b09f      	sub	sp, #124	; 0x7c
 800023c:	af02      	add	r7, sp, #8


  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800023e:	f001 f961 	bl	8001504 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000242:	f000 fa41 	bl	80006c8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000246:	f000 fadb 	bl	8000800 <MX_GPIO_Init>
  MX_SPI1_Init();
 800024a:	f000 fa79 	bl	8000740 <MX_SPI1_Init>
  MX_USART1_UART_Init();
 800024e:	f000 faad 	bl	80007ac <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  DWT_Init(); // счётчик для микросекундных пауз
 8000252:	f000 fb3b 	bl	80008cc <DWT_Init>

  //const uint64_t pipe0 = 0x787878787878;
  const uint64_t pipe1 = 0xE8E8F0F0E2LL; // адрес первой трубы
 8000256:	a4e5      	add	r4, pc, #916	; (adr r4, 80005ec <main+0x3b4>)
 8000258:	e9d4 3400 	ldrd	r3, r4, [r4]
 800025c:	e9c7 341a 	strd	r3, r4, [r7, #104]	; 0x68
  //const uint64_t pipe2 = 0xE8E8F0F0A2LL;
  //const uint64_t pipe3 = 0xE8E8F0F0D1LL;
  //const uint64_t pipe4 = 0xE8E8F0F0C3LL;
  //const uint64_t pipe5 = 0xE8E8F0F0E7LL;

  uint8_t res = isChipConnected(); // проверяет подключён ли модуль к SPI
 8000260:	f000 fd3a 	bl	8000cd8 <isChipConnected>
 8000264:	4603      	mov	r3, r0
 8000266:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67

  char str[64] = {0,};
 800026a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800026e:	2240      	movs	r2, #64	; 0x40
 8000270:	2100      	movs	r1, #0
 8000272:	4618      	mov	r0, r3
 8000274:	f002 ffbf 	bl	80031f6 <memset>
  snprintf(str, 64, "Connected: %s\n", 1 ? "OK" : "NOT OK");
 8000278:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800027c:	4bc4      	ldr	r3, [pc, #784]	; (8000590 <main+0x358>)
 800027e:	4ac5      	ldr	r2, [pc, #788]	; (8000594 <main+0x35c>)
 8000280:	2140      	movs	r1, #64	; 0x40
 8000282:	f002 ffc1 	bl	8003208 <sniprintf>
  HAL_UART_Transmit(&huart1, (uint8_t*)str, strlen(str), 1000);
 8000286:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800028a:	4618      	mov	r0, r3
 800028c:	f7ff ffcc 	bl	8000228 <strlen>
 8000290:	4603      	mov	r3, r0
 8000292:	b29a      	uxth	r2, r3
 8000294:	f107 0124 	add.w	r1, r7, #36	; 0x24
 8000298:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800029c:	48be      	ldr	r0, [pc, #760]	; (8000598 <main+0x360>)
 800029e:	f002 fe0a 	bl	8002eb6 <HAL_UART_Transmit>

  res = NRF_Init(); // инициализация
 80002a2:	f000 fca3 	bl	8000bec <NRF_Init>
 80002a6:	4603      	mov	r3, r0
 80002a8:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67

  snprintf(str, 64, "Init: %s\n", res > 0 && res < 255 ? "OK" : "NOT OK");
 80002ac:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80002b0:	2b00      	cmp	r3, #0
 80002b2:	d005      	beq.n	80002c0 <main+0x88>
 80002b4:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80002b8:	2bff      	cmp	r3, #255	; 0xff
 80002ba:	d001      	beq.n	80002c0 <main+0x88>
 80002bc:	4bb4      	ldr	r3, [pc, #720]	; (8000590 <main+0x358>)
 80002be:	e000      	b.n	80002c2 <main+0x8a>
 80002c0:	4bb6      	ldr	r3, [pc, #728]	; (800059c <main+0x364>)
 80002c2:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80002c6:	4ab6      	ldr	r2, [pc, #728]	; (80005a0 <main+0x368>)
 80002c8:	2140      	movs	r1, #64	; 0x40
 80002ca:	f002 ff9d 	bl	8003208 <sniprintf>
  HAL_UART_Transmit(&huart1, (uint8_t*)str, strlen(str), 1000);
 80002ce:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80002d2:	4618      	mov	r0, r3
 80002d4:	f7ff ffa8 	bl	8000228 <strlen>
 80002d8:	4603      	mov	r3, r0
 80002da:	b29a      	uxth	r2, r3
 80002dc:	f107 0124 	add.w	r1, r7, #36	; 0x24
 80002e0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80002e4:	48ac      	ldr	r0, [pc, #688]	; (8000598 <main+0x360>)
 80002e6:	f002 fde6 	bl	8002eb6 <HAL_UART_Transmit>

  ////////////// SET ////////////////
  enableAckPayload();
 80002ea:	f000 fe91 	bl	8001010 <enableAckPayload>
  //setAutoAck(false);
  //setPayloadSize(3);
  setChannel(103);
 80002ee:	2067      	movs	r0, #103	; 0x67
 80002f0:	f000 fc5c 	bl	8000bac <setChannel>
  openReadingPipe(1, pipe1);
 80002f4:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 80002f8:	2001      	movs	r0, #1
 80002fa:	f000 fdf1 	bl	8000ee0 <openReadingPipe>
  startListening();
 80002fe:	f000 fd01 	bl	8000d04 <startListening>
  ///////////////////////////////////

  ////////////////////////// Вывод всяких статусов, для работы не нужно /////////////////////////////
  uint8_t status = get_status();
 8000302:	f000 fc4b 	bl	8000b9c <get_status>
 8000306:	4603      	mov	r3, r0
 8000308:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
  snprintf(str, 64, "get_status: 0x%02x\n", status);
 800030c:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 8000310:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8000314:	4aa3      	ldr	r2, [pc, #652]	; (80005a4 <main+0x36c>)
 8000316:	2140      	movs	r1, #64	; 0x40
 8000318:	f002 ff76 	bl	8003208 <sniprintf>
  HAL_UART_Transmit(&huart1, (uint8_t*)str, strlen(str), 1000);
 800031c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000320:	4618      	mov	r0, r3
 8000322:	f7ff ff81 	bl	8000228 <strlen>
 8000326:	4603      	mov	r3, r0
 8000328:	b29a      	uxth	r2, r3
 800032a:	f107 0124 	add.w	r1, r7, #36	; 0x24
 800032e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000332:	4899      	ldr	r0, [pc, #612]	; (8000598 <main+0x360>)
 8000334:	f002 fdbf 	bl	8002eb6 <HAL_UART_Transmit>

  status = getPALevel();
 8000338:	f000 fee4 	bl	8001104 <getPALevel>
 800033c:	4603      	mov	r3, r0
 800033e:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
  snprintf(str, 64, "getPALevel: 0x%02x  ", status);
 8000342:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 8000346:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800034a:	4a97      	ldr	r2, [pc, #604]	; (80005a8 <main+0x370>)
 800034c:	2140      	movs	r1, #64	; 0x40
 800034e:	f002 ff5b 	bl	8003208 <sniprintf>
  HAL_UART_Transmit(&huart1, (uint8_t*)str, strlen(str), 1000);
 8000352:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000356:	4618      	mov	r0, r3
 8000358:	f7ff ff66 	bl	8000228 <strlen>
 800035c:	4603      	mov	r3, r0
 800035e:	b29a      	uxth	r2, r3
 8000360:	f107 0124 	add.w	r1, r7, #36	; 0x24
 8000364:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000368:	488b      	ldr	r0, [pc, #556]	; (8000598 <main+0x360>)
 800036a:	f002 fda4 	bl	8002eb6 <HAL_UART_Transmit>

  if(status == 0x00)
 800036e:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 8000372:	2b00      	cmp	r3, #0
 8000374:	d107      	bne.n	8000386 <main+0x14e>
  {
	  HAL_UART_Transmit(&huart1, (uint8_t*)"RF24_PA_MIN\n", strlen("RF24_PA_MIN\n"), 1000);
 8000376:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800037a:	220c      	movs	r2, #12
 800037c:	498b      	ldr	r1, [pc, #556]	; (80005ac <main+0x374>)
 800037e:	4886      	ldr	r0, [pc, #536]	; (8000598 <main+0x360>)
 8000380:	f002 fd99 	bl	8002eb6 <HAL_UART_Transmit>
 8000384:	e022      	b.n	80003cc <main+0x194>
  }
  else if(status == 0x01)
 8000386:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 800038a:	2b01      	cmp	r3, #1
 800038c:	d107      	bne.n	800039e <main+0x166>
  {
	  HAL_UART_Transmit(&huart1, (uint8_t*)"RF24_PA_LOW\n", strlen("RF24_PA_LOW\n"), 1000);
 800038e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000392:	220c      	movs	r2, #12
 8000394:	4986      	ldr	r1, [pc, #536]	; (80005b0 <main+0x378>)
 8000396:	4880      	ldr	r0, [pc, #512]	; (8000598 <main+0x360>)
 8000398:	f002 fd8d 	bl	8002eb6 <HAL_UART_Transmit>
 800039c:	e016      	b.n	80003cc <main+0x194>
  }
  else if(status == 0x02)
 800039e:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 80003a2:	2b02      	cmp	r3, #2
 80003a4:	d107      	bne.n	80003b6 <main+0x17e>
  {
	  HAL_UART_Transmit(&huart1, (uint8_t*)"RF24_PA_HIGH\n", strlen("RF24_PA_HIGH\n"), 1000);
 80003a6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80003aa:	220d      	movs	r2, #13
 80003ac:	4981      	ldr	r1, [pc, #516]	; (80005b4 <main+0x37c>)
 80003ae:	487a      	ldr	r0, [pc, #488]	; (8000598 <main+0x360>)
 80003b0:	f002 fd81 	bl	8002eb6 <HAL_UART_Transmit>
 80003b4:	e00a      	b.n	80003cc <main+0x194>
  }
  else if(status == 0x03)
 80003b6:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 80003ba:	2b03      	cmp	r3, #3
 80003bc:	d106      	bne.n	80003cc <main+0x194>
  {
	  HAL_UART_Transmit(&huart1, (uint8_t*)"RF24_PA_MAX\n", strlen("RF24_PA_MAX\n"), 1000);
 80003be:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80003c2:	220c      	movs	r2, #12
 80003c4:	497c      	ldr	r1, [pc, #496]	; (80005b8 <main+0x380>)
 80003c6:	4874      	ldr	r0, [pc, #464]	; (8000598 <main+0x360>)
 80003c8:	f002 fd75 	bl	8002eb6 <HAL_UART_Transmit>
  }

  status = getChannel();
 80003cc:	f000 fbfc 	bl	8000bc8 <getChannel>
 80003d0:	4603      	mov	r3, r0
 80003d2:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
  snprintf(str, 64, "getChannel: 0x%02x № %d\n", status, status);
 80003d6:	f897 2066 	ldrb.w	r2, [r7, #102]	; 0x66
 80003da:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 80003de:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80003e2:	9300      	str	r3, [sp, #0]
 80003e4:	4613      	mov	r3, r2
 80003e6:	4a75      	ldr	r2, [pc, #468]	; (80005bc <main+0x384>)
 80003e8:	2140      	movs	r1, #64	; 0x40
 80003ea:	f002 ff0d 	bl	8003208 <sniprintf>
  HAL_UART_Transmit(&huart1, (uint8_t*)str, strlen(str), 1000);
 80003ee:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80003f2:	4618      	mov	r0, r3
 80003f4:	f7ff ff18 	bl	8000228 <strlen>
 80003f8:	4603      	mov	r3, r0
 80003fa:	b29a      	uxth	r2, r3
 80003fc:	f107 0124 	add.w	r1, r7, #36	; 0x24
 8000400:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000404:	4864      	ldr	r0, [pc, #400]	; (8000598 <main+0x360>)
 8000406:	f002 fd56 	bl	8002eb6 <HAL_UART_Transmit>

  status = getDataRate();
 800040a:	f000 fec9 	bl	80011a0 <getDataRate>
 800040e:	4603      	mov	r3, r0
 8000410:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
  snprintf(str, 64, "getDataRate: 0x%02x  ", status);
 8000414:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 8000418:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800041c:	4a68      	ldr	r2, [pc, #416]	; (80005c0 <main+0x388>)
 800041e:	2140      	movs	r1, #64	; 0x40
 8000420:	f002 fef2 	bl	8003208 <sniprintf>
  HAL_UART_Transmit(&huart1, (uint8_t*)str, strlen(str), 1000);
 8000424:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000428:	4618      	mov	r0, r3
 800042a:	f7ff fefd 	bl	8000228 <strlen>
 800042e:	4603      	mov	r3, r0
 8000430:	b29a      	uxth	r2, r3
 8000432:	f107 0124 	add.w	r1, r7, #36	; 0x24
 8000436:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800043a:	4857      	ldr	r0, [pc, #348]	; (8000598 <main+0x360>)
 800043c:	f002 fd3b 	bl	8002eb6 <HAL_UART_Transmit>

  if(status == 0x02)
 8000440:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 8000444:	2b02      	cmp	r3, #2
 8000446:	d107      	bne.n	8000458 <main+0x220>
  {
	  HAL_UART_Transmit(&huart1, (uint8_t*)"RF24_250KBPS\n", strlen("RF24_250KBPS\n"), 1000);
 8000448:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800044c:	220d      	movs	r2, #13
 800044e:	495d      	ldr	r1, [pc, #372]	; (80005c4 <main+0x38c>)
 8000450:	4851      	ldr	r0, [pc, #324]	; (8000598 <main+0x360>)
 8000452:	f002 fd30 	bl	8002eb6 <HAL_UART_Transmit>
 8000456:	e012      	b.n	800047e <main+0x246>
  }
  else if(status == 0x01)
 8000458:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 800045c:	2b01      	cmp	r3, #1
 800045e:	d107      	bne.n	8000470 <main+0x238>
  {
	  HAL_UART_Transmit(&huart1, (uint8_t*)"RF24_2MBPS\n", strlen("RF24_2MBPS\n"), 1000);
 8000460:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000464:	220b      	movs	r2, #11
 8000466:	4958      	ldr	r1, [pc, #352]	; (80005c8 <main+0x390>)
 8000468:	484b      	ldr	r0, [pc, #300]	; (8000598 <main+0x360>)
 800046a:	f002 fd24 	bl	8002eb6 <HAL_UART_Transmit>
 800046e:	e006      	b.n	800047e <main+0x246>
  }
  else
  {
	  HAL_UART_Transmit(&huart1, (uint8_t*)"RF24_1MBPS\n", strlen("RF24_1MBPS\n"), 1000);
 8000470:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000474:	220b      	movs	r2, #11
 8000476:	4955      	ldr	r1, [pc, #340]	; (80005cc <main+0x394>)
 8000478:	4847      	ldr	r0, [pc, #284]	; (8000598 <main+0x360>)
 800047a:	f002 fd1c 	bl	8002eb6 <HAL_UART_Transmit>
  }

  status = getPayloadSize();
 800047e:	f000 fbab 	bl	8000bd8 <getPayloadSize>
 8000482:	4603      	mov	r3, r0
 8000484:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
  snprintf(str, 64, "getPayloadSize: %d\n", status);
 8000488:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 800048c:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8000490:	4a4f      	ldr	r2, [pc, #316]	; (80005d0 <main+0x398>)
 8000492:	2140      	movs	r1, #64	; 0x40
 8000494:	f002 feb8 	bl	8003208 <sniprintf>
  HAL_UART_Transmit(&huart1, (uint8_t*)str, strlen(str), 1000);
 8000498:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800049c:	4618      	mov	r0, r3
 800049e:	f7ff fec3 	bl	8000228 <strlen>
 80004a2:	4603      	mov	r3, r0
 80004a4:	b29a      	uxth	r2, r3
 80004a6:	f107 0124 	add.w	r1, r7, #36	; 0x24
 80004aa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80004ae:	483a      	ldr	r0, [pc, #232]	; (8000598 <main+0x360>)
 80004b0:	f002 fd01 	bl	8002eb6 <HAL_UART_Transmit>

  status = getCRCLength();
 80004b4:	f000 fe91 	bl	80011da <getCRCLength>
 80004b8:	4603      	mov	r3, r0
 80004ba:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
  snprintf(str, 64, "getCRCLength: 0x%02x  ", status);
 80004be:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 80004c2:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80004c6:	4a43      	ldr	r2, [pc, #268]	; (80005d4 <main+0x39c>)
 80004c8:	2140      	movs	r1, #64	; 0x40
 80004ca:	f002 fe9d 	bl	8003208 <sniprintf>
  HAL_UART_Transmit(&huart1, (uint8_t*)str, strlen(str), 1000);
 80004ce:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80004d2:	4618      	mov	r0, r3
 80004d4:	f7ff fea8 	bl	8000228 <strlen>
 80004d8:	4603      	mov	r3, r0
 80004da:	b29a      	uxth	r2, r3
 80004dc:	f107 0124 	add.w	r1, r7, #36	; 0x24
 80004e0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80004e4:	482c      	ldr	r0, [pc, #176]	; (8000598 <main+0x360>)
 80004e6:	f002 fce6 	bl	8002eb6 <HAL_UART_Transmit>

  if(status == 0x00)
 80004ea:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 80004ee:	2b00      	cmp	r3, #0
 80004f0:	d107      	bne.n	8000502 <main+0x2ca>
  {
	  HAL_UART_Transmit(&huart1, (uint8_t*)"RF24_CRC_DISABLED\n", strlen("RF24_CRC_DISABLED\n"), 1000);
 80004f2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80004f6:	2212      	movs	r2, #18
 80004f8:	4937      	ldr	r1, [pc, #220]	; (80005d8 <main+0x3a0>)
 80004fa:	4827      	ldr	r0, [pc, #156]	; (8000598 <main+0x360>)
 80004fc:	f002 fcdb 	bl	8002eb6 <HAL_UART_Transmit>
 8000500:	e016      	b.n	8000530 <main+0x2f8>
  }
  else if(status == 0x01)
 8000502:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 8000506:	2b01      	cmp	r3, #1
 8000508:	d107      	bne.n	800051a <main+0x2e2>
  {
	  HAL_UART_Transmit(&huart1, (uint8_t*)"RF24_CRC_8\n", strlen("RF24_CRC_8\n"), 1000);
 800050a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800050e:	220b      	movs	r2, #11
 8000510:	4932      	ldr	r1, [pc, #200]	; (80005dc <main+0x3a4>)
 8000512:	4821      	ldr	r0, [pc, #132]	; (8000598 <main+0x360>)
 8000514:	f002 fccf 	bl	8002eb6 <HAL_UART_Transmit>
 8000518:	e00a      	b.n	8000530 <main+0x2f8>
  }
  else if(status == 0x02)
 800051a:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 800051e:	2b02      	cmp	r3, #2
 8000520:	d106      	bne.n	8000530 <main+0x2f8>
  {
	  HAL_UART_Transmit(&huart1, (uint8_t*)"RF24_CRC_16\n", strlen("RF24_CRC_16\n"), 1000);
 8000522:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000526:	220c      	movs	r2, #12
 8000528:	492d      	ldr	r1, [pc, #180]	; (80005e0 <main+0x3a8>)
 800052a:	481b      	ldr	r0, [pc, #108]	; (8000598 <main+0x360>)
 800052c:	f002 fcc3 	bl	8002eb6 <HAL_UART_Transmit>
  }
  /////////////////////////////////////////////////////////////////////////////////////////////////////


  maskIRQ(true, true, true); // маскируем прерывания
 8000530:	2201      	movs	r2, #1
 8000532:	2101      	movs	r1, #1
 8000534:	2001      	movs	r0, #1
 8000536:	f000 fc37 	bl	8000da8 <maskIRQ>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	///////////////////////////////////// ПРИЁМ /////////////////////////////////////////////
	uint8_t nrf_data[32] = {0,}; // буфер указываем максимального размера
 800053a:	463b      	mov	r3, r7
 800053c:	2220      	movs	r2, #32
 800053e:	2100      	movs	r1, #0
 8000540:	4618      	mov	r0, r3
 8000542:	f002 fe58 	bl	80031f6 <memset>
	static uint8_t remsg = 0;
	uint8_t pipe_num = 0;
 8000546:	2300      	movs	r3, #0
 8000548:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

	if(available(&pipe_num)) // проверяем пришло ли что-то
 800054c:	f107 0323 	add.w	r3, r7, #35	; 0x23
 8000550:	4618      	mov	r0, r3
 8000552:	f000 fc8f 	bl	8000e74 <available>
 8000556:	4603      	mov	r3, r0
 8000558:	2b00      	cmp	r3, #0
 800055a:	d0ee      	beq.n	800053a <main+0x302>
	{
		remsg++;
 800055c:	4b21      	ldr	r3, [pc, #132]	; (80005e4 <main+0x3ac>)
 800055e:	781b      	ldrb	r3, [r3, #0]
 8000560:	3301      	adds	r3, #1
 8000562:	b2da      	uxtb	r2, r3
 8000564:	4b1f      	ldr	r3, [pc, #124]	; (80005e4 <main+0x3ac>)
 8000566:	701a      	strb	r2, [r3, #0]

		writeAckPayload(pipe_num, &remsg, sizeof(remsg)); // отправляем полезную нагрузку вместе с подтверждением
 8000568:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800056c:	2201      	movs	r2, #1
 800056e:	491d      	ldr	r1, [pc, #116]	; (80005e4 <main+0x3ac>)
 8000570:	4618      	mov	r0, r3
 8000572:	f000 fd6d 	bl	8001050 <writeAckPayload>

		if(pipe_num == 0) // проверяем в какую трубу пришли данные
 8000576:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800057a:	2b00      	cmp	r3, #0
 800057c:	d13a      	bne.n	80005f4 <main+0x3bc>
		{
			HAL_UART_Transmit(&huart1, (uint8_t*)"pipe 0\n", strlen("pipe 0\n"), 1000);
 800057e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000582:	2207      	movs	r2, #7
 8000584:	4918      	ldr	r1, [pc, #96]	; (80005e8 <main+0x3b0>)
 8000586:	4804      	ldr	r0, [pc, #16]	; (8000598 <main+0x360>)
 8000588:	f002 fc95 	bl	8002eb6 <HAL_UART_Transmit>
 800058c:	e7d5      	b.n	800053a <main+0x302>
 800058e:	bf00      	nop
 8000590:	08003a58 	.word	0x08003a58
 8000594:	08003a5c 	.word	0x08003a5c
 8000598:	200000a4 	.word	0x200000a4
 800059c:	08003a6c 	.word	0x08003a6c
 80005a0:	08003a74 	.word	0x08003a74
 80005a4:	08003a80 	.word	0x08003a80
 80005a8:	08003a94 	.word	0x08003a94
 80005ac:	08003aac 	.word	0x08003aac
 80005b0:	08003abc 	.word	0x08003abc
 80005b4:	08003acc 	.word	0x08003acc
 80005b8:	08003adc 	.word	0x08003adc
 80005bc:	08003aec 	.word	0x08003aec
 80005c0:	08003b08 	.word	0x08003b08
 80005c4:	08003b20 	.word	0x08003b20
 80005c8:	08003b30 	.word	0x08003b30
 80005cc:	08003b3c 	.word	0x08003b3c
 80005d0:	08003b48 	.word	0x08003b48
 80005d4:	08003b5c 	.word	0x08003b5c
 80005d8:	08003b74 	.word	0x08003b74
 80005dc:	08003b88 	.word	0x08003b88
 80005e0:	08003b94 	.word	0x08003b94
 80005e4:	2000008c 	.word	0x2000008c
 80005e8:	08003ba4 	.word	0x08003ba4
 80005ec:	e8f0f0e2 	.word	0xe8f0f0e2
 80005f0:	000000e8 	.word	0x000000e8
		}

		else if(pipe_num == 1)
 80005f4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80005f8:	2b01      	cmp	r3, #1
 80005fa:	d13b      	bne.n	8000674 <main+0x43c>
		{
			HAL_UART_Transmit(&huart1, (uint8_t*)"pipe 1\n", strlen("pipe 1\n"), 1000);
 80005fc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000600:	2207      	movs	r2, #7
 8000602:	492b      	ldr	r1, [pc, #172]	; (80006b0 <main+0x478>)
 8000604:	482b      	ldr	r0, [pc, #172]	; (80006b4 <main+0x47c>)
 8000606:	f002 fc56 	bl	8002eb6 <HAL_UART_Transmit>

			uint8_t count = getDynamicPayloadSize(); // смотрим сколько байт прилетело
 800060a:	f000 fbfb 	bl	8000e04 <getDynamicPayloadSize>
 800060e:	4603      	mov	r3, r0
 8000610:	f887 3065 	strb.w	r3, [r7, #101]	; 0x65

			read(&nrf_data, count); // Читаем данные в массив nrf_data и указываем сколько байт читать
 8000614:	f897 2065 	ldrb.w	r2, [r7, #101]	; 0x65
 8000618:	463b      	mov	r3, r7
 800061a:	4611      	mov	r1, r2
 800061c:	4618      	mov	r0, r3
 800061e:	f000 fc4b 	bl	8000eb8 <read>

			if(nrf_data[0] == 77 && nrf_data[1] == 86 && nrf_data[2] == 97) // проверяем правильность данных
 8000622:	783b      	ldrb	r3, [r7, #0]
 8000624:	2b4d      	cmp	r3, #77	; 0x4d
 8000626:	d188      	bne.n	800053a <main+0x302>
 8000628:	787b      	ldrb	r3, [r7, #1]
 800062a:	2b56      	cmp	r3, #86	; 0x56
 800062c:	d185      	bne.n	800053a <main+0x302>
 800062e:	78bb      	ldrb	r3, [r7, #2]
 8000630:	2b61      	cmp	r3, #97	; 0x61
 8000632:	d182      	bne.n	800053a <main+0x302>
			{
				HAL_GPIO_TogglePin(LED1_GPIO_Port, LED1_Pin);
 8000634:	2180      	movs	r1, #128	; 0x80
 8000636:	4820      	ldr	r0, [pc, #128]	; (80006b8 <main+0x480>)
 8000638:	f001 fa4e 	bl	8001ad8 <HAL_GPIO_TogglePin>
				snprintf(str, 64, "data[0]=%d data[1]=%d data[2]=%d\n", nrf_data[0], nrf_data[1], nrf_data[2]);
 800063c:	783b      	ldrb	r3, [r7, #0]
 800063e:	4619      	mov	r1, r3
 8000640:	787b      	ldrb	r3, [r7, #1]
 8000642:	78ba      	ldrb	r2, [r7, #2]
 8000644:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8000648:	9201      	str	r2, [sp, #4]
 800064a:	9300      	str	r3, [sp, #0]
 800064c:	460b      	mov	r3, r1
 800064e:	4a1b      	ldr	r2, [pc, #108]	; (80006bc <main+0x484>)
 8000650:	2140      	movs	r1, #64	; 0x40
 8000652:	f002 fdd9 	bl	8003208 <sniprintf>
				HAL_UART_Transmit(&huart1, (uint8_t*)str, strlen(str), 1000);
 8000656:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800065a:	4618      	mov	r0, r3
 800065c:	f7ff fde4 	bl	8000228 <strlen>
 8000660:	4603      	mov	r3, r0
 8000662:	b29a      	uxth	r2, r3
 8000664:	f107 0124 	add.w	r1, r7, #36	; 0x24
 8000668:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800066c:	4811      	ldr	r0, [pc, #68]	; (80006b4 <main+0x47c>)
 800066e:	f002 fc22 	bl	8002eb6 <HAL_UART_Transmit>
 8000672:	e762      	b.n	800053a <main+0x302>
			}
		}

		else if(pipe_num == 2)
 8000674:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8000678:	2b02      	cmp	r3, #2
 800067a:	d113      	bne.n	80006a4 <main+0x46c>
		{
			HAL_UART_Transmit(&huart1, (uint8_t*)"pipe 2\n", strlen("pipe 2\n"), 1000);
 800067c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000680:	2207      	movs	r2, #7
 8000682:	490f      	ldr	r1, [pc, #60]	; (80006c0 <main+0x488>)
 8000684:	480b      	ldr	r0, [pc, #44]	; (80006b4 <main+0x47c>)
 8000686:	f002 fc16 	bl	8002eb6 <HAL_UART_Transmit>
 800068a:	e756      	b.n	800053a <main+0x302>

		else
		{
			while(availableMy()) // если данные придут от неуказанной трубы, то попадут сюда
			{
				read(&nrf_data, sizeof(nrf_data));
 800068c:	463b      	mov	r3, r7
 800068e:	2120      	movs	r1, #32
 8000690:	4618      	mov	r0, r3
 8000692:	f000 fc11 	bl	8000eb8 <read>
				HAL_UART_Transmit(&huart1, (uint8_t*)"Unknown pipe\n", strlen("Unknown pipe\n"), 1000);
 8000696:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800069a:	220d      	movs	r2, #13
 800069c:	4909      	ldr	r1, [pc, #36]	; (80006c4 <main+0x48c>)
 800069e:	4805      	ldr	r0, [pc, #20]	; (80006b4 <main+0x47c>)
 80006a0:	f002 fc09 	bl	8002eb6 <HAL_UART_Transmit>
			while(availableMy()) // если данные придут от неуказанной трубы, то попадут сюда
 80006a4:	f000 fbde 	bl	8000e64 <availableMy>
 80006a8:	4603      	mov	r3, r0
 80006aa:	2b00      	cmp	r3, #0
 80006ac:	d1ee      	bne.n	800068c <main+0x454>
  {
 80006ae:	e744      	b.n	800053a <main+0x302>
 80006b0:	08003bac 	.word	0x08003bac
 80006b4:	200000a4 	.word	0x200000a4
 80006b8:	40010c00 	.word	0x40010c00
 80006bc:	08003bb4 	.word	0x08003bb4
 80006c0:	08003bd8 	.word	0x08003bd8
 80006c4:	08003be0 	.word	0x08003be0

080006c8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006c8:	b580      	push	{r7, lr}
 80006ca:	b090      	sub	sp, #64	; 0x40
 80006cc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006ce:	f107 0318 	add.w	r3, r7, #24
 80006d2:	2228      	movs	r2, #40	; 0x28
 80006d4:	2100      	movs	r1, #0
 80006d6:	4618      	mov	r0, r3
 80006d8:	f002 fd8d 	bl	80031f6 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006dc:	1d3b      	adds	r3, r7, #4
 80006de:	2200      	movs	r2, #0
 80006e0:	601a      	str	r2, [r3, #0]
 80006e2:	605a      	str	r2, [r3, #4]
 80006e4:	609a      	str	r2, [r3, #8]
 80006e6:	60da      	str	r2, [r3, #12]
 80006e8:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80006ea:	2302      	movs	r3, #2
 80006ec:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80006ee:	2301      	movs	r3, #1
 80006f0:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80006f2:	2310      	movs	r3, #16
 80006f4:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80006f6:	2300      	movs	r3, #0
 80006f8:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006fa:	f107 0318 	add.w	r3, r7, #24
 80006fe:	4618      	mov	r0, r3
 8000700:	f001 fa04 	bl	8001b0c <HAL_RCC_OscConfig>
 8000704:	4603      	mov	r3, r0
 8000706:	2b00      	cmp	r3, #0
 8000708:	d001      	beq.n	800070e <SystemClock_Config+0x46>
  {
    Error_Handler();
 800070a:	f000 f8db 	bl	80008c4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800070e:	230f      	movs	r3, #15
 8000710:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000712:	2300      	movs	r3, #0
 8000714:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000716:	2300      	movs	r3, #0
 8000718:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800071a:	2300      	movs	r3, #0
 800071c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800071e:	2300      	movs	r3, #0
 8000720:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000722:	1d3b      	adds	r3, r7, #4
 8000724:	2100      	movs	r1, #0
 8000726:	4618      	mov	r0, r3
 8000728:	f001 fc70 	bl	800200c <HAL_RCC_ClockConfig>
 800072c:	4603      	mov	r3, r0
 800072e:	2b00      	cmp	r3, #0
 8000730:	d001      	beq.n	8000736 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8000732:	f000 f8c7 	bl	80008c4 <Error_Handler>
  }
}
 8000736:	bf00      	nop
 8000738:	3740      	adds	r7, #64	; 0x40
 800073a:	46bd      	mov	sp, r7
 800073c:	bd80      	pop	{r7, pc}
	...

08000740 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000740:	b580      	push	{r7, lr}
 8000742:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000744:	4b17      	ldr	r3, [pc, #92]	; (80007a4 <MX_SPI1_Init+0x64>)
 8000746:	4a18      	ldr	r2, [pc, #96]	; (80007a8 <MX_SPI1_Init+0x68>)
 8000748:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800074a:	4b16      	ldr	r3, [pc, #88]	; (80007a4 <MX_SPI1_Init+0x64>)
 800074c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000750:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000752:	4b14      	ldr	r3, [pc, #80]	; (80007a4 <MX_SPI1_Init+0x64>)
 8000754:	2200      	movs	r2, #0
 8000756:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000758:	4b12      	ldr	r3, [pc, #72]	; (80007a4 <MX_SPI1_Init+0x64>)
 800075a:	2200      	movs	r2, #0
 800075c:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800075e:	4b11      	ldr	r3, [pc, #68]	; (80007a4 <MX_SPI1_Init+0x64>)
 8000760:	2200      	movs	r2, #0
 8000762:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000764:	4b0f      	ldr	r3, [pc, #60]	; (80007a4 <MX_SPI1_Init+0x64>)
 8000766:	2200      	movs	r2, #0
 8000768:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800076a:	4b0e      	ldr	r3, [pc, #56]	; (80007a4 <MX_SPI1_Init+0x64>)
 800076c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000770:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000772:	4b0c      	ldr	r3, [pc, #48]	; (80007a4 <MX_SPI1_Init+0x64>)
 8000774:	2200      	movs	r2, #0
 8000776:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000778:	4b0a      	ldr	r3, [pc, #40]	; (80007a4 <MX_SPI1_Init+0x64>)
 800077a:	2200      	movs	r2, #0
 800077c:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800077e:	4b09      	ldr	r3, [pc, #36]	; (80007a4 <MX_SPI1_Init+0x64>)
 8000780:	2200      	movs	r2, #0
 8000782:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000784:	4b07      	ldr	r3, [pc, #28]	; (80007a4 <MX_SPI1_Init+0x64>)
 8000786:	2200      	movs	r2, #0
 8000788:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 800078a:	4b06      	ldr	r3, [pc, #24]	; (80007a4 <MX_SPI1_Init+0x64>)
 800078c:	220a      	movs	r2, #10
 800078e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000790:	4804      	ldr	r0, [pc, #16]	; (80007a4 <MX_SPI1_Init+0x64>)
 8000792:	f001 fdd7 	bl	8002344 <HAL_SPI_Init>
 8000796:	4603      	mov	r3, r0
 8000798:	2b00      	cmp	r3, #0
 800079a:	d001      	beq.n	80007a0 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 800079c:	f000 f892 	bl	80008c4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80007a0:	bf00      	nop
 80007a2:	bd80      	pop	{r7, pc}
 80007a4:	200000e4 	.word	0x200000e4
 80007a8:	40013000 	.word	0x40013000

080007ac <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80007ac:	b580      	push	{r7, lr}
 80007ae:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80007b0:	4b11      	ldr	r3, [pc, #68]	; (80007f8 <MX_USART1_UART_Init+0x4c>)
 80007b2:	4a12      	ldr	r2, [pc, #72]	; (80007fc <MX_USART1_UART_Init+0x50>)
 80007b4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80007b6:	4b10      	ldr	r3, [pc, #64]	; (80007f8 <MX_USART1_UART_Init+0x4c>)
 80007b8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80007bc:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80007be:	4b0e      	ldr	r3, [pc, #56]	; (80007f8 <MX_USART1_UART_Init+0x4c>)
 80007c0:	2200      	movs	r2, #0
 80007c2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80007c4:	4b0c      	ldr	r3, [pc, #48]	; (80007f8 <MX_USART1_UART_Init+0x4c>)
 80007c6:	2200      	movs	r2, #0
 80007c8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80007ca:	4b0b      	ldr	r3, [pc, #44]	; (80007f8 <MX_USART1_UART_Init+0x4c>)
 80007cc:	2200      	movs	r2, #0
 80007ce:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80007d0:	4b09      	ldr	r3, [pc, #36]	; (80007f8 <MX_USART1_UART_Init+0x4c>)
 80007d2:	220c      	movs	r2, #12
 80007d4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80007d6:	4b08      	ldr	r3, [pc, #32]	; (80007f8 <MX_USART1_UART_Init+0x4c>)
 80007d8:	2200      	movs	r2, #0
 80007da:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80007dc:	4b06      	ldr	r3, [pc, #24]	; (80007f8 <MX_USART1_UART_Init+0x4c>)
 80007de:	2200      	movs	r2, #0
 80007e0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80007e2:	4805      	ldr	r0, [pc, #20]	; (80007f8 <MX_USART1_UART_Init+0x4c>)
 80007e4:	f002 fb1a 	bl	8002e1c <HAL_UART_Init>
 80007e8:	4603      	mov	r3, r0
 80007ea:	2b00      	cmp	r3, #0
 80007ec:	d001      	beq.n	80007f2 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80007ee:	f000 f869 	bl	80008c4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80007f2:	bf00      	nop
 80007f4:	bd80      	pop	{r7, pc}
 80007f6:	bf00      	nop
 80007f8:	200000a4 	.word	0x200000a4
 80007fc:	40013800 	.word	0x40013800

08000800 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000800:	b580      	push	{r7, lr}
 8000802:	b086      	sub	sp, #24
 8000804:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000806:	f107 0308 	add.w	r3, r7, #8
 800080a:	2200      	movs	r2, #0
 800080c:	601a      	str	r2, [r3, #0]
 800080e:	605a      	str	r2, [r3, #4]
 8000810:	609a      	str	r2, [r3, #8]
 8000812:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000814:	4b27      	ldr	r3, [pc, #156]	; (80008b4 <MX_GPIO_Init+0xb4>)
 8000816:	699b      	ldr	r3, [r3, #24]
 8000818:	4a26      	ldr	r2, [pc, #152]	; (80008b4 <MX_GPIO_Init+0xb4>)
 800081a:	f043 0304 	orr.w	r3, r3, #4
 800081e:	6193      	str	r3, [r2, #24]
 8000820:	4b24      	ldr	r3, [pc, #144]	; (80008b4 <MX_GPIO_Init+0xb4>)
 8000822:	699b      	ldr	r3, [r3, #24]
 8000824:	f003 0304 	and.w	r3, r3, #4
 8000828:	607b      	str	r3, [r7, #4]
 800082a:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800082c:	4b21      	ldr	r3, [pc, #132]	; (80008b4 <MX_GPIO_Init+0xb4>)
 800082e:	699b      	ldr	r3, [r3, #24]
 8000830:	4a20      	ldr	r2, [pc, #128]	; (80008b4 <MX_GPIO_Init+0xb4>)
 8000832:	f043 0308 	orr.w	r3, r3, #8
 8000836:	6193      	str	r3, [r2, #24]
 8000838:	4b1e      	ldr	r3, [pc, #120]	; (80008b4 <MX_GPIO_Init+0xb4>)
 800083a:	699b      	ldr	r3, [r3, #24]
 800083c:	f003 0308 	and.w	r3, r3, #8
 8000840:	603b      	str	r3, [r7, #0]
 8000842:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, CE_Pin|CSN_Pin|LED2_Pin, GPIO_PIN_RESET);
 8000844:	2200      	movs	r2, #0
 8000846:	f44f 718c 	mov.w	r1, #280	; 0x118
 800084a:	481b      	ldr	r0, [pc, #108]	; (80008b8 <MX_GPIO_Init+0xb8>)
 800084c:	f001 f92c 	bl	8001aa8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET);
 8000850:	2200      	movs	r2, #0
 8000852:	2180      	movs	r1, #128	; 0x80
 8000854:	4819      	ldr	r0, [pc, #100]	; (80008bc <MX_GPIO_Init+0xbc>)
 8000856:	f001 f927 	bl	8001aa8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : IRQ_Pin */
  GPIO_InitStruct.Pin = IRQ_Pin;
 800085a:	2304      	movs	r3, #4
 800085c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800085e:	4b18      	ldr	r3, [pc, #96]	; (80008c0 <MX_GPIO_Init+0xc0>)
 8000860:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000862:	2300      	movs	r3, #0
 8000864:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(IRQ_GPIO_Port, &GPIO_InitStruct);
 8000866:	f107 0308 	add.w	r3, r7, #8
 800086a:	4619      	mov	r1, r3
 800086c:	4812      	ldr	r0, [pc, #72]	; (80008b8 <MX_GPIO_Init+0xb8>)
 800086e:	f000 ffb1 	bl	80017d4 <HAL_GPIO_Init>

  /*Configure GPIO pins : CE_Pin CSN_Pin LED2_Pin */
  GPIO_InitStruct.Pin = CE_Pin|CSN_Pin|LED2_Pin;
 8000872:	f44f 738c 	mov.w	r3, #280	; 0x118
 8000876:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000878:	2301      	movs	r3, #1
 800087a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800087c:	2300      	movs	r3, #0
 800087e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000880:	2302      	movs	r3, #2
 8000882:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000884:	f107 0308 	add.w	r3, r7, #8
 8000888:	4619      	mov	r1, r3
 800088a:	480b      	ldr	r0, [pc, #44]	; (80008b8 <MX_GPIO_Init+0xb8>)
 800088c:	f000 ffa2 	bl	80017d4 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED1_Pin */
  GPIO_InitStruct.Pin = LED1_Pin;
 8000890:	2380      	movs	r3, #128	; 0x80
 8000892:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000894:	2301      	movs	r3, #1
 8000896:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000898:	2300      	movs	r3, #0
 800089a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800089c:	2302      	movs	r3, #2
 800089e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(LED1_GPIO_Port, &GPIO_InitStruct);
 80008a0:	f107 0308 	add.w	r3, r7, #8
 80008a4:	4619      	mov	r1, r3
 80008a6:	4805      	ldr	r0, [pc, #20]	; (80008bc <MX_GPIO_Init+0xbc>)
 80008a8:	f000 ff94 	bl	80017d4 <HAL_GPIO_Init>

}
 80008ac:	bf00      	nop
 80008ae:	3718      	adds	r7, #24
 80008b0:	46bd      	mov	sp, r7
 80008b2:	bd80      	pop	{r7, pc}
 80008b4:	40021000 	.word	0x40021000
 80008b8:	40010800 	.word	0x40010800
 80008bc:	40010c00 	.word	0x40010c00
 80008c0:	10210000 	.word	0x10210000

080008c4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80008c4:	b480      	push	{r7}
 80008c6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80008c8:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80008ca:	e7fe      	b.n	80008ca <Error_Handler+0x6>

080008cc <DWT_Init>:
uint8_t addr_width = 0; /**< The address width to use - 3,4 or 5 bytes. */
uint8_t txDelay = 0;


void DWT_Init(void)
{
 80008cc:	b480      	push	{r7}
 80008ce:	af00      	add	r7, sp, #0
    SCB_DEMCR |= CoreDebug_DEMCR_TRCENA_Msk; // разрешаем использовать счётчик
 80008d0:	4b07      	ldr	r3, [pc, #28]	; (80008f0 <DWT_Init+0x24>)
 80008d2:	681b      	ldr	r3, [r3, #0]
 80008d4:	4a06      	ldr	r2, [pc, #24]	; (80008f0 <DWT_Init+0x24>)
 80008d6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80008da:	6013      	str	r3, [r2, #0]
	DWT_CONTROL |= DWT_CTRL_CYCCNTENA_Msk;   // запускаем счётчик
 80008dc:	4b05      	ldr	r3, [pc, #20]	; (80008f4 <DWT_Init+0x28>)
 80008de:	681b      	ldr	r3, [r3, #0]
 80008e0:	4a04      	ldr	r2, [pc, #16]	; (80008f4 <DWT_Init+0x28>)
 80008e2:	f043 0301 	orr.w	r3, r3, #1
 80008e6:	6013      	str	r3, [r2, #0]
}
 80008e8:	bf00      	nop
 80008ea:	46bd      	mov	sp, r7
 80008ec:	bc80      	pop	{r7}
 80008ee:	4770      	bx	lr
 80008f0:	e000edfc 	.word	0xe000edfc
 80008f4:	e0001000 	.word	0xe0001000

080008f8 <delay_us>:

void delay_us(uint32_t us) // DelayMicro
{
 80008f8:	b480      	push	{r7}
 80008fa:	b085      	sub	sp, #20
 80008fc:	af00      	add	r7, sp, #0
 80008fe:	6078      	str	r0, [r7, #4]
    uint32_t us_count_tic =  us * (SystemCoreClock / 1000000);
 8000900:	4b0b      	ldr	r3, [pc, #44]	; (8000930 <delay_us+0x38>)
 8000902:	681b      	ldr	r3, [r3, #0]
 8000904:	4a0b      	ldr	r2, [pc, #44]	; (8000934 <delay_us+0x3c>)
 8000906:	fba2 2303 	umull	r2, r3, r2, r3
 800090a:	0c9a      	lsrs	r2, r3, #18
 800090c:	687b      	ldr	r3, [r7, #4]
 800090e:	fb02 f303 	mul.w	r3, r2, r3
 8000912:	60fb      	str	r3, [r7, #12]
    DWT->CYCCNT = 0U; // обнуляем счётчик
 8000914:	4b08      	ldr	r3, [pc, #32]	; (8000938 <delay_us+0x40>)
 8000916:	2200      	movs	r2, #0
 8000918:	605a      	str	r2, [r3, #4]
    while(DWT->CYCCNT < us_count_tic);
 800091a:	bf00      	nop
 800091c:	4b06      	ldr	r3, [pc, #24]	; (8000938 <delay_us+0x40>)
 800091e:	685b      	ldr	r3, [r3, #4]
 8000920:	68fa      	ldr	r2, [r7, #12]
 8000922:	429a      	cmp	r2, r3
 8000924:	d8fa      	bhi.n	800091c <delay_us+0x24>
}
 8000926:	bf00      	nop
 8000928:	3714      	adds	r7, #20
 800092a:	46bd      	mov	sp, r7
 800092c:	bc80      	pop	{r7}
 800092e:	4770      	bx	lr
 8000930:	20000000 	.word	0x20000000
 8000934:	431bde83 	.word	0x431bde83
 8000938:	e0001000 	.word	0xe0001000

0800093c <csn>:

void csn(uint8_t level)
{
 800093c:	b580      	push	{r7, lr}
 800093e:	b082      	sub	sp, #8
 8000940:	af00      	add	r7, sp, #0
 8000942:	4603      	mov	r3, r0
 8000944:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(CSN_GPIO_Port, CSN_Pin, level);
 8000946:	79fb      	ldrb	r3, [r7, #7]
 8000948:	461a      	mov	r2, r3
 800094a:	2110      	movs	r1, #16
 800094c:	4804      	ldr	r0, [pc, #16]	; (8000960 <csn+0x24>)
 800094e:	f001 f8ab 	bl	8001aa8 <HAL_GPIO_WritePin>
	delay_us(5);
 8000952:	2005      	movs	r0, #5
 8000954:	f7ff ffd0 	bl	80008f8 <delay_us>
}
 8000958:	bf00      	nop
 800095a:	3708      	adds	r7, #8
 800095c:	46bd      	mov	sp, r7
 800095e:	bd80      	pop	{r7, pc}
 8000960:	40010800 	.word	0x40010800

08000964 <ce>:

void ce(uint8_t level)
{
 8000964:	b580      	push	{r7, lr}
 8000966:	b082      	sub	sp, #8
 8000968:	af00      	add	r7, sp, #0
 800096a:	4603      	mov	r3, r0
 800096c:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(CE_GPIO_Port, CE_Pin, level);
 800096e:	79fb      	ldrb	r3, [r7, #7]
 8000970:	461a      	mov	r2, r3
 8000972:	2108      	movs	r1, #8
 8000974:	4803      	ldr	r0, [pc, #12]	; (8000984 <ce+0x20>)
 8000976:	f001 f897 	bl	8001aa8 <HAL_GPIO_WritePin>
}
 800097a:	bf00      	nop
 800097c:	3708      	adds	r7, #8
 800097e:	46bd      	mov	sp, r7
 8000980:	bd80      	pop	{r7, pc}
 8000982:	bf00      	nop
 8000984:	40010800 	.word	0x40010800

08000988 <read_register>:

uint8_t read_register(uint8_t reg)
{
 8000988:	b580      	push	{r7, lr}
 800098a:	b086      	sub	sp, #24
 800098c:	af02      	add	r7, sp, #8
 800098e:	4603      	mov	r3, r0
 8000990:	71fb      	strb	r3, [r7, #7]
	uint8_t addr = R_REGISTER | (REGISTER_MASK & reg);
 8000992:	79fb      	ldrb	r3, [r7, #7]
 8000994:	f003 031f 	and.w	r3, r3, #31
 8000998:	b2db      	uxtb	r3, r3
 800099a:	73fb      	strb	r3, [r7, #15]
	uint8_t dt = 0;
 800099c:	2300      	movs	r3, #0
 800099e:	73bb      	strb	r3, [r7, #14]

	csn(LOW);
 80009a0:	2000      	movs	r0, #0
 80009a2:	f7ff ffcb 	bl	800093c <csn>
	HAL_SPI_TransmitReceive(&hspi1, &addr, &dt, 1, 1000);
 80009a6:	f107 020e 	add.w	r2, r7, #14
 80009aa:	f107 010f 	add.w	r1, r7, #15
 80009ae:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80009b2:	9300      	str	r3, [sp, #0]
 80009b4:	2301      	movs	r3, #1
 80009b6:	480a      	ldr	r0, [pc, #40]	; (80009e0 <read_register+0x58>)
 80009b8:	f001 ff95 	bl	80028e6 <HAL_SPI_TransmitReceive>
	HAL_SPI_TransmitReceive(&hspi1, (uint8_t*)0xff, &dt, 1, 1000);
 80009bc:	f107 020e 	add.w	r2, r7, #14
 80009c0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80009c4:	9300      	str	r3, [sp, #0]
 80009c6:	2301      	movs	r3, #1
 80009c8:	21ff      	movs	r1, #255	; 0xff
 80009ca:	4805      	ldr	r0, [pc, #20]	; (80009e0 <read_register+0x58>)
 80009cc:	f001 ff8b 	bl	80028e6 <HAL_SPI_TransmitReceive>
	csn(HIGH);
 80009d0:	2001      	movs	r0, #1
 80009d2:	f7ff ffb3 	bl	800093c <csn>
	return dt;
 80009d6:	7bbb      	ldrb	r3, [r7, #14]
}
 80009d8:	4618      	mov	r0, r3
 80009da:	3710      	adds	r7, #16
 80009dc:	46bd      	mov	sp, r7
 80009de:	bd80      	pop	{r7, pc}
 80009e0:	200000e4 	.word	0x200000e4

080009e4 <write_registerMy>:

uint8_t write_registerMy(uint8_t reg, const uint8_t* buf, uint8_t len)
{
 80009e4:	b580      	push	{r7, lr}
 80009e6:	b086      	sub	sp, #24
 80009e8:	af02      	add	r7, sp, #8
 80009ea:	4603      	mov	r3, r0
 80009ec:	6039      	str	r1, [r7, #0]
 80009ee:	71fb      	strb	r3, [r7, #7]
 80009f0:	4613      	mov	r3, r2
 80009f2:	71bb      	strb	r3, [r7, #6]
	uint8_t status = 0;
 80009f4:	2300      	movs	r3, #0
 80009f6:	73fb      	strb	r3, [r7, #15]
	uint8_t addr = W_REGISTER | (REGISTER_MASK & reg);
 80009f8:	79fb      	ldrb	r3, [r7, #7]
 80009fa:	f003 031f 	and.w	r3, r3, #31
 80009fe:	b2db      	uxtb	r3, r3
 8000a00:	f043 0320 	orr.w	r3, r3, #32
 8000a04:	b2db      	uxtb	r3, r3
 8000a06:	73bb      	strb	r3, [r7, #14]

	csn(LOW);
 8000a08:	2000      	movs	r0, #0
 8000a0a:	f7ff ff97 	bl	800093c <csn>
	HAL_SPI_TransmitReceive(&hspi1, &addr, &status, 1, 100);
 8000a0e:	f107 020f 	add.w	r2, r7, #15
 8000a12:	f107 010e 	add.w	r1, r7, #14
 8000a16:	2364      	movs	r3, #100	; 0x64
 8000a18:	9300      	str	r3, [sp, #0]
 8000a1a:	2301      	movs	r3, #1
 8000a1c:	4808      	ldr	r0, [pc, #32]	; (8000a40 <write_registerMy+0x5c>)
 8000a1e:	f001 ff62 	bl	80028e6 <HAL_SPI_TransmitReceive>
	HAL_SPI_Transmit(&hspi1, (uint8_t*)buf, len, 100);
 8000a22:	79bb      	ldrb	r3, [r7, #6]
 8000a24:	b29a      	uxth	r2, r3
 8000a26:	2364      	movs	r3, #100	; 0x64
 8000a28:	6839      	ldr	r1, [r7, #0]
 8000a2a:	4805      	ldr	r0, [pc, #20]	; (8000a40 <write_registerMy+0x5c>)
 8000a2c:	f001 fd0e 	bl	800244c <HAL_SPI_Transmit>
	csn(HIGH);
 8000a30:	2001      	movs	r0, #1
 8000a32:	f7ff ff83 	bl	800093c <csn>
	return status;
 8000a36:	7bfb      	ldrb	r3, [r7, #15]
}
 8000a38:	4618      	mov	r0, r3
 8000a3a:	3710      	adds	r7, #16
 8000a3c:	46bd      	mov	sp, r7
 8000a3e:	bd80      	pop	{r7, pc}
 8000a40:	200000e4 	.word	0x200000e4

08000a44 <write_register>:

uint8_t write_register(uint8_t reg, uint8_t value)
{
 8000a44:	b580      	push	{r7, lr}
 8000a46:	b086      	sub	sp, #24
 8000a48:	af02      	add	r7, sp, #8
 8000a4a:	4603      	mov	r3, r0
 8000a4c:	460a      	mov	r2, r1
 8000a4e:	71fb      	strb	r3, [r7, #7]
 8000a50:	4613      	mov	r3, r2
 8000a52:	71bb      	strb	r3, [r7, #6]
	uint8_t status = 0;
 8000a54:	2300      	movs	r3, #0
 8000a56:	73fb      	strb	r3, [r7, #15]
	uint8_t addr = W_REGISTER | (REGISTER_MASK & reg);
 8000a58:	79fb      	ldrb	r3, [r7, #7]
 8000a5a:	f003 031f 	and.w	r3, r3, #31
 8000a5e:	b2db      	uxtb	r3, r3
 8000a60:	f043 0320 	orr.w	r3, r3, #32
 8000a64:	b2db      	uxtb	r3, r3
 8000a66:	73bb      	strb	r3, [r7, #14]
	csn(LOW);
 8000a68:	2000      	movs	r0, #0
 8000a6a:	f7ff ff67 	bl	800093c <csn>
	HAL_SPI_TransmitReceive(&hspi1, &addr, &status, 1, 100);
 8000a6e:	f107 020f 	add.w	r2, r7, #15
 8000a72:	f107 010e 	add.w	r1, r7, #14
 8000a76:	2364      	movs	r3, #100	; 0x64
 8000a78:	9300      	str	r3, [sp, #0]
 8000a7a:	2301      	movs	r3, #1
 8000a7c:	4808      	ldr	r0, [pc, #32]	; (8000aa0 <write_register+0x5c>)
 8000a7e:	f001 ff32 	bl	80028e6 <HAL_SPI_TransmitReceive>
	HAL_SPI_Transmit(&hspi1, &value, 1, 1000);
 8000a82:	1db9      	adds	r1, r7, #6
 8000a84:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000a88:	2201      	movs	r2, #1
 8000a8a:	4805      	ldr	r0, [pc, #20]	; (8000aa0 <write_register+0x5c>)
 8000a8c:	f001 fcde 	bl	800244c <HAL_SPI_Transmit>
	csn(HIGH);
 8000a90:	2001      	movs	r0, #1
 8000a92:	f7ff ff53 	bl	800093c <csn>
	return status;
 8000a96:	7bfb      	ldrb	r3, [r7, #15]
}
 8000a98:	4618      	mov	r0, r3
 8000a9a:	3710      	adds	r7, #16
 8000a9c:	46bd      	mov	sp, r7
 8000a9e:	bd80      	pop	{r7, pc}
 8000aa0:	200000e4 	.word	0x200000e4

08000aa4 <read_payload>:
	csn(HIGH);
	return status;
}

uint8_t read_payload(void* buf, uint8_t data_len)
{
 8000aa4:	b580      	push	{r7, lr}
 8000aa6:	b086      	sub	sp, #24
 8000aa8:	af00      	add	r7, sp, #0
 8000aaa:	6078      	str	r0, [r7, #4]
 8000aac:	460b      	mov	r3, r1
 8000aae:	70fb      	strb	r3, [r7, #3]
	uint8_t status = 0;
 8000ab0:	2300      	movs	r3, #0
 8000ab2:	75bb      	strb	r3, [r7, #22]
	uint8_t* current = (uint8_t*)buf;
 8000ab4:	687b      	ldr	r3, [r7, #4]
 8000ab6:	613b      	str	r3, [r7, #16]

	if(data_len > payload_size)
 8000ab8:	4b1e      	ldr	r3, [pc, #120]	; (8000b34 <read_payload+0x90>)
 8000aba:	781b      	ldrb	r3, [r3, #0]
 8000abc:	78fa      	ldrb	r2, [r7, #3]
 8000abe:	429a      	cmp	r2, r3
 8000ac0:	d902      	bls.n	8000ac8 <read_payload+0x24>
	{
		data_len = payload_size;
 8000ac2:	4b1c      	ldr	r3, [pc, #112]	; (8000b34 <read_payload+0x90>)
 8000ac4:	781b      	ldrb	r3, [r3, #0]
 8000ac6:	70fb      	strb	r3, [r7, #3]
	}

	uint8_t blank_len = dynamic_payloads_enabled ? 0 : payload_size - data_len;
 8000ac8:	4b1b      	ldr	r3, [pc, #108]	; (8000b38 <read_payload+0x94>)
 8000aca:	781b      	ldrb	r3, [r3, #0]
 8000acc:	2b00      	cmp	r3, #0
 8000ace:	d001      	beq.n	8000ad4 <read_payload+0x30>
 8000ad0:	2300      	movs	r3, #0
 8000ad2:	e004      	b.n	8000ade <read_payload+0x3a>
 8000ad4:	4b17      	ldr	r3, [pc, #92]	; (8000b34 <read_payload+0x90>)
 8000ad6:	781a      	ldrb	r2, [r3, #0]
 8000ad8:	78fb      	ldrb	r3, [r7, #3]
 8000ada:	1ad3      	subs	r3, r2, r3
 8000adc:	b2db      	uxtb	r3, r3
 8000ade:	75fb      	strb	r3, [r7, #23]

	uint8_t addr = R_RX_PAYLOAD;
 8000ae0:	2361      	movs	r3, #97	; 0x61
 8000ae2:	73fb      	strb	r3, [r7, #15]
	csn(LOW);
 8000ae4:	2000      	movs	r0, #0
 8000ae6:	f7ff ff29 	bl	800093c <csn>
	HAL_SPI_Transmit(&hspi1, &addr, 1, 100);
 8000aea:	f107 010f 	add.w	r1, r7, #15
 8000aee:	2364      	movs	r3, #100	; 0x64
 8000af0:	2201      	movs	r2, #1
 8000af2:	4812      	ldr	r0, [pc, #72]	; (8000b3c <read_payload+0x98>)
 8000af4:	f001 fcaa 	bl	800244c <HAL_SPI_Transmit>
	HAL_SPI_Receive(&hspi1, (uint8_t*)current, data_len, 100);
 8000af8:	78fb      	ldrb	r3, [r7, #3]
 8000afa:	b29a      	uxth	r2, r3
 8000afc:	2364      	movs	r3, #100	; 0x64
 8000afe:	6939      	ldr	r1, [r7, #16]
 8000b00:	480e      	ldr	r0, [pc, #56]	; (8000b3c <read_payload+0x98>)
 8000b02:	f001 fddf 	bl	80026c4 <HAL_SPI_Receive>

	while(blank_len--)
 8000b06:	e008      	b.n	8000b1a <read_payload+0x76>
	{
		uint8_t empt = 0;
 8000b08:	2300      	movs	r3, #0
 8000b0a:	73bb      	strb	r3, [r7, #14]
		HAL_SPI_Receive(&hspi1, &empt, 1, 100);
 8000b0c:	f107 010e 	add.w	r1, r7, #14
 8000b10:	2364      	movs	r3, #100	; 0x64
 8000b12:	2201      	movs	r2, #1
 8000b14:	4809      	ldr	r0, [pc, #36]	; (8000b3c <read_payload+0x98>)
 8000b16:	f001 fdd5 	bl	80026c4 <HAL_SPI_Receive>
	while(blank_len--)
 8000b1a:	7dfb      	ldrb	r3, [r7, #23]
 8000b1c:	1e5a      	subs	r2, r3, #1
 8000b1e:	75fa      	strb	r2, [r7, #23]
 8000b20:	2b00      	cmp	r3, #0
 8000b22:	d1f1      	bne.n	8000b08 <read_payload+0x64>
	}

	csn(HIGH);
 8000b24:	2001      	movs	r0, #1
 8000b26:	f7ff ff09 	bl	800093c <csn>
	return status;
 8000b2a:	7dbb      	ldrb	r3, [r7, #22]
}
 8000b2c:	4618      	mov	r0, r3
 8000b2e:	3718      	adds	r7, #24
 8000b30:	46bd      	mov	sp, r7
 8000b32:	bd80      	pop	{r7, pc}
 8000b34:	2000008d 	.word	0x2000008d
 8000b38:	2000013c 	.word	0x2000013c
 8000b3c:	200000e4 	.word	0x200000e4

08000b40 <flush_rx>:

uint8_t flush_rx(void)
{
 8000b40:	b580      	push	{r7, lr}
 8000b42:	af00      	add	r7, sp, #0
	return spiTrans(FLUSH_RX);
 8000b44:	20e2      	movs	r0, #226	; 0xe2
 8000b46:	f000 f80b 	bl	8000b60 <spiTrans>
 8000b4a:	4603      	mov	r3, r0
}
 8000b4c:	4618      	mov	r0, r3
 8000b4e:	bd80      	pop	{r7, pc}

08000b50 <flush_tx>:

uint8_t flush_tx(void)
{
 8000b50:	b580      	push	{r7, lr}
 8000b52:	af00      	add	r7, sp, #0
	return spiTrans(FLUSH_TX);
 8000b54:	20e1      	movs	r0, #225	; 0xe1
 8000b56:	f000 f803 	bl	8000b60 <spiTrans>
 8000b5a:	4603      	mov	r3, r0
}
 8000b5c:	4618      	mov	r0, r3
 8000b5e:	bd80      	pop	{r7, pc}

08000b60 <spiTrans>:

uint8_t spiTrans(uint8_t cmd)
{
 8000b60:	b580      	push	{r7, lr}
 8000b62:	b086      	sub	sp, #24
 8000b64:	af02      	add	r7, sp, #8
 8000b66:	4603      	mov	r3, r0
 8000b68:	71fb      	strb	r3, [r7, #7]
	uint8_t status = 0;
 8000b6a:	2300      	movs	r3, #0
 8000b6c:	73fb      	strb	r3, [r7, #15]
	csn(LOW);
 8000b6e:	2000      	movs	r0, #0
 8000b70:	f7ff fee4 	bl	800093c <csn>
	HAL_SPI_TransmitReceive(&hspi1, &cmd, &status, 1, 1000);
 8000b74:	f107 020f 	add.w	r2, r7, #15
 8000b78:	1df9      	adds	r1, r7, #7
 8000b7a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000b7e:	9300      	str	r3, [sp, #0]
 8000b80:	2301      	movs	r3, #1
 8000b82:	4805      	ldr	r0, [pc, #20]	; (8000b98 <spiTrans+0x38>)
 8000b84:	f001 feaf 	bl	80028e6 <HAL_SPI_TransmitReceive>
	csn(HIGH);
 8000b88:	2001      	movs	r0, #1
 8000b8a:	f7ff fed7 	bl	800093c <csn>
	return status;
 8000b8e:	7bfb      	ldrb	r3, [r7, #15]
}
 8000b90:	4618      	mov	r0, r3
 8000b92:	3710      	adds	r7, #16
 8000b94:	46bd      	mov	sp, r7
 8000b96:	bd80      	pop	{r7, pc}
 8000b98:	200000e4 	.word	0x200000e4

08000b9c <get_status>:

uint8_t get_status(void)
{
 8000b9c:	b580      	push	{r7, lr}
 8000b9e:	af00      	add	r7, sp, #0
	return spiTrans(NOP);
 8000ba0:	20ff      	movs	r0, #255	; 0xff
 8000ba2:	f7ff ffdd 	bl	8000b60 <spiTrans>
 8000ba6:	4603      	mov	r3, r0
}
 8000ba8:	4618      	mov	r0, r3
 8000baa:	bd80      	pop	{r7, pc}

08000bac <setChannel>:

void setChannel(uint8_t channel)
{
 8000bac:	b580      	push	{r7, lr}
 8000bae:	b082      	sub	sp, #8
 8000bb0:	af00      	add	r7, sp, #0
 8000bb2:	4603      	mov	r3, r0
 8000bb4:	71fb      	strb	r3, [r7, #7]
	write_register(RF_CH, channel);
 8000bb6:	79fb      	ldrb	r3, [r7, #7]
 8000bb8:	4619      	mov	r1, r3
 8000bba:	2005      	movs	r0, #5
 8000bbc:	f7ff ff42 	bl	8000a44 <write_register>
}
 8000bc0:	bf00      	nop
 8000bc2:	3708      	adds	r7, #8
 8000bc4:	46bd      	mov	sp, r7
 8000bc6:	bd80      	pop	{r7, pc}

08000bc8 <getChannel>:

uint8_t getChannel()
{
 8000bc8:	b580      	push	{r7, lr}
 8000bca:	af00      	add	r7, sp, #0
	return read_register(RF_CH);
 8000bcc:	2005      	movs	r0, #5
 8000bce:	f7ff fedb 	bl	8000988 <read_register>
 8000bd2:	4603      	mov	r3, r0
}
 8000bd4:	4618      	mov	r0, r3
 8000bd6:	bd80      	pop	{r7, pc}

08000bd8 <getPayloadSize>:
{
	payload_size = rf24_min(size, 32);
}

uint8_t getPayloadSize(void)
{
 8000bd8:	b480      	push	{r7}
 8000bda:	af00      	add	r7, sp, #0
	return payload_size;
 8000bdc:	4b02      	ldr	r3, [pc, #8]	; (8000be8 <getPayloadSize+0x10>)
 8000bde:	781b      	ldrb	r3, [r3, #0]
}
 8000be0:	4618      	mov	r0, r3
 8000be2:	46bd      	mov	sp, r7
 8000be4:	bc80      	pop	{r7}
 8000be6:	4770      	bx	lr
 8000be8:	2000008d 	.word	0x2000008d

08000bec <NRF_Init>:

uint8_t NRF_Init(void)
{
 8000bec:	b580      	push	{r7, lr}
 8000bee:	b082      	sub	sp, #8
 8000bf0:	af00      	add	r7, sp, #0
	uint8_t setup = 0;
 8000bf2:	2300      	movs	r3, #0
 8000bf4:	71fb      	strb	r3, [r7, #7]
	p_variant = false;
 8000bf6:	4b33      	ldr	r3, [pc, #204]	; (8000cc4 <NRF_Init+0xd8>)
 8000bf8:	2200      	movs	r2, #0
 8000bfa:	701a      	strb	r2, [r3, #0]
	payload_size = 32;
 8000bfc:	4b32      	ldr	r3, [pc, #200]	; (8000cc8 <NRF_Init+0xdc>)
 8000bfe:	2220      	movs	r2, #32
 8000c00:	701a      	strb	r2, [r3, #0]
	dynamic_payloads_enabled = false;
 8000c02:	4b32      	ldr	r3, [pc, #200]	; (8000ccc <NRF_Init+0xe0>)
 8000c04:	2200      	movs	r2, #0
 8000c06:	701a      	strb	r2, [r3, #0]
	addr_width = 5;
 8000c08:	4b31      	ldr	r3, [pc, #196]	; (8000cd0 <NRF_Init+0xe4>)
 8000c0a:	2205      	movs	r2, #5
 8000c0c:	701a      	strb	r2, [r3, #0]
	pipe0_reading_address[0] = 0;
 8000c0e:	4b31      	ldr	r3, [pc, #196]	; (8000cd4 <NRF_Init+0xe8>)
 8000c10:	2200      	movs	r2, #0
 8000c12:	701a      	strb	r2, [r3, #0]

	ce(LOW);
 8000c14:	2000      	movs	r0, #0
 8000c16:	f7ff fea5 	bl	8000964 <ce>
	csn(HIGH);
 8000c1a:	2001      	movs	r0, #1
 8000c1c:	f7ff fe8e 	bl	800093c <csn>
	HAL_Delay(5);
 8000c20:	2005      	movs	r0, #5
 8000c22:	f000 fcd1 	bl	80015c8 <HAL_Delay>

	write_register(NRF_CONFIG, 0x0C); // Reset NRF_CONFIG and enable 16-bit CRC.
 8000c26:	210c      	movs	r1, #12
 8000c28:	2000      	movs	r0, #0
 8000c2a:	f7ff ff0b 	bl	8000a44 <write_register>
	setRetries(5, 15);
 8000c2e:	210f      	movs	r1, #15
 8000c30:	2005      	movs	r0, #5
 8000c32:	f000 fafa 	bl	800122a <setRetries>
	setPALevel(RF24_PA_MAX); // Reset value is MAX
 8000c36:	2003      	movs	r0, #3
 8000c38:	f000 fa40 	bl	80010bc <setPALevel>

	if(setDataRate(RF24_250KBPS)) // check for connected module and if this is a p nRF24l01 variant
 8000c3c:	2002      	movs	r0, #2
 8000c3e:	f000 fa6f 	bl	8001120 <setDataRate>
 8000c42:	4603      	mov	r3, r0
 8000c44:	2b00      	cmp	r3, #0
 8000c46:	d002      	beq.n	8000c4e <NRF_Init+0x62>
	{
		p_variant = true;
 8000c48:	4b1e      	ldr	r3, [pc, #120]	; (8000cc4 <NRF_Init+0xd8>)
 8000c4a:	2201      	movs	r2, #1
 8000c4c:	701a      	strb	r2, [r3, #0]
	}

	setup = read_register(RF_SETUP);
 8000c4e:	2006      	movs	r0, #6
 8000c50:	f7ff fe9a 	bl	8000988 <read_register>
 8000c54:	4603      	mov	r3, r0
 8000c56:	71fb      	strb	r3, [r7, #7]
	setDataRate(RF24_1MBPS); // Then set the data rate to the slowest (and most reliable) speed supported by all hardware.
 8000c58:	2000      	movs	r0, #0
 8000c5a:	f000 fa61 	bl	8001120 <setDataRate>

	// Disable dynamic payloads, to match dynamic_payloads_enabled setting - Reset value is 0
	toggle_features();
 8000c5e:	f000 f9b7 	bl	8000fd0 <toggle_features>
	write_register(FEATURE, 0);
 8000c62:	2100      	movs	r1, #0
 8000c64:	201d      	movs	r0, #29
 8000c66:	f7ff feed 	bl	8000a44 <write_register>
	write_register(DYNPD, 0);
 8000c6a:	2100      	movs	r1, #0
 8000c6c:	201c      	movs	r0, #28
 8000c6e:	f7ff fee9 	bl	8000a44 <write_register>
	dynamic_payloads_enabled = false;
 8000c72:	4b16      	ldr	r3, [pc, #88]	; (8000ccc <NRF_Init+0xe0>)
 8000c74:	2200      	movs	r2, #0
 8000c76:	701a      	strb	r2, [r3, #0]

	// Reset current status. Notice reset and flush is the last thing we do
	write_register(NRF_STATUS, (1 << RX_DR) | (1 << TX_DS) | (1 << MAX_RT));
 8000c78:	2170      	movs	r1, #112	; 0x70
 8000c7a:	2007      	movs	r0, #7
 8000c7c:	f7ff fee2 	bl	8000a44 <write_register>
	setChannel(76);
 8000c80:	204c      	movs	r0, #76	; 0x4c
 8000c82:	f7ff ff93 	bl	8000bac <setChannel>
	flush_rx();
 8000c86:	f7ff ff5b 	bl	8000b40 <flush_rx>
	flush_tx();
 8000c8a:	f7ff ff61 	bl	8000b50 <flush_tx>
	powerUp(); //Power up by default when begin() is called
 8000c8e:	f000 f86f 	bl	8000d70 <powerUp>
	write_register(NRF_CONFIG, (read_register(NRF_CONFIG)) & ~(1 << PRIM_RX));
 8000c92:	2000      	movs	r0, #0
 8000c94:	f7ff fe78 	bl	8000988 <read_register>
 8000c98:	4603      	mov	r3, r0
 8000c9a:	f023 0301 	bic.w	r3, r3, #1
 8000c9e:	b2db      	uxtb	r3, r3
 8000ca0:	4619      	mov	r1, r3
 8000ca2:	2000      	movs	r0, #0
 8000ca4:	f7ff fece 	bl	8000a44 <write_register>
	return (setup != 0 && setup != 0xff);
 8000ca8:	79fb      	ldrb	r3, [r7, #7]
 8000caa:	2b00      	cmp	r3, #0
 8000cac:	d004      	beq.n	8000cb8 <NRF_Init+0xcc>
 8000cae:	79fb      	ldrb	r3, [r7, #7]
 8000cb0:	2bff      	cmp	r3, #255	; 0xff
 8000cb2:	d001      	beq.n	8000cb8 <NRF_Init+0xcc>
 8000cb4:	2301      	movs	r3, #1
 8000cb6:	e000      	b.n	8000cba <NRF_Init+0xce>
 8000cb8:	2300      	movs	r3, #0
 8000cba:	b2db      	uxtb	r3, r3
}
 8000cbc:	4618      	mov	r0, r3
 8000cbe:	3708      	adds	r7, #8
 8000cc0:	46bd      	mov	sp, r7
 8000cc2:	bd80      	pop	{r7, pc}
 8000cc4:	2000013d 	.word	0x2000013d
 8000cc8:	2000008d 	.word	0x2000008d
 8000ccc:	2000013c 	.word	0x2000013c
 8000cd0:	20000095 	.word	0x20000095
 8000cd4:	20000090 	.word	0x20000090

08000cd8 <isChipConnected>:

bool isChipConnected()
{
 8000cd8:	b580      	push	{r7, lr}
 8000cda:	b082      	sub	sp, #8
 8000cdc:	af00      	add	r7, sp, #0
	uint8_t setup = read_register(SETUP_AW);
 8000cde:	2003      	movs	r0, #3
 8000ce0:	f7ff fe52 	bl	8000988 <read_register>
 8000ce4:	4603      	mov	r3, r0
 8000ce6:	71fb      	strb	r3, [r7, #7]

	if(setup >= 1 && setup <= 3)
 8000ce8:	79fb      	ldrb	r3, [r7, #7]
 8000cea:	2b00      	cmp	r3, #0
 8000cec:	d004      	beq.n	8000cf8 <isChipConnected+0x20>
 8000cee:	79fb      	ldrb	r3, [r7, #7]
 8000cf0:	2b03      	cmp	r3, #3
 8000cf2:	d801      	bhi.n	8000cf8 <isChipConnected+0x20>
	{
		return true;
 8000cf4:	2301      	movs	r3, #1
 8000cf6:	e000      	b.n	8000cfa <isChipConnected+0x22>
	}

	return false;
 8000cf8:	2300      	movs	r3, #0
}
 8000cfa:	4618      	mov	r0, r3
 8000cfc:	3708      	adds	r7, #8
 8000cfe:	46bd      	mov	sp, r7
 8000d00:	bd80      	pop	{r7, pc}
	...

08000d04 <startListening>:

void startListening(void)
{
 8000d04:	b580      	push	{r7, lr}
 8000d06:	af00      	add	r7, sp, #0
	powerUp();
 8000d08:	f000 f832 	bl	8000d70 <powerUp>

	write_register(NRF_CONFIG, read_register(NRF_CONFIG) | (1 << PRIM_RX));
 8000d0c:	2000      	movs	r0, #0
 8000d0e:	f7ff fe3b 	bl	8000988 <read_register>
 8000d12:	4603      	mov	r3, r0
 8000d14:	f043 0301 	orr.w	r3, r3, #1
 8000d18:	b2db      	uxtb	r3, r3
 8000d1a:	4619      	mov	r1, r3
 8000d1c:	2000      	movs	r0, #0
 8000d1e:	f7ff fe91 	bl	8000a44 <write_register>
	write_register(NRF_STATUS, (1 << RX_DR) | (1 << TX_DS) | (1 << MAX_RT));
 8000d22:	2170      	movs	r1, #112	; 0x70
 8000d24:	2007      	movs	r0, #7
 8000d26:	f7ff fe8d 	bl	8000a44 <write_register>
	ce(HIGH);
 8000d2a:	2001      	movs	r0, #1
 8000d2c:	f7ff fe1a 	bl	8000964 <ce>
	// Restore the pipe0 adddress, if exists
	if(pipe0_reading_address[0] > 0)
 8000d30:	4b0d      	ldr	r3, [pc, #52]	; (8000d68 <startListening+0x64>)
 8000d32:	781b      	ldrb	r3, [r3, #0]
 8000d34:	2b00      	cmp	r3, #0
 8000d36:	d007      	beq.n	8000d48 <startListening+0x44>
	{
		write_registerMy(RX_ADDR_P0, pipe0_reading_address, addr_width);
 8000d38:	4b0c      	ldr	r3, [pc, #48]	; (8000d6c <startListening+0x68>)
 8000d3a:	781b      	ldrb	r3, [r3, #0]
 8000d3c:	461a      	mov	r2, r3
 8000d3e:	490a      	ldr	r1, [pc, #40]	; (8000d68 <startListening+0x64>)
 8000d40:	200a      	movs	r0, #10
 8000d42:	f7ff fe4f 	bl	80009e4 <write_registerMy>
 8000d46:	e002      	b.n	8000d4e <startListening+0x4a>
	}
	else
	{
		closeReadingPipe(0);
 8000d48:	2000      	movs	r0, #0
 8000d4a:	f000 f921 	bl	8000f90 <closeReadingPipe>
	}

	if(read_register(FEATURE) & (1 << EN_ACK_PAY))
 8000d4e:	201d      	movs	r0, #29
 8000d50:	f7ff fe1a 	bl	8000988 <read_register>
 8000d54:	4603      	mov	r3, r0
 8000d56:	f003 0302 	and.w	r3, r3, #2
 8000d5a:	2b00      	cmp	r3, #0
 8000d5c:	d001      	beq.n	8000d62 <startListening+0x5e>
	{
		flush_tx();
 8000d5e:	f7ff fef7 	bl	8000b50 <flush_tx>
	}
}
 8000d62:	bf00      	nop
 8000d64:	bd80      	pop	{r7, pc}
 8000d66:	bf00      	nop
 8000d68:	20000090 	.word	0x20000090
 8000d6c:	20000095 	.word	0x20000095

08000d70 <powerUp>:
	write_register(NRF_CONFIG, read_register(NRF_CONFIG) & ~(1 << PWR_UP));
}

//Power up now. Radio will not power down unless instructed by MCU for config changes etc.
void powerUp(void)
{
 8000d70:	b580      	push	{r7, lr}
 8000d72:	b082      	sub	sp, #8
 8000d74:	af00      	add	r7, sp, #0
	uint8_t cfg = read_register(NRF_CONFIG);
 8000d76:	2000      	movs	r0, #0
 8000d78:	f7ff fe06 	bl	8000988 <read_register>
 8000d7c:	4603      	mov	r3, r0
 8000d7e:	71fb      	strb	r3, [r7, #7]
	// if not powered up then power up and wait for the radio to initialize
	if(!(cfg & (1 << PWR_UP)))
 8000d80:	79fb      	ldrb	r3, [r7, #7]
 8000d82:	f003 0302 	and.w	r3, r3, #2
 8000d86:	2b00      	cmp	r3, #0
 8000d88:	d10a      	bne.n	8000da0 <powerUp+0x30>
	{
		write_register(NRF_CONFIG, cfg | (1 << PWR_UP));
 8000d8a:	79fb      	ldrb	r3, [r7, #7]
 8000d8c:	f043 0302 	orr.w	r3, r3, #2
 8000d90:	b2db      	uxtb	r3, r3
 8000d92:	4619      	mov	r1, r3
 8000d94:	2000      	movs	r0, #0
 8000d96:	f7ff fe55 	bl	8000a44 <write_register>
		HAL_Delay(5);
 8000d9a:	2005      	movs	r0, #5
 8000d9c:	f000 fc14 	bl	80015c8 <HAL_Delay>
	}
}
 8000da0:	bf00      	nop
 8000da2:	3708      	adds	r7, #8
 8000da4:	46bd      	mov	sp, r7
 8000da6:	bd80      	pop	{r7, pc}

08000da8 <maskIRQ>:
		ce(HIGH);
	}
}

void maskIRQ(bool tx, bool fail, bool rx)
{
 8000da8:	b580      	push	{r7, lr}
 8000daa:	b084      	sub	sp, #16
 8000dac:	af00      	add	r7, sp, #0
 8000dae:	4603      	mov	r3, r0
 8000db0:	71fb      	strb	r3, [r7, #7]
 8000db2:	460b      	mov	r3, r1
 8000db4:	71bb      	strb	r3, [r7, #6]
 8000db6:	4613      	mov	r3, r2
 8000db8:	717b      	strb	r3, [r7, #5]
	uint8_t config = read_register(NRF_CONFIG);
 8000dba:	2000      	movs	r0, #0
 8000dbc:	f7ff fde4 	bl	8000988 <read_register>
 8000dc0:	4603      	mov	r3, r0
 8000dc2:	73fb      	strb	r3, [r7, #15]
	config &= ~(1 << MASK_MAX_RT | 1 << MASK_TX_DS | 1 << MASK_RX_DR); //clear the interrupt flags
 8000dc4:	7bfb      	ldrb	r3, [r7, #15]
 8000dc6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8000dca:	73fb      	strb	r3, [r7, #15]
	config |= fail << MASK_MAX_RT | tx << MASK_TX_DS | rx << MASK_RX_DR; // set the specified interrupt flags
 8000dcc:	79bb      	ldrb	r3, [r7, #6]
 8000dce:	011b      	lsls	r3, r3, #4
 8000dd0:	b25a      	sxtb	r2, r3
 8000dd2:	79fb      	ldrb	r3, [r7, #7]
 8000dd4:	015b      	lsls	r3, r3, #5
 8000dd6:	b25b      	sxtb	r3, r3
 8000dd8:	4313      	orrs	r3, r2
 8000dda:	b25a      	sxtb	r2, r3
 8000ddc:	797b      	ldrb	r3, [r7, #5]
 8000dde:	019b      	lsls	r3, r3, #6
 8000de0:	b25b      	sxtb	r3, r3
 8000de2:	4313      	orrs	r3, r2
 8000de4:	b25a      	sxtb	r2, r3
 8000de6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000dea:	4313      	orrs	r3, r2
 8000dec:	b25b      	sxtb	r3, r3
 8000dee:	73fb      	strb	r3, [r7, #15]
	write_register(NRF_CONFIG, config);
 8000df0:	7bfb      	ldrb	r3, [r7, #15]
 8000df2:	4619      	mov	r1, r3
 8000df4:	2000      	movs	r0, #0
 8000df6:	f7ff fe25 	bl	8000a44 <write_register>
}
 8000dfa:	bf00      	nop
 8000dfc:	3710      	adds	r7, #16
 8000dfe:	46bd      	mov	sp, r7
 8000e00:	bd80      	pop	{r7, pc}
	...

08000e04 <getDynamicPayloadSize>:

uint8_t getDynamicPayloadSize(void)
{
 8000e04:	b580      	push	{r7, lr}
 8000e06:	b084      	sub	sp, #16
 8000e08:	af02      	add	r7, sp, #8
	uint8_t result = 0, addr;
 8000e0a:	2300      	movs	r3, #0
 8000e0c:	71fb      	strb	r3, [r7, #7]
	csn(LOW);
 8000e0e:	2000      	movs	r0, #0
 8000e10:	f7ff fd94 	bl	800093c <csn>
	addr = R_RX_PL_WID;
 8000e14:	2360      	movs	r3, #96	; 0x60
 8000e16:	71bb      	strb	r3, [r7, #6]
	HAL_SPI_TransmitReceive(&hspi1, &addr, &result, 1, 1000);
 8000e18:	1dfa      	adds	r2, r7, #7
 8000e1a:	1db9      	adds	r1, r7, #6
 8000e1c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000e20:	9300      	str	r3, [sp, #0]
 8000e22:	2301      	movs	r3, #1
 8000e24:	480e      	ldr	r0, [pc, #56]	; (8000e60 <getDynamicPayloadSize+0x5c>)
 8000e26:	f001 fd5e 	bl	80028e6 <HAL_SPI_TransmitReceive>
	HAL_SPI_TransmitReceive(&hspi1, (uint8_t*)0xff, &result, 1, 1000);
 8000e2a:	1dfa      	adds	r2, r7, #7
 8000e2c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000e30:	9300      	str	r3, [sp, #0]
 8000e32:	2301      	movs	r3, #1
 8000e34:	21ff      	movs	r1, #255	; 0xff
 8000e36:	480a      	ldr	r0, [pc, #40]	; (8000e60 <getDynamicPayloadSize+0x5c>)
 8000e38:	f001 fd55 	bl	80028e6 <HAL_SPI_TransmitReceive>
	csn(HIGH);
 8000e3c:	2001      	movs	r0, #1
 8000e3e:	f7ff fd7d 	bl	800093c <csn>

	if(result > 32)
 8000e42:	79fb      	ldrb	r3, [r7, #7]
 8000e44:	2b20      	cmp	r3, #32
 8000e46:	d906      	bls.n	8000e56 <getDynamicPayloadSize+0x52>
	{
		flush_rx();
 8000e48:	f7ff fe7a 	bl	8000b40 <flush_rx>
		HAL_Delay(2);
 8000e4c:	2002      	movs	r0, #2
 8000e4e:	f000 fbbb 	bl	80015c8 <HAL_Delay>
		return 0;
 8000e52:	2300      	movs	r3, #0
 8000e54:	e000      	b.n	8000e58 <getDynamicPayloadSize+0x54>
	}

	return result;
 8000e56:	79fb      	ldrb	r3, [r7, #7]
}
 8000e58:	4618      	mov	r0, r3
 8000e5a:	3708      	adds	r7, #8
 8000e5c:	46bd      	mov	sp, r7
 8000e5e:	bd80      	pop	{r7, pc}
 8000e60:	200000e4 	.word	0x200000e4

08000e64 <availableMy>:

bool availableMy(void)
{
 8000e64:	b580      	push	{r7, lr}
 8000e66:	af00      	add	r7, sp, #0
	return available(NULL);
 8000e68:	2000      	movs	r0, #0
 8000e6a:	f000 f803 	bl	8000e74 <available>
 8000e6e:	4603      	mov	r3, r0
}
 8000e70:	4618      	mov	r0, r3
 8000e72:	bd80      	pop	{r7, pc}

08000e74 <available>:

bool available(uint8_t* pipe_num)
{
 8000e74:	b580      	push	{r7, lr}
 8000e76:	b084      	sub	sp, #16
 8000e78:	af00      	add	r7, sp, #0
 8000e7a:	6078      	str	r0, [r7, #4]
	if(!(read_register(FIFO_STATUS) & (1 << RX_EMPTY)))
 8000e7c:	2017      	movs	r0, #23
 8000e7e:	f7ff fd83 	bl	8000988 <read_register>
 8000e82:	4603      	mov	r3, r0
 8000e84:	f003 0301 	and.w	r3, r3, #1
 8000e88:	2b00      	cmp	r3, #0
 8000e8a:	d110      	bne.n	8000eae <available+0x3a>
	{
		if(pipe_num) // If the caller wants the pipe number, include that
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	2b00      	cmp	r3, #0
 8000e90:	d00b      	beq.n	8000eaa <available+0x36>
		{
			uint8_t status = get_status();
 8000e92:	f7ff fe83 	bl	8000b9c <get_status>
 8000e96:	4603      	mov	r3, r0
 8000e98:	73fb      	strb	r3, [r7, #15]
			*pipe_num = (status >> RX_P_NO) & 0x07;
 8000e9a:	7bfb      	ldrb	r3, [r7, #15]
 8000e9c:	085b      	lsrs	r3, r3, #1
 8000e9e:	b2db      	uxtb	r3, r3
 8000ea0:	f003 0307 	and.w	r3, r3, #7
 8000ea4:	b2da      	uxtb	r2, r3
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	701a      	strb	r2, [r3, #0]
		}

		return 1;
 8000eaa:	2301      	movs	r3, #1
 8000eac:	e000      	b.n	8000eb0 <available+0x3c>
	}

	return 0;
 8000eae:	2300      	movs	r3, #0
}
 8000eb0:	4618      	mov	r0, r3
 8000eb2:	3710      	adds	r7, #16
 8000eb4:	46bd      	mov	sp, r7
 8000eb6:	bd80      	pop	{r7, pc}

08000eb8 <read>:

void read(void* buf, uint8_t len)
{
 8000eb8:	b580      	push	{r7, lr}
 8000eba:	b082      	sub	sp, #8
 8000ebc:	af00      	add	r7, sp, #0
 8000ebe:	6078      	str	r0, [r7, #4]
 8000ec0:	460b      	mov	r3, r1
 8000ec2:	70fb      	strb	r3, [r7, #3]
	read_payload(buf, len);
 8000ec4:	78fb      	ldrb	r3, [r7, #3]
 8000ec6:	4619      	mov	r1, r3
 8000ec8:	6878      	ldr	r0, [r7, #4]
 8000eca:	f7ff fdeb 	bl	8000aa4 <read_payload>
	write_register(NRF_STATUS, (1 << RX_DR) | (1 << MAX_RT) | (1 << TX_DS));
 8000ece:	2170      	movs	r1, #112	; 0x70
 8000ed0:	2007      	movs	r0, #7
 8000ed2:	f7ff fdb7 	bl	8000a44 <write_register>
}
 8000ed6:	bf00      	nop
 8000ed8:	3708      	adds	r7, #8
 8000eda:	46bd      	mov	sp, r7
 8000edc:	bd80      	pop	{r7, pc}
	...

08000ee0 <openReadingPipe>:

static const uint8_t child_payload_size[] = {RX_PW_P0, RX_PW_P1, RX_PW_P2, RX_PW_P3, RX_PW_P4, RX_PW_P5};


void openReadingPipe(uint8_t child, uint64_t address)
{
 8000ee0:	b580      	push	{r7, lr}
 8000ee2:	b084      	sub	sp, #16
 8000ee4:	af00      	add	r7, sp, #0
 8000ee6:	4601      	mov	r1, r0
 8000ee8:	e9c7 2300 	strd	r2, r3, [r7]
 8000eec:	460b      	mov	r3, r1
 8000eee:	73fb      	strb	r3, [r7, #15]
	if(child == 0)
 8000ef0:	7bfb      	ldrb	r3, [r7, #15]
 8000ef2:	2b00      	cmp	r3, #0
 8000ef4:	d107      	bne.n	8000f06 <openReadingPipe+0x26>
	{
		memcpy(pipe0_reading_address, &address, addr_width);
 8000ef6:	4b20      	ldr	r3, [pc, #128]	; (8000f78 <openReadingPipe+0x98>)
 8000ef8:	781b      	ldrb	r3, [r3, #0]
 8000efa:	461a      	mov	r2, r3
 8000efc:	463b      	mov	r3, r7
 8000efe:	4619      	mov	r1, r3
 8000f00:	481e      	ldr	r0, [pc, #120]	; (8000f7c <openReadingPipe+0x9c>)
 8000f02:	f002 f96d 	bl	80031e0 <memcpy>
	}

	if(child <= 6)
 8000f06:	7bfb      	ldrb	r3, [r7, #15]
 8000f08:	2b06      	cmp	r3, #6
 8000f0a:	d830      	bhi.n	8000f6e <openReadingPipe+0x8e>
	{
		// For pipes 2-5, only write the LSB
		if(child < 2)
 8000f0c:	7bfb      	ldrb	r3, [r7, #15]
 8000f0e:	2b01      	cmp	r3, #1
 8000f10:	d809      	bhi.n	8000f26 <openReadingPipe+0x46>
		  write_registerMy(child_pipe[child], (const uint8_t*)&address, addr_width);
 8000f12:	7bfb      	ldrb	r3, [r7, #15]
 8000f14:	4a1a      	ldr	r2, [pc, #104]	; (8000f80 <openReadingPipe+0xa0>)
 8000f16:	5cd0      	ldrb	r0, [r2, r3]
 8000f18:	4b17      	ldr	r3, [pc, #92]	; (8000f78 <openReadingPipe+0x98>)
 8000f1a:	781a      	ldrb	r2, [r3, #0]
 8000f1c:	463b      	mov	r3, r7
 8000f1e:	4619      	mov	r1, r3
 8000f20:	f7ff fd60 	bl	80009e4 <write_registerMy>
 8000f24:	e007      	b.n	8000f36 <openReadingPipe+0x56>
		else
		  write_registerMy(child_pipe[child], (const uint8_t*)&address, 1);
 8000f26:	7bfb      	ldrb	r3, [r7, #15]
 8000f28:	4a15      	ldr	r2, [pc, #84]	; (8000f80 <openReadingPipe+0xa0>)
 8000f2a:	5cd3      	ldrb	r3, [r2, r3]
 8000f2c:	4639      	mov	r1, r7
 8000f2e:	2201      	movs	r2, #1
 8000f30:	4618      	mov	r0, r3
 8000f32:	f7ff fd57 	bl	80009e4 <write_registerMy>

		write_register(child_payload_size[child], payload_size);
 8000f36:	7bfb      	ldrb	r3, [r7, #15]
 8000f38:	4a12      	ldr	r2, [pc, #72]	; (8000f84 <openReadingPipe+0xa4>)
 8000f3a:	5cd2      	ldrb	r2, [r2, r3]
 8000f3c:	4b12      	ldr	r3, [pc, #72]	; (8000f88 <openReadingPipe+0xa8>)
 8000f3e:	781b      	ldrb	r3, [r3, #0]
 8000f40:	4619      	mov	r1, r3
 8000f42:	4610      	mov	r0, r2
 8000f44:	f7ff fd7e 	bl	8000a44 <write_register>
		write_register(EN_RXADDR, read_register(EN_RXADDR) | (1 << child_pipe_enable[child]));
 8000f48:	2002      	movs	r0, #2
 8000f4a:	f7ff fd1d 	bl	8000988 <read_register>
 8000f4e:	4603      	mov	r3, r0
 8000f50:	b25a      	sxtb	r2, r3
 8000f52:	7bfb      	ldrb	r3, [r7, #15]
 8000f54:	490d      	ldr	r1, [pc, #52]	; (8000f8c <openReadingPipe+0xac>)
 8000f56:	5ccb      	ldrb	r3, [r1, r3]
 8000f58:	4619      	mov	r1, r3
 8000f5a:	2301      	movs	r3, #1
 8000f5c:	408b      	lsls	r3, r1
 8000f5e:	b25b      	sxtb	r3, r3
 8000f60:	4313      	orrs	r3, r2
 8000f62:	b25b      	sxtb	r3, r3
 8000f64:	b2db      	uxtb	r3, r3
 8000f66:	4619      	mov	r1, r3
 8000f68:	2002      	movs	r0, #2
 8000f6a:	f7ff fd6b 	bl	8000a44 <write_register>
	}
}
 8000f6e:	bf00      	nop
 8000f70:	3710      	adds	r7, #16
 8000f72:	46bd      	mov	sp, r7
 8000f74:	bd80      	pop	{r7, pc}
 8000f76:	bf00      	nop
 8000f78:	20000095 	.word	0x20000095
 8000f7c:	20000090 	.word	0x20000090
 8000f80:	08003c0c 	.word	0x08003c0c
 8000f84:	08003c14 	.word	0x08003c14
 8000f88:	2000008d 	.word	0x2000008d
 8000f8c:	08003c04 	.word	0x08003c04

08000f90 <closeReadingPipe>:
        addr_width = 2;
    }
}

void closeReadingPipe(uint8_t pipe)
{
 8000f90:	b580      	push	{r7, lr}
 8000f92:	b082      	sub	sp, #8
 8000f94:	af00      	add	r7, sp, #0
 8000f96:	4603      	mov	r3, r0
 8000f98:	71fb      	strb	r3, [r7, #7]
	write_register(EN_RXADDR, read_register(EN_RXADDR) & ~(1 << child_pipe_enable[pipe]));
 8000f9a:	2002      	movs	r0, #2
 8000f9c:	f7ff fcf4 	bl	8000988 <read_register>
 8000fa0:	4603      	mov	r3, r0
 8000fa2:	b25a      	sxtb	r2, r3
 8000fa4:	79fb      	ldrb	r3, [r7, #7]
 8000fa6:	4909      	ldr	r1, [pc, #36]	; (8000fcc <closeReadingPipe+0x3c>)
 8000fa8:	5ccb      	ldrb	r3, [r1, r3]
 8000faa:	4619      	mov	r1, r3
 8000fac:	2301      	movs	r3, #1
 8000fae:	408b      	lsls	r3, r1
 8000fb0:	b25b      	sxtb	r3, r3
 8000fb2:	43db      	mvns	r3, r3
 8000fb4:	b25b      	sxtb	r3, r3
 8000fb6:	4013      	ands	r3, r2
 8000fb8:	b25b      	sxtb	r3, r3
 8000fba:	b2db      	uxtb	r3, r3
 8000fbc:	4619      	mov	r1, r3
 8000fbe:	2002      	movs	r0, #2
 8000fc0:	f7ff fd40 	bl	8000a44 <write_register>
}
 8000fc4:	bf00      	nop
 8000fc6:	3708      	adds	r7, #8
 8000fc8:	46bd      	mov	sp, r7
 8000fca:	bd80      	pop	{r7, pc}
 8000fcc:	08003c04 	.word	0x08003c04

08000fd0 <toggle_features>:

void toggle_features(void)
{
 8000fd0:	b580      	push	{r7, lr}
 8000fd2:	b082      	sub	sp, #8
 8000fd4:	af00      	add	r7, sp, #0
	uint8_t addr = ACTIVATE;
 8000fd6:	2350      	movs	r3, #80	; 0x50
 8000fd8:	71fb      	strb	r3, [r7, #7]
	csn(LOW);
 8000fda:	2000      	movs	r0, #0
 8000fdc:	f7ff fcae 	bl	800093c <csn>
	HAL_SPI_Transmit(&hspi1, &addr, 1, 1000);
 8000fe0:	1df9      	adds	r1, r7, #7
 8000fe2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000fe6:	2201      	movs	r2, #1
 8000fe8:	4808      	ldr	r0, [pc, #32]	; (800100c <toggle_features+0x3c>)
 8000fea:	f001 fa2f 	bl	800244c <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&hspi1, (uint8_t*)0x73, 1, 1000);
 8000fee:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000ff2:	2201      	movs	r2, #1
 8000ff4:	2173      	movs	r1, #115	; 0x73
 8000ff6:	4805      	ldr	r0, [pc, #20]	; (800100c <toggle_features+0x3c>)
 8000ff8:	f001 fa28 	bl	800244c <HAL_SPI_Transmit>
	csn(HIGH);
 8000ffc:	2001      	movs	r0, #1
 8000ffe:	f7ff fc9d 	bl	800093c <csn>
}
 8001002:	bf00      	nop
 8001004:	3708      	adds	r7, #8
 8001006:	46bd      	mov	sp, r7
 8001008:	bd80      	pop	{r7, pc}
 800100a:	bf00      	nop
 800100c:	200000e4 	.word	0x200000e4

08001010 <enableAckPayload>:
	write_register(DYNPD, 0);
	dynamic_payloads_enabled = false;
}

void enableAckPayload(void)
{
 8001010:	b580      	push	{r7, lr}
 8001012:	af00      	add	r7, sp, #0
	write_register(FEATURE, read_register(FEATURE) | (1 << EN_ACK_PAY) | (1 << EN_DPL));
 8001014:	201d      	movs	r0, #29
 8001016:	f7ff fcb7 	bl	8000988 <read_register>
 800101a:	4603      	mov	r3, r0
 800101c:	f043 0306 	orr.w	r3, r3, #6
 8001020:	b2db      	uxtb	r3, r3
 8001022:	4619      	mov	r1, r3
 8001024:	201d      	movs	r0, #29
 8001026:	f7ff fd0d 	bl	8000a44 <write_register>
	write_register(DYNPD, read_register(DYNPD) | (1 << DPL_P1) | (1 << DPL_P0));
 800102a:	201c      	movs	r0, #28
 800102c:	f7ff fcac 	bl	8000988 <read_register>
 8001030:	4603      	mov	r3, r0
 8001032:	f043 0303 	orr.w	r3, r3, #3
 8001036:	b2db      	uxtb	r3, r3
 8001038:	4619      	mov	r1, r3
 800103a:	201c      	movs	r0, #28
 800103c:	f7ff fd02 	bl	8000a44 <write_register>
	dynamic_payloads_enabled = true;
 8001040:	4b02      	ldr	r3, [pc, #8]	; (800104c <enableAckPayload+0x3c>)
 8001042:	2201      	movs	r2, #1
 8001044:	701a      	strb	r2, [r3, #0]
}
 8001046:	bf00      	nop
 8001048:	bd80      	pop	{r7, pc}
 800104a:	bf00      	nop
 800104c:	2000013c 	.word	0x2000013c

08001050 <writeAckPayload>:
{
    write_register(FEATURE, read_register(FEATURE) | (1 << EN_DYN_ACK));
}

void writeAckPayload(uint8_t pipe, const void* buf, uint8_t len)
{
 8001050:	b580      	push	{r7, lr}
 8001052:	b084      	sub	sp, #16
 8001054:	af00      	add	r7, sp, #0
 8001056:	4603      	mov	r3, r0
 8001058:	6039      	str	r1, [r7, #0]
 800105a:	71fb      	strb	r3, [r7, #7]
 800105c:	4613      	mov	r3, r2
 800105e:	71bb      	strb	r3, [r7, #6]
	const uint8_t* current = (const uint8_t*)buf;
 8001060:	683b      	ldr	r3, [r7, #0]
 8001062:	60fb      	str	r3, [r7, #12]
	uint8_t data_len = rf24_min(len, 32);
 8001064:	79bb      	ldrb	r3, [r7, #6]
 8001066:	2b20      	cmp	r3, #32
 8001068:	bf28      	it	cs
 800106a:	2320      	movcs	r3, #32
 800106c:	72fb      	strb	r3, [r7, #11]
	uint8_t addr = W_ACK_PAYLOAD | (pipe & 0x07);
 800106e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001072:	f003 0307 	and.w	r3, r3, #7
 8001076:	b25b      	sxtb	r3, r3
 8001078:	f063 0357 	orn	r3, r3, #87	; 0x57
 800107c:	b25b      	sxtb	r3, r3
 800107e:	b2db      	uxtb	r3, r3
 8001080:	72bb      	strb	r3, [r7, #10]
	csn(LOW);
 8001082:	2000      	movs	r0, #0
 8001084:	f7ff fc5a 	bl	800093c <csn>
	HAL_SPI_Transmit(&hspi1, &addr, 1, 1000);
 8001088:	f107 010a 	add.w	r1, r7, #10
 800108c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001090:	2201      	movs	r2, #1
 8001092:	4809      	ldr	r0, [pc, #36]	; (80010b8 <writeAckPayload+0x68>)
 8001094:	f001 f9da 	bl	800244c <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&hspi1, (uint8_t*)current, data_len, 1000);
 8001098:	7afb      	ldrb	r3, [r7, #11]
 800109a:	b29a      	uxth	r2, r3
 800109c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80010a0:	68f9      	ldr	r1, [r7, #12]
 80010a2:	4805      	ldr	r0, [pc, #20]	; (80010b8 <writeAckPayload+0x68>)
 80010a4:	f001 f9d2 	bl	800244c <HAL_SPI_Transmit>
	csn(HIGH);
 80010a8:	2001      	movs	r0, #1
 80010aa:	f7ff fc47 	bl	800093c <csn>
}
 80010ae:	bf00      	nop
 80010b0:	3710      	adds	r7, #16
 80010b2:	46bd      	mov	sp, r7
 80010b4:	bd80      	pop	{r7, pc}
 80010b6:	bf00      	nop
 80010b8:	200000e4 	.word	0x200000e4

080010bc <setPALevel>:
		write_register(EN_AA, en_aa);
	}
}

void setPALevel(uint8_t level)
{
 80010bc:	b580      	push	{r7, lr}
 80010be:	b084      	sub	sp, #16
 80010c0:	af00      	add	r7, sp, #0
 80010c2:	4603      	mov	r3, r0
 80010c4:	71fb      	strb	r3, [r7, #7]
  uint8_t setup = read_register(RF_SETUP) & 0xF8;
 80010c6:	2006      	movs	r0, #6
 80010c8:	f7ff fc5e 	bl	8000988 <read_register>
 80010cc:	4603      	mov	r3, r0
 80010ce:	f023 0307 	bic.w	r3, r3, #7
 80010d2:	73fb      	strb	r3, [r7, #15]

  if(level > 3) // If invalid level, go to max PA
 80010d4:	79fb      	ldrb	r3, [r7, #7]
 80010d6:	2b03      	cmp	r3, #3
 80010d8:	d902      	bls.n	80010e0 <setPALevel+0x24>
  {
	  level = (RF24_PA_MAX << 1) + 1;		// +1 to support the SI24R1 chip extra bit
 80010da:	2307      	movs	r3, #7
 80010dc:	71fb      	strb	r3, [r7, #7]
 80010de:	e004      	b.n	80010ea <setPALevel+0x2e>
  }
  else
  {
	  level = (level << 1) + 1;	 		// Else set level as requested
 80010e0:	79fb      	ldrb	r3, [r7, #7]
 80010e2:	005b      	lsls	r3, r3, #1
 80010e4:	b2db      	uxtb	r3, r3
 80010e6:	3301      	adds	r3, #1
 80010e8:	71fb      	strb	r3, [r7, #7]
  }

  write_register(RF_SETUP, setup |= level);	// Write it to the chip
 80010ea:	7bfa      	ldrb	r2, [r7, #15]
 80010ec:	79fb      	ldrb	r3, [r7, #7]
 80010ee:	4313      	orrs	r3, r2
 80010f0:	73fb      	strb	r3, [r7, #15]
 80010f2:	7bfb      	ldrb	r3, [r7, #15]
 80010f4:	4619      	mov	r1, r3
 80010f6:	2006      	movs	r0, #6
 80010f8:	f7ff fca4 	bl	8000a44 <write_register>
}
 80010fc:	bf00      	nop
 80010fe:	3710      	adds	r7, #16
 8001100:	46bd      	mov	sp, r7
 8001102:	bd80      	pop	{r7, pc}

08001104 <getPALevel>:

uint8_t getPALevel(void)
{
 8001104:	b580      	push	{r7, lr}
 8001106:	af00      	add	r7, sp, #0
	return (read_register(RF_SETUP) & ((1 << RF_PWR_LOW) | (1 << RF_PWR_HIGH))) >> 1;
 8001108:	2006      	movs	r0, #6
 800110a:	f7ff fc3d 	bl	8000988 <read_register>
 800110e:	4603      	mov	r3, r0
 8001110:	105b      	asrs	r3, r3, #1
 8001112:	b2db      	uxtb	r3, r3
 8001114:	f003 0303 	and.w	r3, r3, #3
 8001118:	b2db      	uxtb	r3, r3
}
 800111a:	4618      	mov	r0, r3
 800111c:	bd80      	pop	{r7, pc}
	...

08001120 <setDataRate>:

bool setDataRate(rf24_datarate_e speed)
{
 8001120:	b580      	push	{r7, lr}
 8001122:	b084      	sub	sp, #16
 8001124:	af00      	add	r7, sp, #0
 8001126:	4603      	mov	r3, r0
 8001128:	71fb      	strb	r3, [r7, #7]
	bool result = false;
 800112a:	2300      	movs	r3, #0
 800112c:	73fb      	strb	r3, [r7, #15]
	uint8_t setup = read_register(RF_SETUP);
 800112e:	2006      	movs	r0, #6
 8001130:	f7ff fc2a 	bl	8000988 <read_register>
 8001134:	4603      	mov	r3, r0
 8001136:	73bb      	strb	r3, [r7, #14]
	setup &= ~((1 << RF_DR_LOW) | (1 << RF_DR_HIGH));
 8001138:	7bbb      	ldrb	r3, [r7, #14]
 800113a:	f023 0328 	bic.w	r3, r3, #40	; 0x28
 800113e:	73bb      	strb	r3, [r7, #14]
	txDelay = 85;
 8001140:	4b16      	ldr	r3, [pc, #88]	; (800119c <setDataRate+0x7c>)
 8001142:	2255      	movs	r2, #85	; 0x55
 8001144:	701a      	strb	r2, [r3, #0]

	if(speed == RF24_250KBPS)
 8001146:	79fb      	ldrb	r3, [r7, #7]
 8001148:	2b02      	cmp	r3, #2
 800114a:	d107      	bne.n	800115c <setDataRate+0x3c>
	{
		setup |= (1 << RF_DR_LOW);
 800114c:	7bbb      	ldrb	r3, [r7, #14]
 800114e:	f043 0320 	orr.w	r3, r3, #32
 8001152:	73bb      	strb	r3, [r7, #14]
		txDelay = 155;
 8001154:	4b11      	ldr	r3, [pc, #68]	; (800119c <setDataRate+0x7c>)
 8001156:	229b      	movs	r2, #155	; 0x9b
 8001158:	701a      	strb	r2, [r3, #0]
 800115a:	e009      	b.n	8001170 <setDataRate+0x50>
	}
	else
	{
		if(speed == RF24_2MBPS)
 800115c:	79fb      	ldrb	r3, [r7, #7]
 800115e:	2b01      	cmp	r3, #1
 8001160:	d106      	bne.n	8001170 <setDataRate+0x50>
		{
			setup |= (1 << RF_DR_HIGH);
 8001162:	7bbb      	ldrb	r3, [r7, #14]
 8001164:	f043 0308 	orr.w	r3, r3, #8
 8001168:	73bb      	strb	r3, [r7, #14]
			txDelay = 65;
 800116a:	4b0c      	ldr	r3, [pc, #48]	; (800119c <setDataRate+0x7c>)
 800116c:	2241      	movs	r2, #65	; 0x41
 800116e:	701a      	strb	r2, [r3, #0]
		}
	}

	write_register(RF_SETUP, setup);
 8001170:	7bbb      	ldrb	r3, [r7, #14]
 8001172:	4619      	mov	r1, r3
 8001174:	2006      	movs	r0, #6
 8001176:	f7ff fc65 	bl	8000a44 <write_register>
	uint8_t ggg = read_register(RF_SETUP);
 800117a:	2006      	movs	r0, #6
 800117c:	f7ff fc04 	bl	8000988 <read_register>
 8001180:	4603      	mov	r3, r0
 8001182:	737b      	strb	r3, [r7, #13]

	if(ggg == setup)
 8001184:	7b7a      	ldrb	r2, [r7, #13]
 8001186:	7bbb      	ldrb	r3, [r7, #14]
 8001188:	429a      	cmp	r2, r3
 800118a:	d101      	bne.n	8001190 <setDataRate+0x70>
	{
		result = true;
 800118c:	2301      	movs	r3, #1
 800118e:	73fb      	strb	r3, [r7, #15]
	}

	return result;
 8001190:	7bfb      	ldrb	r3, [r7, #15]
}
 8001192:	4618      	mov	r0, r3
 8001194:	3710      	adds	r7, #16
 8001196:	46bd      	mov	sp, r7
 8001198:	bd80      	pop	{r7, pc}
 800119a:	bf00      	nop
 800119c:	20000096 	.word	0x20000096

080011a0 <getDataRate>:

rf24_datarate_e getDataRate(void)
{
 80011a0:	b580      	push	{r7, lr}
 80011a2:	b082      	sub	sp, #8
 80011a4:	af00      	add	r7, sp, #0
	rf24_datarate_e result ;
	uint8_t dr = read_register(RF_SETUP) & ((1 << RF_DR_LOW) | (1 << RF_DR_HIGH));
 80011a6:	2006      	movs	r0, #6
 80011a8:	f7ff fbee 	bl	8000988 <read_register>
 80011ac:	4603      	mov	r3, r0
 80011ae:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80011b2:	71bb      	strb	r3, [r7, #6]

	// switch uses RAM (evil!)
	// Order matters in our case below
	if(dr == (1 << RF_DR_LOW))
 80011b4:	79bb      	ldrb	r3, [r7, #6]
 80011b6:	2b20      	cmp	r3, #32
 80011b8:	d102      	bne.n	80011c0 <getDataRate+0x20>
	{
		result = RF24_250KBPS;
 80011ba:	2302      	movs	r3, #2
 80011bc:	71fb      	strb	r3, [r7, #7]
 80011be:	e007      	b.n	80011d0 <getDataRate+0x30>
	}
	else if(dr == (1 << RF_DR_HIGH))
 80011c0:	79bb      	ldrb	r3, [r7, #6]
 80011c2:	2b08      	cmp	r3, #8
 80011c4:	d102      	bne.n	80011cc <getDataRate+0x2c>
	{
		result = RF24_2MBPS;
 80011c6:	2301      	movs	r3, #1
 80011c8:	71fb      	strb	r3, [r7, #7]
 80011ca:	e001      	b.n	80011d0 <getDataRate+0x30>
	}
	else
	{
		result = RF24_1MBPS;
 80011cc:	2300      	movs	r3, #0
 80011ce:	71fb      	strb	r3, [r7, #7]
	}

	return result;
 80011d0:	79fb      	ldrb	r3, [r7, #7]
}
 80011d2:	4618      	mov	r0, r3
 80011d4:	3708      	adds	r7, #8
 80011d6:	46bd      	mov	sp, r7
 80011d8:	bd80      	pop	{r7, pc}

080011da <getCRCLength>:

	write_register(NRF_CONFIG, config);
}

rf24_crclength_e getCRCLength(void)
{
 80011da:	b580      	push	{r7, lr}
 80011dc:	b082      	sub	sp, #8
 80011de:	af00      	add	r7, sp, #0
	rf24_crclength_e result = RF24_CRC_DISABLED;
 80011e0:	2300      	movs	r3, #0
 80011e2:	71fb      	strb	r3, [r7, #7]

	uint8_t config = read_register(NRF_CONFIG) & ((1 << CRCO) | (1 << EN_CRC));
 80011e4:	2000      	movs	r0, #0
 80011e6:	f7ff fbcf 	bl	8000988 <read_register>
 80011ea:	4603      	mov	r3, r0
 80011ec:	f003 030c 	and.w	r3, r3, #12
 80011f0:	71bb      	strb	r3, [r7, #6]
	uint8_t AA = read_register(EN_AA);
 80011f2:	2001      	movs	r0, #1
 80011f4:	f7ff fbc8 	bl	8000988 <read_register>
 80011f8:	4603      	mov	r3, r0
 80011fa:	717b      	strb	r3, [r7, #5]

	if(config & (1 << EN_CRC) || AA)
 80011fc:	79bb      	ldrb	r3, [r7, #6]
 80011fe:	f003 0308 	and.w	r3, r3, #8
 8001202:	2b00      	cmp	r3, #0
 8001204:	d102      	bne.n	800120c <getCRCLength+0x32>
 8001206:	797b      	ldrb	r3, [r7, #5]
 8001208:	2b00      	cmp	r3, #0
 800120a:	d009      	beq.n	8001220 <getCRCLength+0x46>
	{
		if(config & (1 << CRCO))
 800120c:	79bb      	ldrb	r3, [r7, #6]
 800120e:	f003 0304 	and.w	r3, r3, #4
 8001212:	2b00      	cmp	r3, #0
 8001214:	d002      	beq.n	800121c <getCRCLength+0x42>
		  result = RF24_CRC_16;
 8001216:	2302      	movs	r3, #2
 8001218:	71fb      	strb	r3, [r7, #7]
 800121a:	e001      	b.n	8001220 <getCRCLength+0x46>
		else
		  result = RF24_CRC_8;
 800121c:	2301      	movs	r3, #1
 800121e:	71fb      	strb	r3, [r7, #7]
	}

	return result;
 8001220:	79fb      	ldrb	r3, [r7, #7]
}
 8001222:	4618      	mov	r0, r3
 8001224:	3708      	adds	r7, #8
 8001226:	46bd      	mov	sp, r7
 8001228:	bd80      	pop	{r7, pc}

0800122a <setRetries>:
	uint8_t disable = read_register(NRF_CONFIG) & ~(1 << EN_CRC);
	write_register(NRF_CONFIG, disable);
}

void setRetries(uint8_t delay, uint8_t count)
{
 800122a:	b580      	push	{r7, lr}
 800122c:	b082      	sub	sp, #8
 800122e:	af00      	add	r7, sp, #0
 8001230:	4603      	mov	r3, r0
 8001232:	460a      	mov	r2, r1
 8001234:	71fb      	strb	r3, [r7, #7]
 8001236:	4613      	mov	r3, r2
 8001238:	71bb      	strb	r3, [r7, #6]
	write_register(SETUP_RETR, (delay&0xf)<<ARD | (count&0xf)<<ARC);
 800123a:	79fb      	ldrb	r3, [r7, #7]
 800123c:	011b      	lsls	r3, r3, #4
 800123e:	b25a      	sxtb	r2, r3
 8001240:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8001244:	f003 030f 	and.w	r3, r3, #15
 8001248:	b25b      	sxtb	r3, r3
 800124a:	4313      	orrs	r3, r2
 800124c:	b25b      	sxtb	r3, r3
 800124e:	b2db      	uxtb	r3, r3
 8001250:	4619      	mov	r1, r3
 8001252:	2004      	movs	r0, #4
 8001254:	f7ff fbf6 	bl	8000a44 <write_register>
}
 8001258:	bf00      	nop
 800125a:	3708      	adds	r7, #8
 800125c:	46bd      	mov	sp, r7
 800125e:	bd80      	pop	{r7, pc}

08001260 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001260:	b480      	push	{r7}
 8001262:	b085      	sub	sp, #20
 8001264:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001266:	4b15      	ldr	r3, [pc, #84]	; (80012bc <HAL_MspInit+0x5c>)
 8001268:	699b      	ldr	r3, [r3, #24]
 800126a:	4a14      	ldr	r2, [pc, #80]	; (80012bc <HAL_MspInit+0x5c>)
 800126c:	f043 0301 	orr.w	r3, r3, #1
 8001270:	6193      	str	r3, [r2, #24]
 8001272:	4b12      	ldr	r3, [pc, #72]	; (80012bc <HAL_MspInit+0x5c>)
 8001274:	699b      	ldr	r3, [r3, #24]
 8001276:	f003 0301 	and.w	r3, r3, #1
 800127a:	60bb      	str	r3, [r7, #8]
 800127c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800127e:	4b0f      	ldr	r3, [pc, #60]	; (80012bc <HAL_MspInit+0x5c>)
 8001280:	69db      	ldr	r3, [r3, #28]
 8001282:	4a0e      	ldr	r2, [pc, #56]	; (80012bc <HAL_MspInit+0x5c>)
 8001284:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001288:	61d3      	str	r3, [r2, #28]
 800128a:	4b0c      	ldr	r3, [pc, #48]	; (80012bc <HAL_MspInit+0x5c>)
 800128c:	69db      	ldr	r3, [r3, #28]
 800128e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001292:	607b      	str	r3, [r7, #4]
 8001294:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 8001296:	4b0a      	ldr	r3, [pc, #40]	; (80012c0 <HAL_MspInit+0x60>)
 8001298:	685b      	ldr	r3, [r3, #4]
 800129a:	60fb      	str	r3, [r7, #12]
 800129c:	68fb      	ldr	r3, [r7, #12]
 800129e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80012a2:	60fb      	str	r3, [r7, #12]
 80012a4:	68fb      	ldr	r3, [r7, #12]
 80012a6:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80012aa:	60fb      	str	r3, [r7, #12]
 80012ac:	4a04      	ldr	r2, [pc, #16]	; (80012c0 <HAL_MspInit+0x60>)
 80012ae:	68fb      	ldr	r3, [r7, #12]
 80012b0:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80012b2:	bf00      	nop
 80012b4:	3714      	adds	r7, #20
 80012b6:	46bd      	mov	sp, r7
 80012b8:	bc80      	pop	{r7}
 80012ba:	4770      	bx	lr
 80012bc:	40021000 	.word	0x40021000
 80012c0:	40010000 	.word	0x40010000

080012c4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80012c4:	b580      	push	{r7, lr}
 80012c6:	b088      	sub	sp, #32
 80012c8:	af00      	add	r7, sp, #0
 80012ca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012cc:	f107 0310 	add.w	r3, r7, #16
 80012d0:	2200      	movs	r2, #0
 80012d2:	601a      	str	r2, [r3, #0]
 80012d4:	605a      	str	r2, [r3, #4]
 80012d6:	609a      	str	r2, [r3, #8]
 80012d8:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	4a1b      	ldr	r2, [pc, #108]	; (800134c <HAL_SPI_MspInit+0x88>)
 80012e0:	4293      	cmp	r3, r2
 80012e2:	d12f      	bne.n	8001344 <HAL_SPI_MspInit+0x80>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80012e4:	4b1a      	ldr	r3, [pc, #104]	; (8001350 <HAL_SPI_MspInit+0x8c>)
 80012e6:	699b      	ldr	r3, [r3, #24]
 80012e8:	4a19      	ldr	r2, [pc, #100]	; (8001350 <HAL_SPI_MspInit+0x8c>)
 80012ea:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80012ee:	6193      	str	r3, [r2, #24]
 80012f0:	4b17      	ldr	r3, [pc, #92]	; (8001350 <HAL_SPI_MspInit+0x8c>)
 80012f2:	699b      	ldr	r3, [r3, #24]
 80012f4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80012f8:	60fb      	str	r3, [r7, #12]
 80012fa:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80012fc:	4b14      	ldr	r3, [pc, #80]	; (8001350 <HAL_SPI_MspInit+0x8c>)
 80012fe:	699b      	ldr	r3, [r3, #24]
 8001300:	4a13      	ldr	r2, [pc, #76]	; (8001350 <HAL_SPI_MspInit+0x8c>)
 8001302:	f043 0304 	orr.w	r3, r3, #4
 8001306:	6193      	str	r3, [r2, #24]
 8001308:	4b11      	ldr	r3, [pc, #68]	; (8001350 <HAL_SPI_MspInit+0x8c>)
 800130a:	699b      	ldr	r3, [r3, #24]
 800130c:	f003 0304 	and.w	r3, r3, #4
 8001310:	60bb      	str	r3, [r7, #8]
 8001312:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8001314:	23a0      	movs	r3, #160	; 0xa0
 8001316:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001318:	2302      	movs	r3, #2
 800131a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800131c:	2303      	movs	r3, #3
 800131e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001320:	f107 0310 	add.w	r3, r7, #16
 8001324:	4619      	mov	r1, r3
 8001326:	480b      	ldr	r0, [pc, #44]	; (8001354 <HAL_SPI_MspInit+0x90>)
 8001328:	f000 fa54 	bl	80017d4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 800132c:	2340      	movs	r3, #64	; 0x40
 800132e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001330:	2300      	movs	r3, #0
 8001332:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001334:	2300      	movs	r3, #0
 8001336:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001338:	f107 0310 	add.w	r3, r7, #16
 800133c:	4619      	mov	r1, r3
 800133e:	4805      	ldr	r0, [pc, #20]	; (8001354 <HAL_SPI_MspInit+0x90>)
 8001340:	f000 fa48 	bl	80017d4 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001344:	bf00      	nop
 8001346:	3720      	adds	r7, #32
 8001348:	46bd      	mov	sp, r7
 800134a:	bd80      	pop	{r7, pc}
 800134c:	40013000 	.word	0x40013000
 8001350:	40021000 	.word	0x40021000
 8001354:	40010800 	.word	0x40010800

08001358 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001358:	b580      	push	{r7, lr}
 800135a:	b088      	sub	sp, #32
 800135c:	af00      	add	r7, sp, #0
 800135e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001360:	f107 0310 	add.w	r3, r7, #16
 8001364:	2200      	movs	r2, #0
 8001366:	601a      	str	r2, [r3, #0]
 8001368:	605a      	str	r2, [r3, #4]
 800136a:	609a      	str	r2, [r3, #8]
 800136c:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	681b      	ldr	r3, [r3, #0]
 8001372:	4a1c      	ldr	r2, [pc, #112]	; (80013e4 <HAL_UART_MspInit+0x8c>)
 8001374:	4293      	cmp	r3, r2
 8001376:	d131      	bne.n	80013dc <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001378:	4b1b      	ldr	r3, [pc, #108]	; (80013e8 <HAL_UART_MspInit+0x90>)
 800137a:	699b      	ldr	r3, [r3, #24]
 800137c:	4a1a      	ldr	r2, [pc, #104]	; (80013e8 <HAL_UART_MspInit+0x90>)
 800137e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001382:	6193      	str	r3, [r2, #24]
 8001384:	4b18      	ldr	r3, [pc, #96]	; (80013e8 <HAL_UART_MspInit+0x90>)
 8001386:	699b      	ldr	r3, [r3, #24]
 8001388:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800138c:	60fb      	str	r3, [r7, #12]
 800138e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001390:	4b15      	ldr	r3, [pc, #84]	; (80013e8 <HAL_UART_MspInit+0x90>)
 8001392:	699b      	ldr	r3, [r3, #24]
 8001394:	4a14      	ldr	r2, [pc, #80]	; (80013e8 <HAL_UART_MspInit+0x90>)
 8001396:	f043 0304 	orr.w	r3, r3, #4
 800139a:	6193      	str	r3, [r2, #24]
 800139c:	4b12      	ldr	r3, [pc, #72]	; (80013e8 <HAL_UART_MspInit+0x90>)
 800139e:	699b      	ldr	r3, [r3, #24]
 80013a0:	f003 0304 	and.w	r3, r3, #4
 80013a4:	60bb      	str	r3, [r7, #8]
 80013a6:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80013a8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80013ac:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013ae:	2302      	movs	r3, #2
 80013b0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80013b2:	2303      	movs	r3, #3
 80013b4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013b6:	f107 0310 	add.w	r3, r7, #16
 80013ba:	4619      	mov	r1, r3
 80013bc:	480b      	ldr	r0, [pc, #44]	; (80013ec <HAL_UART_MspInit+0x94>)
 80013be:	f000 fa09 	bl	80017d4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80013c2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80013c6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80013c8:	2300      	movs	r3, #0
 80013ca:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013cc:	2300      	movs	r3, #0
 80013ce:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013d0:	f107 0310 	add.w	r3, r7, #16
 80013d4:	4619      	mov	r1, r3
 80013d6:	4805      	ldr	r0, [pc, #20]	; (80013ec <HAL_UART_MspInit+0x94>)
 80013d8:	f000 f9fc 	bl	80017d4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80013dc:	bf00      	nop
 80013de:	3720      	adds	r7, #32
 80013e0:	46bd      	mov	sp, r7
 80013e2:	bd80      	pop	{r7, pc}
 80013e4:	40013800 	.word	0x40013800
 80013e8:	40021000 	.word	0x40021000
 80013ec:	40010800 	.word	0x40010800

080013f0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80013f0:	b480      	push	{r7}
 80013f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80013f4:	e7fe      	b.n	80013f4 <NMI_Handler+0x4>

080013f6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80013f6:	b480      	push	{r7}
 80013f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80013fa:	e7fe      	b.n	80013fa <HardFault_Handler+0x4>

080013fc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80013fc:	b480      	push	{r7}
 80013fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001400:	e7fe      	b.n	8001400 <MemManage_Handler+0x4>

08001402 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001402:	b480      	push	{r7}
 8001404:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001406:	e7fe      	b.n	8001406 <BusFault_Handler+0x4>

08001408 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001408:	b480      	push	{r7}
 800140a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800140c:	e7fe      	b.n	800140c <UsageFault_Handler+0x4>

0800140e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800140e:	b480      	push	{r7}
 8001410:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001412:	bf00      	nop
 8001414:	46bd      	mov	sp, r7
 8001416:	bc80      	pop	{r7}
 8001418:	4770      	bx	lr

0800141a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800141a:	b480      	push	{r7}
 800141c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800141e:	bf00      	nop
 8001420:	46bd      	mov	sp, r7
 8001422:	bc80      	pop	{r7}
 8001424:	4770      	bx	lr

08001426 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001426:	b480      	push	{r7}
 8001428:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800142a:	bf00      	nop
 800142c:	46bd      	mov	sp, r7
 800142e:	bc80      	pop	{r7}
 8001430:	4770      	bx	lr

08001432 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001432:	b580      	push	{r7, lr}
 8001434:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001436:	f000 f8ab 	bl	8001590 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800143a:	bf00      	nop
 800143c:	bd80      	pop	{r7, pc}
	...

08001440 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001440:	b580      	push	{r7, lr}
 8001442:	b086      	sub	sp, #24
 8001444:	af00      	add	r7, sp, #0
 8001446:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001448:	4a14      	ldr	r2, [pc, #80]	; (800149c <_sbrk+0x5c>)
 800144a:	4b15      	ldr	r3, [pc, #84]	; (80014a0 <_sbrk+0x60>)
 800144c:	1ad3      	subs	r3, r2, r3
 800144e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001450:	697b      	ldr	r3, [r7, #20]
 8001452:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001454:	4b13      	ldr	r3, [pc, #76]	; (80014a4 <_sbrk+0x64>)
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	2b00      	cmp	r3, #0
 800145a:	d102      	bne.n	8001462 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800145c:	4b11      	ldr	r3, [pc, #68]	; (80014a4 <_sbrk+0x64>)
 800145e:	4a12      	ldr	r2, [pc, #72]	; (80014a8 <_sbrk+0x68>)
 8001460:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001462:	4b10      	ldr	r3, [pc, #64]	; (80014a4 <_sbrk+0x64>)
 8001464:	681a      	ldr	r2, [r3, #0]
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	4413      	add	r3, r2
 800146a:	693a      	ldr	r2, [r7, #16]
 800146c:	429a      	cmp	r2, r3
 800146e:	d207      	bcs.n	8001480 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001470:	f001 fe8c 	bl	800318c <__errno>
 8001474:	4602      	mov	r2, r0
 8001476:	230c      	movs	r3, #12
 8001478:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 800147a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800147e:	e009      	b.n	8001494 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001480:	4b08      	ldr	r3, [pc, #32]	; (80014a4 <_sbrk+0x64>)
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001486:	4b07      	ldr	r3, [pc, #28]	; (80014a4 <_sbrk+0x64>)
 8001488:	681a      	ldr	r2, [r3, #0]
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	4413      	add	r3, r2
 800148e:	4a05      	ldr	r2, [pc, #20]	; (80014a4 <_sbrk+0x64>)
 8001490:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001492:	68fb      	ldr	r3, [r7, #12]
}
 8001494:	4618      	mov	r0, r3
 8001496:	3718      	adds	r7, #24
 8001498:	46bd      	mov	sp, r7
 800149a:	bd80      	pop	{r7, pc}
 800149c:	2000c000 	.word	0x2000c000
 80014a0:	00000400 	.word	0x00000400
 80014a4:	20000098 	.word	0x20000098
 80014a8:	20000148 	.word	0x20000148

080014ac <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80014ac:	b480      	push	{r7}
 80014ae:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80014b0:	bf00      	nop
 80014b2:	46bd      	mov	sp, r7
 80014b4:	bc80      	pop	{r7}
 80014b6:	4770      	bx	lr

080014b8 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 80014b8:	2100      	movs	r1, #0
  b LoopCopyDataInit
 80014ba:	e003      	b.n	80014c4 <LoopCopyDataInit>

080014bc <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 80014bc:	4b0b      	ldr	r3, [pc, #44]	; (80014ec <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 80014be:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 80014c0:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 80014c2:	3104      	adds	r1, #4

080014c4 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 80014c4:	480a      	ldr	r0, [pc, #40]	; (80014f0 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 80014c6:	4b0b      	ldr	r3, [pc, #44]	; (80014f4 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 80014c8:	1842      	adds	r2, r0, r1
  cmp r2, r3
 80014ca:	429a      	cmp	r2, r3
  bcc CopyDataInit
 80014cc:	d3f6      	bcc.n	80014bc <CopyDataInit>
  ldr r2, =_sbss
 80014ce:	4a0a      	ldr	r2, [pc, #40]	; (80014f8 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 80014d0:	e002      	b.n	80014d8 <LoopFillZerobss>

080014d2 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 80014d2:	2300      	movs	r3, #0
  str r3, [r2], #4
 80014d4:	f842 3b04 	str.w	r3, [r2], #4

080014d8 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 80014d8:	4b08      	ldr	r3, [pc, #32]	; (80014fc <LoopFillZerobss+0x24>)
  cmp r2, r3
 80014da:	429a      	cmp	r2, r3
  bcc FillZerobss
 80014dc:	d3f9      	bcc.n	80014d2 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80014de:	f7ff ffe5 	bl	80014ac <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80014e2:	f001 fe59 	bl	8003198 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80014e6:	f7fe fea7 	bl	8000238 <main>
  bx lr
 80014ea:	4770      	bx	lr
  ldr r3, =_sidata
 80014ec:	08003c70 	.word	0x08003c70
  ldr r0, =_sdata
 80014f0:	20000000 	.word	0x20000000
  ldr r3, =_edata
 80014f4:	20000070 	.word	0x20000070
  ldr r2, =_sbss
 80014f8:	20000070 	.word	0x20000070
  ldr r3, = _ebss
 80014fc:	20000148 	.word	0x20000148

08001500 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001500:	e7fe      	b.n	8001500 <ADC1_2_IRQHandler>
	...

08001504 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001504:	b580      	push	{r7, lr}
 8001506:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001508:	4b08      	ldr	r3, [pc, #32]	; (800152c <HAL_Init+0x28>)
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	4a07      	ldr	r2, [pc, #28]	; (800152c <HAL_Init+0x28>)
 800150e:	f043 0310 	orr.w	r3, r3, #16
 8001512:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001514:	2003      	movs	r0, #3
 8001516:	f000 f929 	bl	800176c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800151a:	2000      	movs	r0, #0
 800151c:	f000 f808 	bl	8001530 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001520:	f7ff fe9e 	bl	8001260 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001524:	2300      	movs	r3, #0
}
 8001526:	4618      	mov	r0, r3
 8001528:	bd80      	pop	{r7, pc}
 800152a:	bf00      	nop
 800152c:	40022000 	.word	0x40022000

08001530 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001530:	b580      	push	{r7, lr}
 8001532:	b082      	sub	sp, #8
 8001534:	af00      	add	r7, sp, #0
 8001536:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001538:	4b12      	ldr	r3, [pc, #72]	; (8001584 <HAL_InitTick+0x54>)
 800153a:	681a      	ldr	r2, [r3, #0]
 800153c:	4b12      	ldr	r3, [pc, #72]	; (8001588 <HAL_InitTick+0x58>)
 800153e:	781b      	ldrb	r3, [r3, #0]
 8001540:	4619      	mov	r1, r3
 8001542:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001546:	fbb3 f3f1 	udiv	r3, r3, r1
 800154a:	fbb2 f3f3 	udiv	r3, r2, r3
 800154e:	4618      	mov	r0, r3
 8001550:	f000 f933 	bl	80017ba <HAL_SYSTICK_Config>
 8001554:	4603      	mov	r3, r0
 8001556:	2b00      	cmp	r3, #0
 8001558:	d001      	beq.n	800155e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800155a:	2301      	movs	r3, #1
 800155c:	e00e      	b.n	800157c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	2b0f      	cmp	r3, #15
 8001562:	d80a      	bhi.n	800157a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001564:	2200      	movs	r2, #0
 8001566:	6879      	ldr	r1, [r7, #4]
 8001568:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800156c:	f000 f909 	bl	8001782 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001570:	4a06      	ldr	r2, [pc, #24]	; (800158c <HAL_InitTick+0x5c>)
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001576:	2300      	movs	r3, #0
 8001578:	e000      	b.n	800157c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800157a:	2301      	movs	r3, #1
}
 800157c:	4618      	mov	r0, r3
 800157e:	3708      	adds	r7, #8
 8001580:	46bd      	mov	sp, r7
 8001582:	bd80      	pop	{r7, pc}
 8001584:	20000000 	.word	0x20000000
 8001588:	20000008 	.word	0x20000008
 800158c:	20000004 	.word	0x20000004

08001590 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001590:	b480      	push	{r7}
 8001592:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001594:	4b05      	ldr	r3, [pc, #20]	; (80015ac <HAL_IncTick+0x1c>)
 8001596:	781b      	ldrb	r3, [r3, #0]
 8001598:	461a      	mov	r2, r3
 800159a:	4b05      	ldr	r3, [pc, #20]	; (80015b0 <HAL_IncTick+0x20>)
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	4413      	add	r3, r2
 80015a0:	4a03      	ldr	r2, [pc, #12]	; (80015b0 <HAL_IncTick+0x20>)
 80015a2:	6013      	str	r3, [r2, #0]
}
 80015a4:	bf00      	nop
 80015a6:	46bd      	mov	sp, r7
 80015a8:	bc80      	pop	{r7}
 80015aa:	4770      	bx	lr
 80015ac:	20000008 	.word	0x20000008
 80015b0:	20000140 	.word	0x20000140

080015b4 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80015b4:	b480      	push	{r7}
 80015b6:	af00      	add	r7, sp, #0
  return uwTick;
 80015b8:	4b02      	ldr	r3, [pc, #8]	; (80015c4 <HAL_GetTick+0x10>)
 80015ba:	681b      	ldr	r3, [r3, #0]
}
 80015bc:	4618      	mov	r0, r3
 80015be:	46bd      	mov	sp, r7
 80015c0:	bc80      	pop	{r7}
 80015c2:	4770      	bx	lr
 80015c4:	20000140 	.word	0x20000140

080015c8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80015c8:	b580      	push	{r7, lr}
 80015ca:	b084      	sub	sp, #16
 80015cc:	af00      	add	r7, sp, #0
 80015ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80015d0:	f7ff fff0 	bl	80015b4 <HAL_GetTick>
 80015d4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80015da:	68fb      	ldr	r3, [r7, #12]
 80015dc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80015e0:	d005      	beq.n	80015ee <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80015e2:	4b09      	ldr	r3, [pc, #36]	; (8001608 <HAL_Delay+0x40>)
 80015e4:	781b      	ldrb	r3, [r3, #0]
 80015e6:	461a      	mov	r2, r3
 80015e8:	68fb      	ldr	r3, [r7, #12]
 80015ea:	4413      	add	r3, r2
 80015ec:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80015ee:	bf00      	nop
 80015f0:	f7ff ffe0 	bl	80015b4 <HAL_GetTick>
 80015f4:	4602      	mov	r2, r0
 80015f6:	68bb      	ldr	r3, [r7, #8]
 80015f8:	1ad3      	subs	r3, r2, r3
 80015fa:	68fa      	ldr	r2, [r7, #12]
 80015fc:	429a      	cmp	r2, r3
 80015fe:	d8f7      	bhi.n	80015f0 <HAL_Delay+0x28>
  {
  }
}
 8001600:	bf00      	nop
 8001602:	3710      	adds	r7, #16
 8001604:	46bd      	mov	sp, r7
 8001606:	bd80      	pop	{r7, pc}
 8001608:	20000008 	.word	0x20000008

0800160c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800160c:	b480      	push	{r7}
 800160e:	b085      	sub	sp, #20
 8001610:	af00      	add	r7, sp, #0
 8001612:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	f003 0307 	and.w	r3, r3, #7
 800161a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800161c:	4b0c      	ldr	r3, [pc, #48]	; (8001650 <__NVIC_SetPriorityGrouping+0x44>)
 800161e:	68db      	ldr	r3, [r3, #12]
 8001620:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001622:	68ba      	ldr	r2, [r7, #8]
 8001624:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001628:	4013      	ands	r3, r2
 800162a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800162c:	68fb      	ldr	r3, [r7, #12]
 800162e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001630:	68bb      	ldr	r3, [r7, #8]
 8001632:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001634:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001638:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800163c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800163e:	4a04      	ldr	r2, [pc, #16]	; (8001650 <__NVIC_SetPriorityGrouping+0x44>)
 8001640:	68bb      	ldr	r3, [r7, #8]
 8001642:	60d3      	str	r3, [r2, #12]
}
 8001644:	bf00      	nop
 8001646:	3714      	adds	r7, #20
 8001648:	46bd      	mov	sp, r7
 800164a:	bc80      	pop	{r7}
 800164c:	4770      	bx	lr
 800164e:	bf00      	nop
 8001650:	e000ed00 	.word	0xe000ed00

08001654 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001654:	b480      	push	{r7}
 8001656:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001658:	4b04      	ldr	r3, [pc, #16]	; (800166c <__NVIC_GetPriorityGrouping+0x18>)
 800165a:	68db      	ldr	r3, [r3, #12]
 800165c:	0a1b      	lsrs	r3, r3, #8
 800165e:	f003 0307 	and.w	r3, r3, #7
}
 8001662:	4618      	mov	r0, r3
 8001664:	46bd      	mov	sp, r7
 8001666:	bc80      	pop	{r7}
 8001668:	4770      	bx	lr
 800166a:	bf00      	nop
 800166c:	e000ed00 	.word	0xe000ed00

08001670 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001670:	b480      	push	{r7}
 8001672:	b083      	sub	sp, #12
 8001674:	af00      	add	r7, sp, #0
 8001676:	4603      	mov	r3, r0
 8001678:	6039      	str	r1, [r7, #0]
 800167a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800167c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001680:	2b00      	cmp	r3, #0
 8001682:	db0a      	blt.n	800169a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001684:	683b      	ldr	r3, [r7, #0]
 8001686:	b2da      	uxtb	r2, r3
 8001688:	490c      	ldr	r1, [pc, #48]	; (80016bc <__NVIC_SetPriority+0x4c>)
 800168a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800168e:	0112      	lsls	r2, r2, #4
 8001690:	b2d2      	uxtb	r2, r2
 8001692:	440b      	add	r3, r1
 8001694:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001698:	e00a      	b.n	80016b0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800169a:	683b      	ldr	r3, [r7, #0]
 800169c:	b2da      	uxtb	r2, r3
 800169e:	4908      	ldr	r1, [pc, #32]	; (80016c0 <__NVIC_SetPriority+0x50>)
 80016a0:	79fb      	ldrb	r3, [r7, #7]
 80016a2:	f003 030f 	and.w	r3, r3, #15
 80016a6:	3b04      	subs	r3, #4
 80016a8:	0112      	lsls	r2, r2, #4
 80016aa:	b2d2      	uxtb	r2, r2
 80016ac:	440b      	add	r3, r1
 80016ae:	761a      	strb	r2, [r3, #24]
}
 80016b0:	bf00      	nop
 80016b2:	370c      	adds	r7, #12
 80016b4:	46bd      	mov	sp, r7
 80016b6:	bc80      	pop	{r7}
 80016b8:	4770      	bx	lr
 80016ba:	bf00      	nop
 80016bc:	e000e100 	.word	0xe000e100
 80016c0:	e000ed00 	.word	0xe000ed00

080016c4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80016c4:	b480      	push	{r7}
 80016c6:	b089      	sub	sp, #36	; 0x24
 80016c8:	af00      	add	r7, sp, #0
 80016ca:	60f8      	str	r0, [r7, #12]
 80016cc:	60b9      	str	r1, [r7, #8]
 80016ce:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80016d0:	68fb      	ldr	r3, [r7, #12]
 80016d2:	f003 0307 	and.w	r3, r3, #7
 80016d6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80016d8:	69fb      	ldr	r3, [r7, #28]
 80016da:	f1c3 0307 	rsb	r3, r3, #7
 80016de:	2b04      	cmp	r3, #4
 80016e0:	bf28      	it	cs
 80016e2:	2304      	movcs	r3, #4
 80016e4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80016e6:	69fb      	ldr	r3, [r7, #28]
 80016e8:	3304      	adds	r3, #4
 80016ea:	2b06      	cmp	r3, #6
 80016ec:	d902      	bls.n	80016f4 <NVIC_EncodePriority+0x30>
 80016ee:	69fb      	ldr	r3, [r7, #28]
 80016f0:	3b03      	subs	r3, #3
 80016f2:	e000      	b.n	80016f6 <NVIC_EncodePriority+0x32>
 80016f4:	2300      	movs	r3, #0
 80016f6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80016f8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80016fc:	69bb      	ldr	r3, [r7, #24]
 80016fe:	fa02 f303 	lsl.w	r3, r2, r3
 8001702:	43da      	mvns	r2, r3
 8001704:	68bb      	ldr	r3, [r7, #8]
 8001706:	401a      	ands	r2, r3
 8001708:	697b      	ldr	r3, [r7, #20]
 800170a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800170c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001710:	697b      	ldr	r3, [r7, #20]
 8001712:	fa01 f303 	lsl.w	r3, r1, r3
 8001716:	43d9      	mvns	r1, r3
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800171c:	4313      	orrs	r3, r2
         );
}
 800171e:	4618      	mov	r0, r3
 8001720:	3724      	adds	r7, #36	; 0x24
 8001722:	46bd      	mov	sp, r7
 8001724:	bc80      	pop	{r7}
 8001726:	4770      	bx	lr

08001728 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001728:	b580      	push	{r7, lr}
 800172a:	b082      	sub	sp, #8
 800172c:	af00      	add	r7, sp, #0
 800172e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	3b01      	subs	r3, #1
 8001734:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001738:	d301      	bcc.n	800173e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800173a:	2301      	movs	r3, #1
 800173c:	e00f      	b.n	800175e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800173e:	4a0a      	ldr	r2, [pc, #40]	; (8001768 <SysTick_Config+0x40>)
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	3b01      	subs	r3, #1
 8001744:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001746:	210f      	movs	r1, #15
 8001748:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800174c:	f7ff ff90 	bl	8001670 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001750:	4b05      	ldr	r3, [pc, #20]	; (8001768 <SysTick_Config+0x40>)
 8001752:	2200      	movs	r2, #0
 8001754:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001756:	4b04      	ldr	r3, [pc, #16]	; (8001768 <SysTick_Config+0x40>)
 8001758:	2207      	movs	r2, #7
 800175a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800175c:	2300      	movs	r3, #0
}
 800175e:	4618      	mov	r0, r3
 8001760:	3708      	adds	r7, #8
 8001762:	46bd      	mov	sp, r7
 8001764:	bd80      	pop	{r7, pc}
 8001766:	bf00      	nop
 8001768:	e000e010 	.word	0xe000e010

0800176c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800176c:	b580      	push	{r7, lr}
 800176e:	b082      	sub	sp, #8
 8001770:	af00      	add	r7, sp, #0
 8001772:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001774:	6878      	ldr	r0, [r7, #4]
 8001776:	f7ff ff49 	bl	800160c <__NVIC_SetPriorityGrouping>
}
 800177a:	bf00      	nop
 800177c:	3708      	adds	r7, #8
 800177e:	46bd      	mov	sp, r7
 8001780:	bd80      	pop	{r7, pc}

08001782 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001782:	b580      	push	{r7, lr}
 8001784:	b086      	sub	sp, #24
 8001786:	af00      	add	r7, sp, #0
 8001788:	4603      	mov	r3, r0
 800178a:	60b9      	str	r1, [r7, #8]
 800178c:	607a      	str	r2, [r7, #4]
 800178e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001790:	2300      	movs	r3, #0
 8001792:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001794:	f7ff ff5e 	bl	8001654 <__NVIC_GetPriorityGrouping>
 8001798:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800179a:	687a      	ldr	r2, [r7, #4]
 800179c:	68b9      	ldr	r1, [r7, #8]
 800179e:	6978      	ldr	r0, [r7, #20]
 80017a0:	f7ff ff90 	bl	80016c4 <NVIC_EncodePriority>
 80017a4:	4602      	mov	r2, r0
 80017a6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80017aa:	4611      	mov	r1, r2
 80017ac:	4618      	mov	r0, r3
 80017ae:	f7ff ff5f 	bl	8001670 <__NVIC_SetPriority>
}
 80017b2:	bf00      	nop
 80017b4:	3718      	adds	r7, #24
 80017b6:	46bd      	mov	sp, r7
 80017b8:	bd80      	pop	{r7, pc}

080017ba <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80017ba:	b580      	push	{r7, lr}
 80017bc:	b082      	sub	sp, #8
 80017be:	af00      	add	r7, sp, #0
 80017c0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80017c2:	6878      	ldr	r0, [r7, #4]
 80017c4:	f7ff ffb0 	bl	8001728 <SysTick_Config>
 80017c8:	4603      	mov	r3, r0
}
 80017ca:	4618      	mov	r0, r3
 80017cc:	3708      	adds	r7, #8
 80017ce:	46bd      	mov	sp, r7
 80017d0:	bd80      	pop	{r7, pc}
	...

080017d4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80017d4:	b480      	push	{r7}
 80017d6:	b08b      	sub	sp, #44	; 0x2c
 80017d8:	af00      	add	r7, sp, #0
 80017da:	6078      	str	r0, [r7, #4]
 80017dc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80017de:	2300      	movs	r3, #0
 80017e0:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80017e2:	2300      	movs	r3, #0
 80017e4:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80017e6:	e133      	b.n	8001a50 <HAL_GPIO_Init+0x27c>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80017e8:	2201      	movs	r2, #1
 80017ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017ec:	fa02 f303 	lsl.w	r3, r2, r3
 80017f0:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80017f2:	683b      	ldr	r3, [r7, #0]
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	69fa      	ldr	r2, [r7, #28]
 80017f8:	4013      	ands	r3, r2
 80017fa:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80017fc:	69ba      	ldr	r2, [r7, #24]
 80017fe:	69fb      	ldr	r3, [r7, #28]
 8001800:	429a      	cmp	r2, r3
 8001802:	f040 8122 	bne.w	8001a4a <HAL_GPIO_Init+0x276>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001806:	683b      	ldr	r3, [r7, #0]
 8001808:	685b      	ldr	r3, [r3, #4]
 800180a:	2b12      	cmp	r3, #18
 800180c:	d034      	beq.n	8001878 <HAL_GPIO_Init+0xa4>
 800180e:	2b12      	cmp	r3, #18
 8001810:	d80d      	bhi.n	800182e <HAL_GPIO_Init+0x5a>
 8001812:	2b02      	cmp	r3, #2
 8001814:	d02b      	beq.n	800186e <HAL_GPIO_Init+0x9a>
 8001816:	2b02      	cmp	r3, #2
 8001818:	d804      	bhi.n	8001824 <HAL_GPIO_Init+0x50>
 800181a:	2b00      	cmp	r3, #0
 800181c:	d031      	beq.n	8001882 <HAL_GPIO_Init+0xae>
 800181e:	2b01      	cmp	r3, #1
 8001820:	d01c      	beq.n	800185c <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001822:	e048      	b.n	80018b6 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8001824:	2b03      	cmp	r3, #3
 8001826:	d043      	beq.n	80018b0 <HAL_GPIO_Init+0xdc>
 8001828:	2b11      	cmp	r3, #17
 800182a:	d01b      	beq.n	8001864 <HAL_GPIO_Init+0x90>
          break;
 800182c:	e043      	b.n	80018b6 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 800182e:	4a8f      	ldr	r2, [pc, #572]	; (8001a6c <HAL_GPIO_Init+0x298>)
 8001830:	4293      	cmp	r3, r2
 8001832:	d026      	beq.n	8001882 <HAL_GPIO_Init+0xae>
 8001834:	4a8d      	ldr	r2, [pc, #564]	; (8001a6c <HAL_GPIO_Init+0x298>)
 8001836:	4293      	cmp	r3, r2
 8001838:	d806      	bhi.n	8001848 <HAL_GPIO_Init+0x74>
 800183a:	4a8d      	ldr	r2, [pc, #564]	; (8001a70 <HAL_GPIO_Init+0x29c>)
 800183c:	4293      	cmp	r3, r2
 800183e:	d020      	beq.n	8001882 <HAL_GPIO_Init+0xae>
 8001840:	4a8c      	ldr	r2, [pc, #560]	; (8001a74 <HAL_GPIO_Init+0x2a0>)
 8001842:	4293      	cmp	r3, r2
 8001844:	d01d      	beq.n	8001882 <HAL_GPIO_Init+0xae>
          break;
 8001846:	e036      	b.n	80018b6 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8001848:	4a8b      	ldr	r2, [pc, #556]	; (8001a78 <HAL_GPIO_Init+0x2a4>)
 800184a:	4293      	cmp	r3, r2
 800184c:	d019      	beq.n	8001882 <HAL_GPIO_Init+0xae>
 800184e:	4a8b      	ldr	r2, [pc, #556]	; (8001a7c <HAL_GPIO_Init+0x2a8>)
 8001850:	4293      	cmp	r3, r2
 8001852:	d016      	beq.n	8001882 <HAL_GPIO_Init+0xae>
 8001854:	4a8a      	ldr	r2, [pc, #552]	; (8001a80 <HAL_GPIO_Init+0x2ac>)
 8001856:	4293      	cmp	r3, r2
 8001858:	d013      	beq.n	8001882 <HAL_GPIO_Init+0xae>
          break;
 800185a:	e02c      	b.n	80018b6 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 800185c:	683b      	ldr	r3, [r7, #0]
 800185e:	68db      	ldr	r3, [r3, #12]
 8001860:	623b      	str	r3, [r7, #32]
          break;
 8001862:	e028      	b.n	80018b6 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001864:	683b      	ldr	r3, [r7, #0]
 8001866:	68db      	ldr	r3, [r3, #12]
 8001868:	3304      	adds	r3, #4
 800186a:	623b      	str	r3, [r7, #32]
          break;
 800186c:	e023      	b.n	80018b6 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800186e:	683b      	ldr	r3, [r7, #0]
 8001870:	68db      	ldr	r3, [r3, #12]
 8001872:	3308      	adds	r3, #8
 8001874:	623b      	str	r3, [r7, #32]
          break;
 8001876:	e01e      	b.n	80018b6 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001878:	683b      	ldr	r3, [r7, #0]
 800187a:	68db      	ldr	r3, [r3, #12]
 800187c:	330c      	adds	r3, #12
 800187e:	623b      	str	r3, [r7, #32]
          break;
 8001880:	e019      	b.n	80018b6 <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001882:	683b      	ldr	r3, [r7, #0]
 8001884:	689b      	ldr	r3, [r3, #8]
 8001886:	2b00      	cmp	r3, #0
 8001888:	d102      	bne.n	8001890 <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800188a:	2304      	movs	r3, #4
 800188c:	623b      	str	r3, [r7, #32]
          break;
 800188e:	e012      	b.n	80018b6 <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001890:	683b      	ldr	r3, [r7, #0]
 8001892:	689b      	ldr	r3, [r3, #8]
 8001894:	2b01      	cmp	r3, #1
 8001896:	d105      	bne.n	80018a4 <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001898:	2308      	movs	r3, #8
 800189a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	69fa      	ldr	r2, [r7, #28]
 80018a0:	611a      	str	r2, [r3, #16]
          break;
 80018a2:	e008      	b.n	80018b6 <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80018a4:	2308      	movs	r3, #8
 80018a6:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	69fa      	ldr	r2, [r7, #28]
 80018ac:	615a      	str	r2, [r3, #20]
          break;
 80018ae:	e002      	b.n	80018b6 <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80018b0:	2300      	movs	r3, #0
 80018b2:	623b      	str	r3, [r7, #32]
          break;
 80018b4:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80018b6:	69bb      	ldr	r3, [r7, #24]
 80018b8:	2bff      	cmp	r3, #255	; 0xff
 80018ba:	d801      	bhi.n	80018c0 <HAL_GPIO_Init+0xec>
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	e001      	b.n	80018c4 <HAL_GPIO_Init+0xf0>
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	3304      	adds	r3, #4
 80018c4:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80018c6:	69bb      	ldr	r3, [r7, #24]
 80018c8:	2bff      	cmp	r3, #255	; 0xff
 80018ca:	d802      	bhi.n	80018d2 <HAL_GPIO_Init+0xfe>
 80018cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018ce:	009b      	lsls	r3, r3, #2
 80018d0:	e002      	b.n	80018d8 <HAL_GPIO_Init+0x104>
 80018d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018d4:	3b08      	subs	r3, #8
 80018d6:	009b      	lsls	r3, r3, #2
 80018d8:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80018da:	697b      	ldr	r3, [r7, #20]
 80018dc:	681a      	ldr	r2, [r3, #0]
 80018de:	210f      	movs	r1, #15
 80018e0:	693b      	ldr	r3, [r7, #16]
 80018e2:	fa01 f303 	lsl.w	r3, r1, r3
 80018e6:	43db      	mvns	r3, r3
 80018e8:	401a      	ands	r2, r3
 80018ea:	6a39      	ldr	r1, [r7, #32]
 80018ec:	693b      	ldr	r3, [r7, #16]
 80018ee:	fa01 f303 	lsl.w	r3, r1, r3
 80018f2:	431a      	orrs	r2, r3
 80018f4:	697b      	ldr	r3, [r7, #20]
 80018f6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80018f8:	683b      	ldr	r3, [r7, #0]
 80018fa:	685b      	ldr	r3, [r3, #4]
 80018fc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001900:	2b00      	cmp	r3, #0
 8001902:	f000 80a2 	beq.w	8001a4a <HAL_GPIO_Init+0x276>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001906:	4b5f      	ldr	r3, [pc, #380]	; (8001a84 <HAL_GPIO_Init+0x2b0>)
 8001908:	699b      	ldr	r3, [r3, #24]
 800190a:	4a5e      	ldr	r2, [pc, #376]	; (8001a84 <HAL_GPIO_Init+0x2b0>)
 800190c:	f043 0301 	orr.w	r3, r3, #1
 8001910:	6193      	str	r3, [r2, #24]
 8001912:	4b5c      	ldr	r3, [pc, #368]	; (8001a84 <HAL_GPIO_Init+0x2b0>)
 8001914:	699b      	ldr	r3, [r3, #24]
 8001916:	f003 0301 	and.w	r3, r3, #1
 800191a:	60bb      	str	r3, [r7, #8]
 800191c:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 800191e:	4a5a      	ldr	r2, [pc, #360]	; (8001a88 <HAL_GPIO_Init+0x2b4>)
 8001920:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001922:	089b      	lsrs	r3, r3, #2
 8001924:	3302      	adds	r3, #2
 8001926:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800192a:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800192c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800192e:	f003 0303 	and.w	r3, r3, #3
 8001932:	009b      	lsls	r3, r3, #2
 8001934:	220f      	movs	r2, #15
 8001936:	fa02 f303 	lsl.w	r3, r2, r3
 800193a:	43db      	mvns	r3, r3
 800193c:	68fa      	ldr	r2, [r7, #12]
 800193e:	4013      	ands	r3, r2
 8001940:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	4a51      	ldr	r2, [pc, #324]	; (8001a8c <HAL_GPIO_Init+0x2b8>)
 8001946:	4293      	cmp	r3, r2
 8001948:	d01f      	beq.n	800198a <HAL_GPIO_Init+0x1b6>
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	4a50      	ldr	r2, [pc, #320]	; (8001a90 <HAL_GPIO_Init+0x2bc>)
 800194e:	4293      	cmp	r3, r2
 8001950:	d019      	beq.n	8001986 <HAL_GPIO_Init+0x1b2>
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	4a4f      	ldr	r2, [pc, #316]	; (8001a94 <HAL_GPIO_Init+0x2c0>)
 8001956:	4293      	cmp	r3, r2
 8001958:	d013      	beq.n	8001982 <HAL_GPIO_Init+0x1ae>
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	4a4e      	ldr	r2, [pc, #312]	; (8001a98 <HAL_GPIO_Init+0x2c4>)
 800195e:	4293      	cmp	r3, r2
 8001960:	d00d      	beq.n	800197e <HAL_GPIO_Init+0x1aa>
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	4a4d      	ldr	r2, [pc, #308]	; (8001a9c <HAL_GPIO_Init+0x2c8>)
 8001966:	4293      	cmp	r3, r2
 8001968:	d007      	beq.n	800197a <HAL_GPIO_Init+0x1a6>
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	4a4c      	ldr	r2, [pc, #304]	; (8001aa0 <HAL_GPIO_Init+0x2cc>)
 800196e:	4293      	cmp	r3, r2
 8001970:	d101      	bne.n	8001976 <HAL_GPIO_Init+0x1a2>
 8001972:	2305      	movs	r3, #5
 8001974:	e00a      	b.n	800198c <HAL_GPIO_Init+0x1b8>
 8001976:	2306      	movs	r3, #6
 8001978:	e008      	b.n	800198c <HAL_GPIO_Init+0x1b8>
 800197a:	2304      	movs	r3, #4
 800197c:	e006      	b.n	800198c <HAL_GPIO_Init+0x1b8>
 800197e:	2303      	movs	r3, #3
 8001980:	e004      	b.n	800198c <HAL_GPIO_Init+0x1b8>
 8001982:	2302      	movs	r3, #2
 8001984:	e002      	b.n	800198c <HAL_GPIO_Init+0x1b8>
 8001986:	2301      	movs	r3, #1
 8001988:	e000      	b.n	800198c <HAL_GPIO_Init+0x1b8>
 800198a:	2300      	movs	r3, #0
 800198c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800198e:	f002 0203 	and.w	r2, r2, #3
 8001992:	0092      	lsls	r2, r2, #2
 8001994:	4093      	lsls	r3, r2
 8001996:	68fa      	ldr	r2, [r7, #12]
 8001998:	4313      	orrs	r3, r2
 800199a:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800199c:	493a      	ldr	r1, [pc, #232]	; (8001a88 <HAL_GPIO_Init+0x2b4>)
 800199e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019a0:	089b      	lsrs	r3, r3, #2
 80019a2:	3302      	adds	r3, #2
 80019a4:	68fa      	ldr	r2, [r7, #12]
 80019a6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80019aa:	683b      	ldr	r3, [r7, #0]
 80019ac:	685b      	ldr	r3, [r3, #4]
 80019ae:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	d006      	beq.n	80019c4 <HAL_GPIO_Init+0x1f0>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80019b6:	4b3b      	ldr	r3, [pc, #236]	; (8001aa4 <HAL_GPIO_Init+0x2d0>)
 80019b8:	681a      	ldr	r2, [r3, #0]
 80019ba:	493a      	ldr	r1, [pc, #232]	; (8001aa4 <HAL_GPIO_Init+0x2d0>)
 80019bc:	69bb      	ldr	r3, [r7, #24]
 80019be:	4313      	orrs	r3, r2
 80019c0:	600b      	str	r3, [r1, #0]
 80019c2:	e006      	b.n	80019d2 <HAL_GPIO_Init+0x1fe>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80019c4:	4b37      	ldr	r3, [pc, #220]	; (8001aa4 <HAL_GPIO_Init+0x2d0>)
 80019c6:	681a      	ldr	r2, [r3, #0]
 80019c8:	69bb      	ldr	r3, [r7, #24]
 80019ca:	43db      	mvns	r3, r3
 80019cc:	4935      	ldr	r1, [pc, #212]	; (8001aa4 <HAL_GPIO_Init+0x2d0>)
 80019ce:	4013      	ands	r3, r2
 80019d0:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80019d2:	683b      	ldr	r3, [r7, #0]
 80019d4:	685b      	ldr	r3, [r3, #4]
 80019d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019da:	2b00      	cmp	r3, #0
 80019dc:	d006      	beq.n	80019ec <HAL_GPIO_Init+0x218>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80019de:	4b31      	ldr	r3, [pc, #196]	; (8001aa4 <HAL_GPIO_Init+0x2d0>)
 80019e0:	685a      	ldr	r2, [r3, #4]
 80019e2:	4930      	ldr	r1, [pc, #192]	; (8001aa4 <HAL_GPIO_Init+0x2d0>)
 80019e4:	69bb      	ldr	r3, [r7, #24]
 80019e6:	4313      	orrs	r3, r2
 80019e8:	604b      	str	r3, [r1, #4]
 80019ea:	e006      	b.n	80019fa <HAL_GPIO_Init+0x226>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80019ec:	4b2d      	ldr	r3, [pc, #180]	; (8001aa4 <HAL_GPIO_Init+0x2d0>)
 80019ee:	685a      	ldr	r2, [r3, #4]
 80019f0:	69bb      	ldr	r3, [r7, #24]
 80019f2:	43db      	mvns	r3, r3
 80019f4:	492b      	ldr	r1, [pc, #172]	; (8001aa4 <HAL_GPIO_Init+0x2d0>)
 80019f6:	4013      	ands	r3, r2
 80019f8:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80019fa:	683b      	ldr	r3, [r7, #0]
 80019fc:	685b      	ldr	r3, [r3, #4]
 80019fe:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	d006      	beq.n	8001a14 <HAL_GPIO_Init+0x240>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001a06:	4b27      	ldr	r3, [pc, #156]	; (8001aa4 <HAL_GPIO_Init+0x2d0>)
 8001a08:	689a      	ldr	r2, [r3, #8]
 8001a0a:	4926      	ldr	r1, [pc, #152]	; (8001aa4 <HAL_GPIO_Init+0x2d0>)
 8001a0c:	69bb      	ldr	r3, [r7, #24]
 8001a0e:	4313      	orrs	r3, r2
 8001a10:	608b      	str	r3, [r1, #8]
 8001a12:	e006      	b.n	8001a22 <HAL_GPIO_Init+0x24e>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001a14:	4b23      	ldr	r3, [pc, #140]	; (8001aa4 <HAL_GPIO_Init+0x2d0>)
 8001a16:	689a      	ldr	r2, [r3, #8]
 8001a18:	69bb      	ldr	r3, [r7, #24]
 8001a1a:	43db      	mvns	r3, r3
 8001a1c:	4921      	ldr	r1, [pc, #132]	; (8001aa4 <HAL_GPIO_Init+0x2d0>)
 8001a1e:	4013      	ands	r3, r2
 8001a20:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001a22:	683b      	ldr	r3, [r7, #0]
 8001a24:	685b      	ldr	r3, [r3, #4]
 8001a26:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	d006      	beq.n	8001a3c <HAL_GPIO_Init+0x268>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001a2e:	4b1d      	ldr	r3, [pc, #116]	; (8001aa4 <HAL_GPIO_Init+0x2d0>)
 8001a30:	68da      	ldr	r2, [r3, #12]
 8001a32:	491c      	ldr	r1, [pc, #112]	; (8001aa4 <HAL_GPIO_Init+0x2d0>)
 8001a34:	69bb      	ldr	r3, [r7, #24]
 8001a36:	4313      	orrs	r3, r2
 8001a38:	60cb      	str	r3, [r1, #12]
 8001a3a:	e006      	b.n	8001a4a <HAL_GPIO_Init+0x276>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001a3c:	4b19      	ldr	r3, [pc, #100]	; (8001aa4 <HAL_GPIO_Init+0x2d0>)
 8001a3e:	68da      	ldr	r2, [r3, #12]
 8001a40:	69bb      	ldr	r3, [r7, #24]
 8001a42:	43db      	mvns	r3, r3
 8001a44:	4917      	ldr	r1, [pc, #92]	; (8001aa4 <HAL_GPIO_Init+0x2d0>)
 8001a46:	4013      	ands	r3, r2
 8001a48:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8001a4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a4c:	3301      	adds	r3, #1
 8001a4e:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001a50:	683b      	ldr	r3, [r7, #0]
 8001a52:	681a      	ldr	r2, [r3, #0]
 8001a54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a56:	fa22 f303 	lsr.w	r3, r2, r3
 8001a5a:	2b00      	cmp	r3, #0
 8001a5c:	f47f aec4 	bne.w	80017e8 <HAL_GPIO_Init+0x14>
  }
}
 8001a60:	bf00      	nop
 8001a62:	372c      	adds	r7, #44	; 0x2c
 8001a64:	46bd      	mov	sp, r7
 8001a66:	bc80      	pop	{r7}
 8001a68:	4770      	bx	lr
 8001a6a:	bf00      	nop
 8001a6c:	10210000 	.word	0x10210000
 8001a70:	10110000 	.word	0x10110000
 8001a74:	10120000 	.word	0x10120000
 8001a78:	10310000 	.word	0x10310000
 8001a7c:	10320000 	.word	0x10320000
 8001a80:	10220000 	.word	0x10220000
 8001a84:	40021000 	.word	0x40021000
 8001a88:	40010000 	.word	0x40010000
 8001a8c:	40010800 	.word	0x40010800
 8001a90:	40010c00 	.word	0x40010c00
 8001a94:	40011000 	.word	0x40011000
 8001a98:	40011400 	.word	0x40011400
 8001a9c:	40011800 	.word	0x40011800
 8001aa0:	40011c00 	.word	0x40011c00
 8001aa4:	40010400 	.word	0x40010400

08001aa8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001aa8:	b480      	push	{r7}
 8001aaa:	b083      	sub	sp, #12
 8001aac:	af00      	add	r7, sp, #0
 8001aae:	6078      	str	r0, [r7, #4]
 8001ab0:	460b      	mov	r3, r1
 8001ab2:	807b      	strh	r3, [r7, #2]
 8001ab4:	4613      	mov	r3, r2
 8001ab6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001ab8:	787b      	ldrb	r3, [r7, #1]
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	d003      	beq.n	8001ac6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001abe:	887a      	ldrh	r2, [r7, #2]
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001ac4:	e003      	b.n	8001ace <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001ac6:	887b      	ldrh	r3, [r7, #2]
 8001ac8:	041a      	lsls	r2, r3, #16
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	611a      	str	r2, [r3, #16]
}
 8001ace:	bf00      	nop
 8001ad0:	370c      	adds	r7, #12
 8001ad2:	46bd      	mov	sp, r7
 8001ad4:	bc80      	pop	{r7}
 8001ad6:	4770      	bx	lr

08001ad8 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001ad8:	b480      	push	{r7}
 8001ada:	b085      	sub	sp, #20
 8001adc:	af00      	add	r7, sp, #0
 8001ade:	6078      	str	r0, [r7, #4]
 8001ae0:	460b      	mov	r3, r1
 8001ae2:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	68db      	ldr	r3, [r3, #12]
 8001ae8:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001aea:	887a      	ldrh	r2, [r7, #2]
 8001aec:	68fb      	ldr	r3, [r7, #12]
 8001aee:	4013      	ands	r3, r2
 8001af0:	041a      	lsls	r2, r3, #16
 8001af2:	68fb      	ldr	r3, [r7, #12]
 8001af4:	43d9      	mvns	r1, r3
 8001af6:	887b      	ldrh	r3, [r7, #2]
 8001af8:	400b      	ands	r3, r1
 8001afa:	431a      	orrs	r2, r3
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	611a      	str	r2, [r3, #16]
}
 8001b00:	bf00      	nop
 8001b02:	3714      	adds	r7, #20
 8001b04:	46bd      	mov	sp, r7
 8001b06:	bc80      	pop	{r7}
 8001b08:	4770      	bx	lr
	...

08001b0c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001b0c:	b580      	push	{r7, lr}
 8001b0e:	b086      	sub	sp, #24
 8001b10:	af00      	add	r7, sp, #0
 8001b12:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	d101      	bne.n	8001b1e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001b1a:	2301      	movs	r3, #1
 8001b1c:	e26c      	b.n	8001ff8 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	f003 0301 	and.w	r3, r3, #1
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	f000 8087 	beq.w	8001c3a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001b2c:	4b92      	ldr	r3, [pc, #584]	; (8001d78 <HAL_RCC_OscConfig+0x26c>)
 8001b2e:	685b      	ldr	r3, [r3, #4]
 8001b30:	f003 030c 	and.w	r3, r3, #12
 8001b34:	2b04      	cmp	r3, #4
 8001b36:	d00c      	beq.n	8001b52 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001b38:	4b8f      	ldr	r3, [pc, #572]	; (8001d78 <HAL_RCC_OscConfig+0x26c>)
 8001b3a:	685b      	ldr	r3, [r3, #4]
 8001b3c:	f003 030c 	and.w	r3, r3, #12
 8001b40:	2b08      	cmp	r3, #8
 8001b42:	d112      	bne.n	8001b6a <HAL_RCC_OscConfig+0x5e>
 8001b44:	4b8c      	ldr	r3, [pc, #560]	; (8001d78 <HAL_RCC_OscConfig+0x26c>)
 8001b46:	685b      	ldr	r3, [r3, #4]
 8001b48:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001b4c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001b50:	d10b      	bne.n	8001b6a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001b52:	4b89      	ldr	r3, [pc, #548]	; (8001d78 <HAL_RCC_OscConfig+0x26c>)
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b5a:	2b00      	cmp	r3, #0
 8001b5c:	d06c      	beq.n	8001c38 <HAL_RCC_OscConfig+0x12c>
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	685b      	ldr	r3, [r3, #4]
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	d168      	bne.n	8001c38 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001b66:	2301      	movs	r3, #1
 8001b68:	e246      	b.n	8001ff8 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	685b      	ldr	r3, [r3, #4]
 8001b6e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001b72:	d106      	bne.n	8001b82 <HAL_RCC_OscConfig+0x76>
 8001b74:	4b80      	ldr	r3, [pc, #512]	; (8001d78 <HAL_RCC_OscConfig+0x26c>)
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	4a7f      	ldr	r2, [pc, #508]	; (8001d78 <HAL_RCC_OscConfig+0x26c>)
 8001b7a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001b7e:	6013      	str	r3, [r2, #0]
 8001b80:	e02e      	b.n	8001be0 <HAL_RCC_OscConfig+0xd4>
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	685b      	ldr	r3, [r3, #4]
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	d10c      	bne.n	8001ba4 <HAL_RCC_OscConfig+0x98>
 8001b8a:	4b7b      	ldr	r3, [pc, #492]	; (8001d78 <HAL_RCC_OscConfig+0x26c>)
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	4a7a      	ldr	r2, [pc, #488]	; (8001d78 <HAL_RCC_OscConfig+0x26c>)
 8001b90:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001b94:	6013      	str	r3, [r2, #0]
 8001b96:	4b78      	ldr	r3, [pc, #480]	; (8001d78 <HAL_RCC_OscConfig+0x26c>)
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	4a77      	ldr	r2, [pc, #476]	; (8001d78 <HAL_RCC_OscConfig+0x26c>)
 8001b9c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001ba0:	6013      	str	r3, [r2, #0]
 8001ba2:	e01d      	b.n	8001be0 <HAL_RCC_OscConfig+0xd4>
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	685b      	ldr	r3, [r3, #4]
 8001ba8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001bac:	d10c      	bne.n	8001bc8 <HAL_RCC_OscConfig+0xbc>
 8001bae:	4b72      	ldr	r3, [pc, #456]	; (8001d78 <HAL_RCC_OscConfig+0x26c>)
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	4a71      	ldr	r2, [pc, #452]	; (8001d78 <HAL_RCC_OscConfig+0x26c>)
 8001bb4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001bb8:	6013      	str	r3, [r2, #0]
 8001bba:	4b6f      	ldr	r3, [pc, #444]	; (8001d78 <HAL_RCC_OscConfig+0x26c>)
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	4a6e      	ldr	r2, [pc, #440]	; (8001d78 <HAL_RCC_OscConfig+0x26c>)
 8001bc0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001bc4:	6013      	str	r3, [r2, #0]
 8001bc6:	e00b      	b.n	8001be0 <HAL_RCC_OscConfig+0xd4>
 8001bc8:	4b6b      	ldr	r3, [pc, #428]	; (8001d78 <HAL_RCC_OscConfig+0x26c>)
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	4a6a      	ldr	r2, [pc, #424]	; (8001d78 <HAL_RCC_OscConfig+0x26c>)
 8001bce:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001bd2:	6013      	str	r3, [r2, #0]
 8001bd4:	4b68      	ldr	r3, [pc, #416]	; (8001d78 <HAL_RCC_OscConfig+0x26c>)
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	4a67      	ldr	r2, [pc, #412]	; (8001d78 <HAL_RCC_OscConfig+0x26c>)
 8001bda:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001bde:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	685b      	ldr	r3, [r3, #4]
 8001be4:	2b00      	cmp	r3, #0
 8001be6:	d013      	beq.n	8001c10 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001be8:	f7ff fce4 	bl	80015b4 <HAL_GetTick>
 8001bec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001bee:	e008      	b.n	8001c02 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001bf0:	f7ff fce0 	bl	80015b4 <HAL_GetTick>
 8001bf4:	4602      	mov	r2, r0
 8001bf6:	693b      	ldr	r3, [r7, #16]
 8001bf8:	1ad3      	subs	r3, r2, r3
 8001bfa:	2b64      	cmp	r3, #100	; 0x64
 8001bfc:	d901      	bls.n	8001c02 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001bfe:	2303      	movs	r3, #3
 8001c00:	e1fa      	b.n	8001ff8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c02:	4b5d      	ldr	r3, [pc, #372]	; (8001d78 <HAL_RCC_OscConfig+0x26c>)
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	d0f0      	beq.n	8001bf0 <HAL_RCC_OscConfig+0xe4>
 8001c0e:	e014      	b.n	8001c3a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c10:	f7ff fcd0 	bl	80015b4 <HAL_GetTick>
 8001c14:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001c16:	e008      	b.n	8001c2a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001c18:	f7ff fccc 	bl	80015b4 <HAL_GetTick>
 8001c1c:	4602      	mov	r2, r0
 8001c1e:	693b      	ldr	r3, [r7, #16]
 8001c20:	1ad3      	subs	r3, r2, r3
 8001c22:	2b64      	cmp	r3, #100	; 0x64
 8001c24:	d901      	bls.n	8001c2a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001c26:	2303      	movs	r3, #3
 8001c28:	e1e6      	b.n	8001ff8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001c2a:	4b53      	ldr	r3, [pc, #332]	; (8001d78 <HAL_RCC_OscConfig+0x26c>)
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	d1f0      	bne.n	8001c18 <HAL_RCC_OscConfig+0x10c>
 8001c36:	e000      	b.n	8001c3a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001c38:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	f003 0302 	and.w	r3, r3, #2
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	d063      	beq.n	8001d0e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001c46:	4b4c      	ldr	r3, [pc, #304]	; (8001d78 <HAL_RCC_OscConfig+0x26c>)
 8001c48:	685b      	ldr	r3, [r3, #4]
 8001c4a:	f003 030c 	and.w	r3, r3, #12
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	d00b      	beq.n	8001c6a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001c52:	4b49      	ldr	r3, [pc, #292]	; (8001d78 <HAL_RCC_OscConfig+0x26c>)
 8001c54:	685b      	ldr	r3, [r3, #4]
 8001c56:	f003 030c 	and.w	r3, r3, #12
 8001c5a:	2b08      	cmp	r3, #8
 8001c5c:	d11c      	bne.n	8001c98 <HAL_RCC_OscConfig+0x18c>
 8001c5e:	4b46      	ldr	r3, [pc, #280]	; (8001d78 <HAL_RCC_OscConfig+0x26c>)
 8001c60:	685b      	ldr	r3, [r3, #4]
 8001c62:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	d116      	bne.n	8001c98 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001c6a:	4b43      	ldr	r3, [pc, #268]	; (8001d78 <HAL_RCC_OscConfig+0x26c>)
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	f003 0302 	and.w	r3, r3, #2
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	d005      	beq.n	8001c82 <HAL_RCC_OscConfig+0x176>
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	691b      	ldr	r3, [r3, #16]
 8001c7a:	2b01      	cmp	r3, #1
 8001c7c:	d001      	beq.n	8001c82 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001c7e:	2301      	movs	r3, #1
 8001c80:	e1ba      	b.n	8001ff8 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c82:	4b3d      	ldr	r3, [pc, #244]	; (8001d78 <HAL_RCC_OscConfig+0x26c>)
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	695b      	ldr	r3, [r3, #20]
 8001c8e:	00db      	lsls	r3, r3, #3
 8001c90:	4939      	ldr	r1, [pc, #228]	; (8001d78 <HAL_RCC_OscConfig+0x26c>)
 8001c92:	4313      	orrs	r3, r2
 8001c94:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001c96:	e03a      	b.n	8001d0e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	691b      	ldr	r3, [r3, #16]
 8001c9c:	2b00      	cmp	r3, #0
 8001c9e:	d020      	beq.n	8001ce2 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001ca0:	4b36      	ldr	r3, [pc, #216]	; (8001d7c <HAL_RCC_OscConfig+0x270>)
 8001ca2:	2201      	movs	r2, #1
 8001ca4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ca6:	f7ff fc85 	bl	80015b4 <HAL_GetTick>
 8001caa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001cac:	e008      	b.n	8001cc0 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001cae:	f7ff fc81 	bl	80015b4 <HAL_GetTick>
 8001cb2:	4602      	mov	r2, r0
 8001cb4:	693b      	ldr	r3, [r7, #16]
 8001cb6:	1ad3      	subs	r3, r2, r3
 8001cb8:	2b02      	cmp	r3, #2
 8001cba:	d901      	bls.n	8001cc0 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001cbc:	2303      	movs	r3, #3
 8001cbe:	e19b      	b.n	8001ff8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001cc0:	4b2d      	ldr	r3, [pc, #180]	; (8001d78 <HAL_RCC_OscConfig+0x26c>)
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	f003 0302 	and.w	r3, r3, #2
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	d0f0      	beq.n	8001cae <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ccc:	4b2a      	ldr	r3, [pc, #168]	; (8001d78 <HAL_RCC_OscConfig+0x26c>)
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	695b      	ldr	r3, [r3, #20]
 8001cd8:	00db      	lsls	r3, r3, #3
 8001cda:	4927      	ldr	r1, [pc, #156]	; (8001d78 <HAL_RCC_OscConfig+0x26c>)
 8001cdc:	4313      	orrs	r3, r2
 8001cde:	600b      	str	r3, [r1, #0]
 8001ce0:	e015      	b.n	8001d0e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001ce2:	4b26      	ldr	r3, [pc, #152]	; (8001d7c <HAL_RCC_OscConfig+0x270>)
 8001ce4:	2200      	movs	r2, #0
 8001ce6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ce8:	f7ff fc64 	bl	80015b4 <HAL_GetTick>
 8001cec:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001cee:	e008      	b.n	8001d02 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001cf0:	f7ff fc60 	bl	80015b4 <HAL_GetTick>
 8001cf4:	4602      	mov	r2, r0
 8001cf6:	693b      	ldr	r3, [r7, #16]
 8001cf8:	1ad3      	subs	r3, r2, r3
 8001cfa:	2b02      	cmp	r3, #2
 8001cfc:	d901      	bls.n	8001d02 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001cfe:	2303      	movs	r3, #3
 8001d00:	e17a      	b.n	8001ff8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001d02:	4b1d      	ldr	r3, [pc, #116]	; (8001d78 <HAL_RCC_OscConfig+0x26c>)
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	f003 0302 	and.w	r3, r3, #2
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	d1f0      	bne.n	8001cf0 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	f003 0308 	and.w	r3, r3, #8
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	d03a      	beq.n	8001d90 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	699b      	ldr	r3, [r3, #24]
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	d019      	beq.n	8001d56 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001d22:	4b17      	ldr	r3, [pc, #92]	; (8001d80 <HAL_RCC_OscConfig+0x274>)
 8001d24:	2201      	movs	r2, #1
 8001d26:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d28:	f7ff fc44 	bl	80015b4 <HAL_GetTick>
 8001d2c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001d2e:	e008      	b.n	8001d42 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001d30:	f7ff fc40 	bl	80015b4 <HAL_GetTick>
 8001d34:	4602      	mov	r2, r0
 8001d36:	693b      	ldr	r3, [r7, #16]
 8001d38:	1ad3      	subs	r3, r2, r3
 8001d3a:	2b02      	cmp	r3, #2
 8001d3c:	d901      	bls.n	8001d42 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001d3e:	2303      	movs	r3, #3
 8001d40:	e15a      	b.n	8001ff8 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001d42:	4b0d      	ldr	r3, [pc, #52]	; (8001d78 <HAL_RCC_OscConfig+0x26c>)
 8001d44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d46:	f003 0302 	and.w	r3, r3, #2
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	d0f0      	beq.n	8001d30 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001d4e:	2001      	movs	r0, #1
 8001d50:	f000 fada 	bl	8002308 <RCC_Delay>
 8001d54:	e01c      	b.n	8001d90 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001d56:	4b0a      	ldr	r3, [pc, #40]	; (8001d80 <HAL_RCC_OscConfig+0x274>)
 8001d58:	2200      	movs	r2, #0
 8001d5a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d5c:	f7ff fc2a 	bl	80015b4 <HAL_GetTick>
 8001d60:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001d62:	e00f      	b.n	8001d84 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001d64:	f7ff fc26 	bl	80015b4 <HAL_GetTick>
 8001d68:	4602      	mov	r2, r0
 8001d6a:	693b      	ldr	r3, [r7, #16]
 8001d6c:	1ad3      	subs	r3, r2, r3
 8001d6e:	2b02      	cmp	r3, #2
 8001d70:	d908      	bls.n	8001d84 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001d72:	2303      	movs	r3, #3
 8001d74:	e140      	b.n	8001ff8 <HAL_RCC_OscConfig+0x4ec>
 8001d76:	bf00      	nop
 8001d78:	40021000 	.word	0x40021000
 8001d7c:	42420000 	.word	0x42420000
 8001d80:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001d84:	4b9e      	ldr	r3, [pc, #632]	; (8002000 <HAL_RCC_OscConfig+0x4f4>)
 8001d86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d88:	f003 0302 	and.w	r3, r3, #2
 8001d8c:	2b00      	cmp	r3, #0
 8001d8e:	d1e9      	bne.n	8001d64 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	f003 0304 	and.w	r3, r3, #4
 8001d98:	2b00      	cmp	r3, #0
 8001d9a:	f000 80a6 	beq.w	8001eea <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001d9e:	2300      	movs	r3, #0
 8001da0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001da2:	4b97      	ldr	r3, [pc, #604]	; (8002000 <HAL_RCC_OscConfig+0x4f4>)
 8001da4:	69db      	ldr	r3, [r3, #28]
 8001da6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	d10d      	bne.n	8001dca <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001dae:	4b94      	ldr	r3, [pc, #592]	; (8002000 <HAL_RCC_OscConfig+0x4f4>)
 8001db0:	69db      	ldr	r3, [r3, #28]
 8001db2:	4a93      	ldr	r2, [pc, #588]	; (8002000 <HAL_RCC_OscConfig+0x4f4>)
 8001db4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001db8:	61d3      	str	r3, [r2, #28]
 8001dba:	4b91      	ldr	r3, [pc, #580]	; (8002000 <HAL_RCC_OscConfig+0x4f4>)
 8001dbc:	69db      	ldr	r3, [r3, #28]
 8001dbe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001dc2:	60bb      	str	r3, [r7, #8]
 8001dc4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001dc6:	2301      	movs	r3, #1
 8001dc8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001dca:	4b8e      	ldr	r3, [pc, #568]	; (8002004 <HAL_RCC_OscConfig+0x4f8>)
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	d118      	bne.n	8001e08 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001dd6:	4b8b      	ldr	r3, [pc, #556]	; (8002004 <HAL_RCC_OscConfig+0x4f8>)
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	4a8a      	ldr	r2, [pc, #552]	; (8002004 <HAL_RCC_OscConfig+0x4f8>)
 8001ddc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001de0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001de2:	f7ff fbe7 	bl	80015b4 <HAL_GetTick>
 8001de6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001de8:	e008      	b.n	8001dfc <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001dea:	f7ff fbe3 	bl	80015b4 <HAL_GetTick>
 8001dee:	4602      	mov	r2, r0
 8001df0:	693b      	ldr	r3, [r7, #16]
 8001df2:	1ad3      	subs	r3, r2, r3
 8001df4:	2b64      	cmp	r3, #100	; 0x64
 8001df6:	d901      	bls.n	8001dfc <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001df8:	2303      	movs	r3, #3
 8001dfa:	e0fd      	b.n	8001ff8 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001dfc:	4b81      	ldr	r3, [pc, #516]	; (8002004 <HAL_RCC_OscConfig+0x4f8>)
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e04:	2b00      	cmp	r3, #0
 8001e06:	d0f0      	beq.n	8001dea <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	68db      	ldr	r3, [r3, #12]
 8001e0c:	2b01      	cmp	r3, #1
 8001e0e:	d106      	bne.n	8001e1e <HAL_RCC_OscConfig+0x312>
 8001e10:	4b7b      	ldr	r3, [pc, #492]	; (8002000 <HAL_RCC_OscConfig+0x4f4>)
 8001e12:	6a1b      	ldr	r3, [r3, #32]
 8001e14:	4a7a      	ldr	r2, [pc, #488]	; (8002000 <HAL_RCC_OscConfig+0x4f4>)
 8001e16:	f043 0301 	orr.w	r3, r3, #1
 8001e1a:	6213      	str	r3, [r2, #32]
 8001e1c:	e02d      	b.n	8001e7a <HAL_RCC_OscConfig+0x36e>
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	68db      	ldr	r3, [r3, #12]
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	d10c      	bne.n	8001e40 <HAL_RCC_OscConfig+0x334>
 8001e26:	4b76      	ldr	r3, [pc, #472]	; (8002000 <HAL_RCC_OscConfig+0x4f4>)
 8001e28:	6a1b      	ldr	r3, [r3, #32]
 8001e2a:	4a75      	ldr	r2, [pc, #468]	; (8002000 <HAL_RCC_OscConfig+0x4f4>)
 8001e2c:	f023 0301 	bic.w	r3, r3, #1
 8001e30:	6213      	str	r3, [r2, #32]
 8001e32:	4b73      	ldr	r3, [pc, #460]	; (8002000 <HAL_RCC_OscConfig+0x4f4>)
 8001e34:	6a1b      	ldr	r3, [r3, #32]
 8001e36:	4a72      	ldr	r2, [pc, #456]	; (8002000 <HAL_RCC_OscConfig+0x4f4>)
 8001e38:	f023 0304 	bic.w	r3, r3, #4
 8001e3c:	6213      	str	r3, [r2, #32]
 8001e3e:	e01c      	b.n	8001e7a <HAL_RCC_OscConfig+0x36e>
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	68db      	ldr	r3, [r3, #12]
 8001e44:	2b05      	cmp	r3, #5
 8001e46:	d10c      	bne.n	8001e62 <HAL_RCC_OscConfig+0x356>
 8001e48:	4b6d      	ldr	r3, [pc, #436]	; (8002000 <HAL_RCC_OscConfig+0x4f4>)
 8001e4a:	6a1b      	ldr	r3, [r3, #32]
 8001e4c:	4a6c      	ldr	r2, [pc, #432]	; (8002000 <HAL_RCC_OscConfig+0x4f4>)
 8001e4e:	f043 0304 	orr.w	r3, r3, #4
 8001e52:	6213      	str	r3, [r2, #32]
 8001e54:	4b6a      	ldr	r3, [pc, #424]	; (8002000 <HAL_RCC_OscConfig+0x4f4>)
 8001e56:	6a1b      	ldr	r3, [r3, #32]
 8001e58:	4a69      	ldr	r2, [pc, #420]	; (8002000 <HAL_RCC_OscConfig+0x4f4>)
 8001e5a:	f043 0301 	orr.w	r3, r3, #1
 8001e5e:	6213      	str	r3, [r2, #32]
 8001e60:	e00b      	b.n	8001e7a <HAL_RCC_OscConfig+0x36e>
 8001e62:	4b67      	ldr	r3, [pc, #412]	; (8002000 <HAL_RCC_OscConfig+0x4f4>)
 8001e64:	6a1b      	ldr	r3, [r3, #32]
 8001e66:	4a66      	ldr	r2, [pc, #408]	; (8002000 <HAL_RCC_OscConfig+0x4f4>)
 8001e68:	f023 0301 	bic.w	r3, r3, #1
 8001e6c:	6213      	str	r3, [r2, #32]
 8001e6e:	4b64      	ldr	r3, [pc, #400]	; (8002000 <HAL_RCC_OscConfig+0x4f4>)
 8001e70:	6a1b      	ldr	r3, [r3, #32]
 8001e72:	4a63      	ldr	r2, [pc, #396]	; (8002000 <HAL_RCC_OscConfig+0x4f4>)
 8001e74:	f023 0304 	bic.w	r3, r3, #4
 8001e78:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	68db      	ldr	r3, [r3, #12]
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	d015      	beq.n	8001eae <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e82:	f7ff fb97 	bl	80015b4 <HAL_GetTick>
 8001e86:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001e88:	e00a      	b.n	8001ea0 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001e8a:	f7ff fb93 	bl	80015b4 <HAL_GetTick>
 8001e8e:	4602      	mov	r2, r0
 8001e90:	693b      	ldr	r3, [r7, #16]
 8001e92:	1ad3      	subs	r3, r2, r3
 8001e94:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e98:	4293      	cmp	r3, r2
 8001e9a:	d901      	bls.n	8001ea0 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001e9c:	2303      	movs	r3, #3
 8001e9e:	e0ab      	b.n	8001ff8 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001ea0:	4b57      	ldr	r3, [pc, #348]	; (8002000 <HAL_RCC_OscConfig+0x4f4>)
 8001ea2:	6a1b      	ldr	r3, [r3, #32]
 8001ea4:	f003 0302 	and.w	r3, r3, #2
 8001ea8:	2b00      	cmp	r3, #0
 8001eaa:	d0ee      	beq.n	8001e8a <HAL_RCC_OscConfig+0x37e>
 8001eac:	e014      	b.n	8001ed8 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001eae:	f7ff fb81 	bl	80015b4 <HAL_GetTick>
 8001eb2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001eb4:	e00a      	b.n	8001ecc <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001eb6:	f7ff fb7d 	bl	80015b4 <HAL_GetTick>
 8001eba:	4602      	mov	r2, r0
 8001ebc:	693b      	ldr	r3, [r7, #16]
 8001ebe:	1ad3      	subs	r3, r2, r3
 8001ec0:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ec4:	4293      	cmp	r3, r2
 8001ec6:	d901      	bls.n	8001ecc <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001ec8:	2303      	movs	r3, #3
 8001eca:	e095      	b.n	8001ff8 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001ecc:	4b4c      	ldr	r3, [pc, #304]	; (8002000 <HAL_RCC_OscConfig+0x4f4>)
 8001ece:	6a1b      	ldr	r3, [r3, #32]
 8001ed0:	f003 0302 	and.w	r3, r3, #2
 8001ed4:	2b00      	cmp	r3, #0
 8001ed6:	d1ee      	bne.n	8001eb6 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001ed8:	7dfb      	ldrb	r3, [r7, #23]
 8001eda:	2b01      	cmp	r3, #1
 8001edc:	d105      	bne.n	8001eea <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001ede:	4b48      	ldr	r3, [pc, #288]	; (8002000 <HAL_RCC_OscConfig+0x4f4>)
 8001ee0:	69db      	ldr	r3, [r3, #28]
 8001ee2:	4a47      	ldr	r2, [pc, #284]	; (8002000 <HAL_RCC_OscConfig+0x4f4>)
 8001ee4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001ee8:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	69db      	ldr	r3, [r3, #28]
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	f000 8081 	beq.w	8001ff6 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001ef4:	4b42      	ldr	r3, [pc, #264]	; (8002000 <HAL_RCC_OscConfig+0x4f4>)
 8001ef6:	685b      	ldr	r3, [r3, #4]
 8001ef8:	f003 030c 	and.w	r3, r3, #12
 8001efc:	2b08      	cmp	r3, #8
 8001efe:	d061      	beq.n	8001fc4 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	69db      	ldr	r3, [r3, #28]
 8001f04:	2b02      	cmp	r3, #2
 8001f06:	d146      	bne.n	8001f96 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001f08:	4b3f      	ldr	r3, [pc, #252]	; (8002008 <HAL_RCC_OscConfig+0x4fc>)
 8001f0a:	2200      	movs	r2, #0
 8001f0c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f0e:	f7ff fb51 	bl	80015b4 <HAL_GetTick>
 8001f12:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001f14:	e008      	b.n	8001f28 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001f16:	f7ff fb4d 	bl	80015b4 <HAL_GetTick>
 8001f1a:	4602      	mov	r2, r0
 8001f1c:	693b      	ldr	r3, [r7, #16]
 8001f1e:	1ad3      	subs	r3, r2, r3
 8001f20:	2b02      	cmp	r3, #2
 8001f22:	d901      	bls.n	8001f28 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001f24:	2303      	movs	r3, #3
 8001f26:	e067      	b.n	8001ff8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001f28:	4b35      	ldr	r3, [pc, #212]	; (8002000 <HAL_RCC_OscConfig+0x4f4>)
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f30:	2b00      	cmp	r3, #0
 8001f32:	d1f0      	bne.n	8001f16 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	6a1b      	ldr	r3, [r3, #32]
 8001f38:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001f3c:	d108      	bne.n	8001f50 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001f3e:	4b30      	ldr	r3, [pc, #192]	; (8002000 <HAL_RCC_OscConfig+0x4f4>)
 8001f40:	685b      	ldr	r3, [r3, #4]
 8001f42:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	689b      	ldr	r3, [r3, #8]
 8001f4a:	492d      	ldr	r1, [pc, #180]	; (8002000 <HAL_RCC_OscConfig+0x4f4>)
 8001f4c:	4313      	orrs	r3, r2
 8001f4e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001f50:	4b2b      	ldr	r3, [pc, #172]	; (8002000 <HAL_RCC_OscConfig+0x4f4>)
 8001f52:	685b      	ldr	r3, [r3, #4]
 8001f54:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	6a19      	ldr	r1, [r3, #32]
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f60:	430b      	orrs	r3, r1
 8001f62:	4927      	ldr	r1, [pc, #156]	; (8002000 <HAL_RCC_OscConfig+0x4f4>)
 8001f64:	4313      	orrs	r3, r2
 8001f66:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001f68:	4b27      	ldr	r3, [pc, #156]	; (8002008 <HAL_RCC_OscConfig+0x4fc>)
 8001f6a:	2201      	movs	r2, #1
 8001f6c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f6e:	f7ff fb21 	bl	80015b4 <HAL_GetTick>
 8001f72:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001f74:	e008      	b.n	8001f88 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001f76:	f7ff fb1d 	bl	80015b4 <HAL_GetTick>
 8001f7a:	4602      	mov	r2, r0
 8001f7c:	693b      	ldr	r3, [r7, #16]
 8001f7e:	1ad3      	subs	r3, r2, r3
 8001f80:	2b02      	cmp	r3, #2
 8001f82:	d901      	bls.n	8001f88 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001f84:	2303      	movs	r3, #3
 8001f86:	e037      	b.n	8001ff8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001f88:	4b1d      	ldr	r3, [pc, #116]	; (8002000 <HAL_RCC_OscConfig+0x4f4>)
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f90:	2b00      	cmp	r3, #0
 8001f92:	d0f0      	beq.n	8001f76 <HAL_RCC_OscConfig+0x46a>
 8001f94:	e02f      	b.n	8001ff6 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001f96:	4b1c      	ldr	r3, [pc, #112]	; (8002008 <HAL_RCC_OscConfig+0x4fc>)
 8001f98:	2200      	movs	r2, #0
 8001f9a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f9c:	f7ff fb0a 	bl	80015b4 <HAL_GetTick>
 8001fa0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001fa2:	e008      	b.n	8001fb6 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001fa4:	f7ff fb06 	bl	80015b4 <HAL_GetTick>
 8001fa8:	4602      	mov	r2, r0
 8001faa:	693b      	ldr	r3, [r7, #16]
 8001fac:	1ad3      	subs	r3, r2, r3
 8001fae:	2b02      	cmp	r3, #2
 8001fb0:	d901      	bls.n	8001fb6 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001fb2:	2303      	movs	r3, #3
 8001fb4:	e020      	b.n	8001ff8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001fb6:	4b12      	ldr	r3, [pc, #72]	; (8002000 <HAL_RCC_OscConfig+0x4f4>)
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	d1f0      	bne.n	8001fa4 <HAL_RCC_OscConfig+0x498>
 8001fc2:	e018      	b.n	8001ff6 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	69db      	ldr	r3, [r3, #28]
 8001fc8:	2b01      	cmp	r3, #1
 8001fca:	d101      	bne.n	8001fd0 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8001fcc:	2301      	movs	r3, #1
 8001fce:	e013      	b.n	8001ff8 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001fd0:	4b0b      	ldr	r3, [pc, #44]	; (8002000 <HAL_RCC_OscConfig+0x4f4>)
 8001fd2:	685b      	ldr	r3, [r3, #4]
 8001fd4:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001fd6:	68fb      	ldr	r3, [r7, #12]
 8001fd8:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	6a1b      	ldr	r3, [r3, #32]
 8001fe0:	429a      	cmp	r2, r3
 8001fe2:	d106      	bne.n	8001ff2 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001fe4:	68fb      	ldr	r3, [r7, #12]
 8001fe6:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001fee:	429a      	cmp	r2, r3
 8001ff0:	d001      	beq.n	8001ff6 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8001ff2:	2301      	movs	r3, #1
 8001ff4:	e000      	b.n	8001ff8 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8001ff6:	2300      	movs	r3, #0
}
 8001ff8:	4618      	mov	r0, r3
 8001ffa:	3718      	adds	r7, #24
 8001ffc:	46bd      	mov	sp, r7
 8001ffe:	bd80      	pop	{r7, pc}
 8002000:	40021000 	.word	0x40021000
 8002004:	40007000 	.word	0x40007000
 8002008:	42420060 	.word	0x42420060

0800200c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800200c:	b580      	push	{r7, lr}
 800200e:	b084      	sub	sp, #16
 8002010:	af00      	add	r7, sp, #0
 8002012:	6078      	str	r0, [r7, #4]
 8002014:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	2b00      	cmp	r3, #0
 800201a:	d101      	bne.n	8002020 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800201c:	2301      	movs	r3, #1
 800201e:	e0d0      	b.n	80021c2 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002020:	4b6a      	ldr	r3, [pc, #424]	; (80021cc <HAL_RCC_ClockConfig+0x1c0>)
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	f003 0307 	and.w	r3, r3, #7
 8002028:	683a      	ldr	r2, [r7, #0]
 800202a:	429a      	cmp	r2, r3
 800202c:	d910      	bls.n	8002050 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800202e:	4b67      	ldr	r3, [pc, #412]	; (80021cc <HAL_RCC_ClockConfig+0x1c0>)
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	f023 0207 	bic.w	r2, r3, #7
 8002036:	4965      	ldr	r1, [pc, #404]	; (80021cc <HAL_RCC_ClockConfig+0x1c0>)
 8002038:	683b      	ldr	r3, [r7, #0]
 800203a:	4313      	orrs	r3, r2
 800203c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800203e:	4b63      	ldr	r3, [pc, #396]	; (80021cc <HAL_RCC_ClockConfig+0x1c0>)
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	f003 0307 	and.w	r3, r3, #7
 8002046:	683a      	ldr	r2, [r7, #0]
 8002048:	429a      	cmp	r2, r3
 800204a:	d001      	beq.n	8002050 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800204c:	2301      	movs	r3, #1
 800204e:	e0b8      	b.n	80021c2 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	f003 0302 	and.w	r3, r3, #2
 8002058:	2b00      	cmp	r3, #0
 800205a:	d020      	beq.n	800209e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	f003 0304 	and.w	r3, r3, #4
 8002064:	2b00      	cmp	r3, #0
 8002066:	d005      	beq.n	8002074 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002068:	4b59      	ldr	r3, [pc, #356]	; (80021d0 <HAL_RCC_ClockConfig+0x1c4>)
 800206a:	685b      	ldr	r3, [r3, #4]
 800206c:	4a58      	ldr	r2, [pc, #352]	; (80021d0 <HAL_RCC_ClockConfig+0x1c4>)
 800206e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002072:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	f003 0308 	and.w	r3, r3, #8
 800207c:	2b00      	cmp	r3, #0
 800207e:	d005      	beq.n	800208c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002080:	4b53      	ldr	r3, [pc, #332]	; (80021d0 <HAL_RCC_ClockConfig+0x1c4>)
 8002082:	685b      	ldr	r3, [r3, #4]
 8002084:	4a52      	ldr	r2, [pc, #328]	; (80021d0 <HAL_RCC_ClockConfig+0x1c4>)
 8002086:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800208a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800208c:	4b50      	ldr	r3, [pc, #320]	; (80021d0 <HAL_RCC_ClockConfig+0x1c4>)
 800208e:	685b      	ldr	r3, [r3, #4]
 8002090:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	689b      	ldr	r3, [r3, #8]
 8002098:	494d      	ldr	r1, [pc, #308]	; (80021d0 <HAL_RCC_ClockConfig+0x1c4>)
 800209a:	4313      	orrs	r3, r2
 800209c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	f003 0301 	and.w	r3, r3, #1
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	d040      	beq.n	800212c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	685b      	ldr	r3, [r3, #4]
 80020ae:	2b01      	cmp	r3, #1
 80020b0:	d107      	bne.n	80020c2 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80020b2:	4b47      	ldr	r3, [pc, #284]	; (80021d0 <HAL_RCC_ClockConfig+0x1c4>)
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	d115      	bne.n	80020ea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80020be:	2301      	movs	r3, #1
 80020c0:	e07f      	b.n	80021c2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	685b      	ldr	r3, [r3, #4]
 80020c6:	2b02      	cmp	r3, #2
 80020c8:	d107      	bne.n	80020da <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80020ca:	4b41      	ldr	r3, [pc, #260]	; (80021d0 <HAL_RCC_ClockConfig+0x1c4>)
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d109      	bne.n	80020ea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80020d6:	2301      	movs	r3, #1
 80020d8:	e073      	b.n	80021c2 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80020da:	4b3d      	ldr	r3, [pc, #244]	; (80021d0 <HAL_RCC_ClockConfig+0x1c4>)
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	f003 0302 	and.w	r3, r3, #2
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	d101      	bne.n	80020ea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80020e6:	2301      	movs	r3, #1
 80020e8:	e06b      	b.n	80021c2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80020ea:	4b39      	ldr	r3, [pc, #228]	; (80021d0 <HAL_RCC_ClockConfig+0x1c4>)
 80020ec:	685b      	ldr	r3, [r3, #4]
 80020ee:	f023 0203 	bic.w	r2, r3, #3
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	685b      	ldr	r3, [r3, #4]
 80020f6:	4936      	ldr	r1, [pc, #216]	; (80021d0 <HAL_RCC_ClockConfig+0x1c4>)
 80020f8:	4313      	orrs	r3, r2
 80020fa:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80020fc:	f7ff fa5a 	bl	80015b4 <HAL_GetTick>
 8002100:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002102:	e00a      	b.n	800211a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002104:	f7ff fa56 	bl	80015b4 <HAL_GetTick>
 8002108:	4602      	mov	r2, r0
 800210a:	68fb      	ldr	r3, [r7, #12]
 800210c:	1ad3      	subs	r3, r2, r3
 800210e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002112:	4293      	cmp	r3, r2
 8002114:	d901      	bls.n	800211a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002116:	2303      	movs	r3, #3
 8002118:	e053      	b.n	80021c2 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800211a:	4b2d      	ldr	r3, [pc, #180]	; (80021d0 <HAL_RCC_ClockConfig+0x1c4>)
 800211c:	685b      	ldr	r3, [r3, #4]
 800211e:	f003 020c 	and.w	r2, r3, #12
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	685b      	ldr	r3, [r3, #4]
 8002126:	009b      	lsls	r3, r3, #2
 8002128:	429a      	cmp	r2, r3
 800212a:	d1eb      	bne.n	8002104 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800212c:	4b27      	ldr	r3, [pc, #156]	; (80021cc <HAL_RCC_ClockConfig+0x1c0>)
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	f003 0307 	and.w	r3, r3, #7
 8002134:	683a      	ldr	r2, [r7, #0]
 8002136:	429a      	cmp	r2, r3
 8002138:	d210      	bcs.n	800215c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800213a:	4b24      	ldr	r3, [pc, #144]	; (80021cc <HAL_RCC_ClockConfig+0x1c0>)
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	f023 0207 	bic.w	r2, r3, #7
 8002142:	4922      	ldr	r1, [pc, #136]	; (80021cc <HAL_RCC_ClockConfig+0x1c0>)
 8002144:	683b      	ldr	r3, [r7, #0]
 8002146:	4313      	orrs	r3, r2
 8002148:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800214a:	4b20      	ldr	r3, [pc, #128]	; (80021cc <HAL_RCC_ClockConfig+0x1c0>)
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	f003 0307 	and.w	r3, r3, #7
 8002152:	683a      	ldr	r2, [r7, #0]
 8002154:	429a      	cmp	r2, r3
 8002156:	d001      	beq.n	800215c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002158:	2301      	movs	r3, #1
 800215a:	e032      	b.n	80021c2 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	f003 0304 	and.w	r3, r3, #4
 8002164:	2b00      	cmp	r3, #0
 8002166:	d008      	beq.n	800217a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002168:	4b19      	ldr	r3, [pc, #100]	; (80021d0 <HAL_RCC_ClockConfig+0x1c4>)
 800216a:	685b      	ldr	r3, [r3, #4]
 800216c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	68db      	ldr	r3, [r3, #12]
 8002174:	4916      	ldr	r1, [pc, #88]	; (80021d0 <HAL_RCC_ClockConfig+0x1c4>)
 8002176:	4313      	orrs	r3, r2
 8002178:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	f003 0308 	and.w	r3, r3, #8
 8002182:	2b00      	cmp	r3, #0
 8002184:	d009      	beq.n	800219a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002186:	4b12      	ldr	r3, [pc, #72]	; (80021d0 <HAL_RCC_ClockConfig+0x1c4>)
 8002188:	685b      	ldr	r3, [r3, #4]
 800218a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	691b      	ldr	r3, [r3, #16]
 8002192:	00db      	lsls	r3, r3, #3
 8002194:	490e      	ldr	r1, [pc, #56]	; (80021d0 <HAL_RCC_ClockConfig+0x1c4>)
 8002196:	4313      	orrs	r3, r2
 8002198:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800219a:	f000 f821 	bl	80021e0 <HAL_RCC_GetSysClockFreq>
 800219e:	4601      	mov	r1, r0
 80021a0:	4b0b      	ldr	r3, [pc, #44]	; (80021d0 <HAL_RCC_ClockConfig+0x1c4>)
 80021a2:	685b      	ldr	r3, [r3, #4]
 80021a4:	091b      	lsrs	r3, r3, #4
 80021a6:	f003 030f 	and.w	r3, r3, #15
 80021aa:	4a0a      	ldr	r2, [pc, #40]	; (80021d4 <HAL_RCC_ClockConfig+0x1c8>)
 80021ac:	5cd3      	ldrb	r3, [r2, r3]
 80021ae:	fa21 f303 	lsr.w	r3, r1, r3
 80021b2:	4a09      	ldr	r2, [pc, #36]	; (80021d8 <HAL_RCC_ClockConfig+0x1cc>)
 80021b4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80021b6:	4b09      	ldr	r3, [pc, #36]	; (80021dc <HAL_RCC_ClockConfig+0x1d0>)
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	4618      	mov	r0, r3
 80021bc:	f7ff f9b8 	bl	8001530 <HAL_InitTick>

  return HAL_OK;
 80021c0:	2300      	movs	r3, #0
}
 80021c2:	4618      	mov	r0, r3
 80021c4:	3710      	adds	r7, #16
 80021c6:	46bd      	mov	sp, r7
 80021c8:	bd80      	pop	{r7, pc}
 80021ca:	bf00      	nop
 80021cc:	40022000 	.word	0x40022000
 80021d0:	40021000 	.word	0x40021000
 80021d4:	08003c1c 	.word	0x08003c1c
 80021d8:	20000000 	.word	0x20000000
 80021dc:	20000004 	.word	0x20000004

080021e0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80021e0:	b490      	push	{r4, r7}
 80021e2:	b08a      	sub	sp, #40	; 0x28
 80021e4:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80021e6:	4b2a      	ldr	r3, [pc, #168]	; (8002290 <HAL_RCC_GetSysClockFreq+0xb0>)
 80021e8:	1d3c      	adds	r4, r7, #4
 80021ea:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80021ec:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80021f0:	4b28      	ldr	r3, [pc, #160]	; (8002294 <HAL_RCC_GetSysClockFreq+0xb4>)
 80021f2:	881b      	ldrh	r3, [r3, #0]
 80021f4:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80021f6:	2300      	movs	r3, #0
 80021f8:	61fb      	str	r3, [r7, #28]
 80021fa:	2300      	movs	r3, #0
 80021fc:	61bb      	str	r3, [r7, #24]
 80021fe:	2300      	movs	r3, #0
 8002200:	627b      	str	r3, [r7, #36]	; 0x24
 8002202:	2300      	movs	r3, #0
 8002204:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8002206:	2300      	movs	r3, #0
 8002208:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800220a:	4b23      	ldr	r3, [pc, #140]	; (8002298 <HAL_RCC_GetSysClockFreq+0xb8>)
 800220c:	685b      	ldr	r3, [r3, #4]
 800220e:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002210:	69fb      	ldr	r3, [r7, #28]
 8002212:	f003 030c 	and.w	r3, r3, #12
 8002216:	2b04      	cmp	r3, #4
 8002218:	d002      	beq.n	8002220 <HAL_RCC_GetSysClockFreq+0x40>
 800221a:	2b08      	cmp	r3, #8
 800221c:	d003      	beq.n	8002226 <HAL_RCC_GetSysClockFreq+0x46>
 800221e:	e02d      	b.n	800227c <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002220:	4b1e      	ldr	r3, [pc, #120]	; (800229c <HAL_RCC_GetSysClockFreq+0xbc>)
 8002222:	623b      	str	r3, [r7, #32]
      break;
 8002224:	e02d      	b.n	8002282 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002226:	69fb      	ldr	r3, [r7, #28]
 8002228:	0c9b      	lsrs	r3, r3, #18
 800222a:	f003 030f 	and.w	r3, r3, #15
 800222e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8002232:	4413      	add	r3, r2
 8002234:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8002238:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800223a:	69fb      	ldr	r3, [r7, #28]
 800223c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002240:	2b00      	cmp	r3, #0
 8002242:	d013      	beq.n	800226c <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002244:	4b14      	ldr	r3, [pc, #80]	; (8002298 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002246:	685b      	ldr	r3, [r3, #4]
 8002248:	0c5b      	lsrs	r3, r3, #17
 800224a:	f003 0301 	and.w	r3, r3, #1
 800224e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8002252:	4413      	add	r3, r2
 8002254:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8002258:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800225a:	697b      	ldr	r3, [r7, #20]
 800225c:	4a0f      	ldr	r2, [pc, #60]	; (800229c <HAL_RCC_GetSysClockFreq+0xbc>)
 800225e:	fb02 f203 	mul.w	r2, r2, r3
 8002262:	69bb      	ldr	r3, [r7, #24]
 8002264:	fbb2 f3f3 	udiv	r3, r2, r3
 8002268:	627b      	str	r3, [r7, #36]	; 0x24
 800226a:	e004      	b.n	8002276 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800226c:	697b      	ldr	r3, [r7, #20]
 800226e:	4a0c      	ldr	r2, [pc, #48]	; (80022a0 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002270:	fb02 f303 	mul.w	r3, r2, r3
 8002274:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8002276:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002278:	623b      	str	r3, [r7, #32]
      break;
 800227a:	e002      	b.n	8002282 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800227c:	4b07      	ldr	r3, [pc, #28]	; (800229c <HAL_RCC_GetSysClockFreq+0xbc>)
 800227e:	623b      	str	r3, [r7, #32]
      break;
 8002280:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002282:	6a3b      	ldr	r3, [r7, #32]
}
 8002284:	4618      	mov	r0, r3
 8002286:	3728      	adds	r7, #40	; 0x28
 8002288:	46bd      	mov	sp, r7
 800228a:	bc90      	pop	{r4, r7}
 800228c:	4770      	bx	lr
 800228e:	bf00      	nop
 8002290:	08003bf0 	.word	0x08003bf0
 8002294:	08003c00 	.word	0x08003c00
 8002298:	40021000 	.word	0x40021000
 800229c:	007a1200 	.word	0x007a1200
 80022a0:	003d0900 	.word	0x003d0900

080022a4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80022a4:	b480      	push	{r7}
 80022a6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80022a8:	4b02      	ldr	r3, [pc, #8]	; (80022b4 <HAL_RCC_GetHCLKFreq+0x10>)
 80022aa:	681b      	ldr	r3, [r3, #0]
}
 80022ac:	4618      	mov	r0, r3
 80022ae:	46bd      	mov	sp, r7
 80022b0:	bc80      	pop	{r7}
 80022b2:	4770      	bx	lr
 80022b4:	20000000 	.word	0x20000000

080022b8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80022b8:	b580      	push	{r7, lr}
 80022ba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80022bc:	f7ff fff2 	bl	80022a4 <HAL_RCC_GetHCLKFreq>
 80022c0:	4601      	mov	r1, r0
 80022c2:	4b05      	ldr	r3, [pc, #20]	; (80022d8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80022c4:	685b      	ldr	r3, [r3, #4]
 80022c6:	0a1b      	lsrs	r3, r3, #8
 80022c8:	f003 0307 	and.w	r3, r3, #7
 80022cc:	4a03      	ldr	r2, [pc, #12]	; (80022dc <HAL_RCC_GetPCLK1Freq+0x24>)
 80022ce:	5cd3      	ldrb	r3, [r2, r3]
 80022d0:	fa21 f303 	lsr.w	r3, r1, r3
}
 80022d4:	4618      	mov	r0, r3
 80022d6:	bd80      	pop	{r7, pc}
 80022d8:	40021000 	.word	0x40021000
 80022dc:	08003c2c 	.word	0x08003c2c

080022e0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80022e0:	b580      	push	{r7, lr}
 80022e2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80022e4:	f7ff ffde 	bl	80022a4 <HAL_RCC_GetHCLKFreq>
 80022e8:	4601      	mov	r1, r0
 80022ea:	4b05      	ldr	r3, [pc, #20]	; (8002300 <HAL_RCC_GetPCLK2Freq+0x20>)
 80022ec:	685b      	ldr	r3, [r3, #4]
 80022ee:	0adb      	lsrs	r3, r3, #11
 80022f0:	f003 0307 	and.w	r3, r3, #7
 80022f4:	4a03      	ldr	r2, [pc, #12]	; (8002304 <HAL_RCC_GetPCLK2Freq+0x24>)
 80022f6:	5cd3      	ldrb	r3, [r2, r3]
 80022f8:	fa21 f303 	lsr.w	r3, r1, r3
}
 80022fc:	4618      	mov	r0, r3
 80022fe:	bd80      	pop	{r7, pc}
 8002300:	40021000 	.word	0x40021000
 8002304:	08003c2c 	.word	0x08003c2c

08002308 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002308:	b480      	push	{r7}
 800230a:	b085      	sub	sp, #20
 800230c:	af00      	add	r7, sp, #0
 800230e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002310:	4b0a      	ldr	r3, [pc, #40]	; (800233c <RCC_Delay+0x34>)
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	4a0a      	ldr	r2, [pc, #40]	; (8002340 <RCC_Delay+0x38>)
 8002316:	fba2 2303 	umull	r2, r3, r2, r3
 800231a:	0a5b      	lsrs	r3, r3, #9
 800231c:	687a      	ldr	r2, [r7, #4]
 800231e:	fb02 f303 	mul.w	r3, r2, r3
 8002322:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002324:	bf00      	nop
  }
  while (Delay --);
 8002326:	68fb      	ldr	r3, [r7, #12]
 8002328:	1e5a      	subs	r2, r3, #1
 800232a:	60fa      	str	r2, [r7, #12]
 800232c:	2b00      	cmp	r3, #0
 800232e:	d1f9      	bne.n	8002324 <RCC_Delay+0x1c>
}
 8002330:	bf00      	nop
 8002332:	3714      	adds	r7, #20
 8002334:	46bd      	mov	sp, r7
 8002336:	bc80      	pop	{r7}
 8002338:	4770      	bx	lr
 800233a:	bf00      	nop
 800233c:	20000000 	.word	0x20000000
 8002340:	10624dd3 	.word	0x10624dd3

08002344 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002344:	b580      	push	{r7, lr}
 8002346:	b082      	sub	sp, #8
 8002348:	af00      	add	r7, sp, #0
 800234a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	2b00      	cmp	r3, #0
 8002350:	d101      	bne.n	8002356 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002352:	2301      	movs	r3, #1
 8002354:	e076      	b.n	8002444 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800235a:	2b00      	cmp	r3, #0
 800235c:	d108      	bne.n	8002370 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	685b      	ldr	r3, [r3, #4]
 8002362:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002366:	d009      	beq.n	800237c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	2200      	movs	r2, #0
 800236c:	61da      	str	r2, [r3, #28]
 800236e:	e005      	b.n	800237c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	2200      	movs	r2, #0
 8002374:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	2200      	movs	r2, #0
 800237a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	2200      	movs	r2, #0
 8002380:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002388:	b2db      	uxtb	r3, r3
 800238a:	2b00      	cmp	r3, #0
 800238c:	d106      	bne.n	800239c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	2200      	movs	r2, #0
 8002392:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002396:	6878      	ldr	r0, [r7, #4]
 8002398:	f7fe ff94 	bl	80012c4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	2202      	movs	r2, #2
 80023a0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	681a      	ldr	r2, [r3, #0]
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80023b2:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	685b      	ldr	r3, [r3, #4]
 80023b8:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	689b      	ldr	r3, [r3, #8]
 80023c0:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80023c4:	431a      	orrs	r2, r3
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	68db      	ldr	r3, [r3, #12]
 80023ca:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80023ce:	431a      	orrs	r2, r3
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	691b      	ldr	r3, [r3, #16]
 80023d4:	f003 0302 	and.w	r3, r3, #2
 80023d8:	431a      	orrs	r2, r3
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	695b      	ldr	r3, [r3, #20]
 80023de:	f003 0301 	and.w	r3, r3, #1
 80023e2:	431a      	orrs	r2, r3
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	699b      	ldr	r3, [r3, #24]
 80023e8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80023ec:	431a      	orrs	r2, r3
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	69db      	ldr	r3, [r3, #28]
 80023f2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80023f6:	431a      	orrs	r2, r3
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	6a1b      	ldr	r3, [r3, #32]
 80023fc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002400:	ea42 0103 	orr.w	r1, r2, r3
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002408:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	430a      	orrs	r2, r1
 8002412:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	699b      	ldr	r3, [r3, #24]
 8002418:	0c1a      	lsrs	r2, r3, #16
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	f002 0204 	and.w	r2, r2, #4
 8002422:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	69da      	ldr	r2, [r3, #28]
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002432:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	2200      	movs	r2, #0
 8002438:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	2201      	movs	r2, #1
 800243e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8002442:	2300      	movs	r3, #0
}
 8002444:	4618      	mov	r0, r3
 8002446:	3708      	adds	r7, #8
 8002448:	46bd      	mov	sp, r7
 800244a:	bd80      	pop	{r7, pc}

0800244c <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800244c:	b580      	push	{r7, lr}
 800244e:	b088      	sub	sp, #32
 8002450:	af00      	add	r7, sp, #0
 8002452:	60f8      	str	r0, [r7, #12]
 8002454:	60b9      	str	r1, [r7, #8]
 8002456:	603b      	str	r3, [r7, #0]
 8002458:	4613      	mov	r3, r2
 800245a:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800245c:	2300      	movs	r3, #0
 800245e:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002460:	68fb      	ldr	r3, [r7, #12]
 8002462:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002466:	2b01      	cmp	r3, #1
 8002468:	d101      	bne.n	800246e <HAL_SPI_Transmit+0x22>
 800246a:	2302      	movs	r3, #2
 800246c:	e126      	b.n	80026bc <HAL_SPI_Transmit+0x270>
 800246e:	68fb      	ldr	r3, [r7, #12]
 8002470:	2201      	movs	r2, #1
 8002472:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002476:	f7ff f89d 	bl	80015b4 <HAL_GetTick>
 800247a:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800247c:	88fb      	ldrh	r3, [r7, #6]
 800247e:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002480:	68fb      	ldr	r3, [r7, #12]
 8002482:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002486:	b2db      	uxtb	r3, r3
 8002488:	2b01      	cmp	r3, #1
 800248a:	d002      	beq.n	8002492 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800248c:	2302      	movs	r3, #2
 800248e:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002490:	e10b      	b.n	80026aa <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8002492:	68bb      	ldr	r3, [r7, #8]
 8002494:	2b00      	cmp	r3, #0
 8002496:	d002      	beq.n	800249e <HAL_SPI_Transmit+0x52>
 8002498:	88fb      	ldrh	r3, [r7, #6]
 800249a:	2b00      	cmp	r3, #0
 800249c:	d102      	bne.n	80024a4 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800249e:	2301      	movs	r3, #1
 80024a0:	77fb      	strb	r3, [r7, #31]
    goto error;
 80024a2:	e102      	b.n	80026aa <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80024a4:	68fb      	ldr	r3, [r7, #12]
 80024a6:	2203      	movs	r2, #3
 80024a8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80024ac:	68fb      	ldr	r3, [r7, #12]
 80024ae:	2200      	movs	r2, #0
 80024b0:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80024b2:	68fb      	ldr	r3, [r7, #12]
 80024b4:	68ba      	ldr	r2, [r7, #8]
 80024b6:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	88fa      	ldrh	r2, [r7, #6]
 80024bc:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 80024be:	68fb      	ldr	r3, [r7, #12]
 80024c0:	88fa      	ldrh	r2, [r7, #6]
 80024c2:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80024c4:	68fb      	ldr	r3, [r7, #12]
 80024c6:	2200      	movs	r2, #0
 80024c8:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 80024ca:	68fb      	ldr	r3, [r7, #12]
 80024cc:	2200      	movs	r2, #0
 80024ce:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 80024d0:	68fb      	ldr	r3, [r7, #12]
 80024d2:	2200      	movs	r2, #0
 80024d4:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 80024d6:	68fb      	ldr	r3, [r7, #12]
 80024d8:	2200      	movs	r2, #0
 80024da:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 80024dc:	68fb      	ldr	r3, [r7, #12]
 80024de:	2200      	movs	r2, #0
 80024e0:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80024e2:	68fb      	ldr	r3, [r7, #12]
 80024e4:	689b      	ldr	r3, [r3, #8]
 80024e6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80024ea:	d10f      	bne.n	800250c <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80024ec:	68fb      	ldr	r3, [r7, #12]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	681a      	ldr	r2, [r3, #0]
 80024f2:	68fb      	ldr	r3, [r7, #12]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80024fa:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80024fc:	68fb      	ldr	r3, [r7, #12]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	681a      	ldr	r2, [r3, #0]
 8002502:	68fb      	ldr	r3, [r7, #12]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800250a:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800250c:	68fb      	ldr	r3, [r7, #12]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002516:	2b40      	cmp	r3, #64	; 0x40
 8002518:	d007      	beq.n	800252a <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800251a:	68fb      	ldr	r3, [r7, #12]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	681a      	ldr	r2, [r3, #0]
 8002520:	68fb      	ldr	r3, [r7, #12]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002528:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800252a:	68fb      	ldr	r3, [r7, #12]
 800252c:	68db      	ldr	r3, [r3, #12]
 800252e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002532:	d14b      	bne.n	80025cc <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	685b      	ldr	r3, [r3, #4]
 8002538:	2b00      	cmp	r3, #0
 800253a:	d002      	beq.n	8002542 <HAL_SPI_Transmit+0xf6>
 800253c:	8afb      	ldrh	r3, [r7, #22]
 800253e:	2b01      	cmp	r3, #1
 8002540:	d13e      	bne.n	80025c0 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002542:	68fb      	ldr	r3, [r7, #12]
 8002544:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002546:	881a      	ldrh	r2, [r3, #0]
 8002548:	68fb      	ldr	r3, [r7, #12]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800254e:	68fb      	ldr	r3, [r7, #12]
 8002550:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002552:	1c9a      	adds	r2, r3, #2
 8002554:	68fb      	ldr	r3, [r7, #12]
 8002556:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002558:	68fb      	ldr	r3, [r7, #12]
 800255a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800255c:	b29b      	uxth	r3, r3
 800255e:	3b01      	subs	r3, #1
 8002560:	b29a      	uxth	r2, r3
 8002562:	68fb      	ldr	r3, [r7, #12]
 8002564:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8002566:	e02b      	b.n	80025c0 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002568:	68fb      	ldr	r3, [r7, #12]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	689b      	ldr	r3, [r3, #8]
 800256e:	f003 0302 	and.w	r3, r3, #2
 8002572:	2b02      	cmp	r3, #2
 8002574:	d112      	bne.n	800259c <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800257a:	881a      	ldrh	r2, [r3, #0]
 800257c:	68fb      	ldr	r3, [r7, #12]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002582:	68fb      	ldr	r3, [r7, #12]
 8002584:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002586:	1c9a      	adds	r2, r3, #2
 8002588:	68fb      	ldr	r3, [r7, #12]
 800258a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800258c:	68fb      	ldr	r3, [r7, #12]
 800258e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002590:	b29b      	uxth	r3, r3
 8002592:	3b01      	subs	r3, #1
 8002594:	b29a      	uxth	r2, r3
 8002596:	68fb      	ldr	r3, [r7, #12]
 8002598:	86da      	strh	r2, [r3, #54]	; 0x36
 800259a:	e011      	b.n	80025c0 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800259c:	f7ff f80a 	bl	80015b4 <HAL_GetTick>
 80025a0:	4602      	mov	r2, r0
 80025a2:	69bb      	ldr	r3, [r7, #24]
 80025a4:	1ad3      	subs	r3, r2, r3
 80025a6:	683a      	ldr	r2, [r7, #0]
 80025a8:	429a      	cmp	r2, r3
 80025aa:	d803      	bhi.n	80025b4 <HAL_SPI_Transmit+0x168>
 80025ac:	683b      	ldr	r3, [r7, #0]
 80025ae:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80025b2:	d102      	bne.n	80025ba <HAL_SPI_Transmit+0x16e>
 80025b4:	683b      	ldr	r3, [r7, #0]
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d102      	bne.n	80025c0 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 80025ba:	2303      	movs	r3, #3
 80025bc:	77fb      	strb	r3, [r7, #31]
          goto error;
 80025be:	e074      	b.n	80026aa <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80025c0:	68fb      	ldr	r3, [r7, #12]
 80025c2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80025c4:	b29b      	uxth	r3, r3
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	d1ce      	bne.n	8002568 <HAL_SPI_Transmit+0x11c>
 80025ca:	e04c      	b.n	8002666 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	685b      	ldr	r3, [r3, #4]
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	d002      	beq.n	80025da <HAL_SPI_Transmit+0x18e>
 80025d4:	8afb      	ldrh	r3, [r7, #22]
 80025d6:	2b01      	cmp	r3, #1
 80025d8:	d140      	bne.n	800265c <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80025da:	68fb      	ldr	r3, [r7, #12]
 80025dc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80025de:	68fb      	ldr	r3, [r7, #12]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	330c      	adds	r3, #12
 80025e4:	7812      	ldrb	r2, [r2, #0]
 80025e6:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80025e8:	68fb      	ldr	r3, [r7, #12]
 80025ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025ec:	1c5a      	adds	r2, r3, #1
 80025ee:	68fb      	ldr	r3, [r7, #12]
 80025f0:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80025f2:	68fb      	ldr	r3, [r7, #12]
 80025f4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80025f6:	b29b      	uxth	r3, r3
 80025f8:	3b01      	subs	r3, #1
 80025fa:	b29a      	uxth	r2, r3
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8002600:	e02c      	b.n	800265c <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002602:	68fb      	ldr	r3, [r7, #12]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	689b      	ldr	r3, [r3, #8]
 8002608:	f003 0302 	and.w	r3, r3, #2
 800260c:	2b02      	cmp	r3, #2
 800260e:	d113      	bne.n	8002638 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	330c      	adds	r3, #12
 800261a:	7812      	ldrb	r2, [r2, #0]
 800261c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800261e:	68fb      	ldr	r3, [r7, #12]
 8002620:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002622:	1c5a      	adds	r2, r3, #1
 8002624:	68fb      	ldr	r3, [r7, #12]
 8002626:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800262c:	b29b      	uxth	r3, r3
 800262e:	3b01      	subs	r3, #1
 8002630:	b29a      	uxth	r2, r3
 8002632:	68fb      	ldr	r3, [r7, #12]
 8002634:	86da      	strh	r2, [r3, #54]	; 0x36
 8002636:	e011      	b.n	800265c <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002638:	f7fe ffbc 	bl	80015b4 <HAL_GetTick>
 800263c:	4602      	mov	r2, r0
 800263e:	69bb      	ldr	r3, [r7, #24]
 8002640:	1ad3      	subs	r3, r2, r3
 8002642:	683a      	ldr	r2, [r7, #0]
 8002644:	429a      	cmp	r2, r3
 8002646:	d803      	bhi.n	8002650 <HAL_SPI_Transmit+0x204>
 8002648:	683b      	ldr	r3, [r7, #0]
 800264a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800264e:	d102      	bne.n	8002656 <HAL_SPI_Transmit+0x20a>
 8002650:	683b      	ldr	r3, [r7, #0]
 8002652:	2b00      	cmp	r3, #0
 8002654:	d102      	bne.n	800265c <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8002656:	2303      	movs	r3, #3
 8002658:	77fb      	strb	r3, [r7, #31]
          goto error;
 800265a:	e026      	b.n	80026aa <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002660:	b29b      	uxth	r3, r3
 8002662:	2b00      	cmp	r3, #0
 8002664:	d1cd      	bne.n	8002602 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002666:	69ba      	ldr	r2, [r7, #24]
 8002668:	6839      	ldr	r1, [r7, #0]
 800266a:	68f8      	ldr	r0, [r7, #12]
 800266c:	f000 fbb8 	bl	8002de0 <SPI_EndRxTxTransaction>
 8002670:	4603      	mov	r3, r0
 8002672:	2b00      	cmp	r3, #0
 8002674:	d002      	beq.n	800267c <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002676:	68fb      	ldr	r3, [r7, #12]
 8002678:	2220      	movs	r2, #32
 800267a:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800267c:	68fb      	ldr	r3, [r7, #12]
 800267e:	689b      	ldr	r3, [r3, #8]
 8002680:	2b00      	cmp	r3, #0
 8002682:	d10a      	bne.n	800269a <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002684:	2300      	movs	r3, #0
 8002686:	613b      	str	r3, [r7, #16]
 8002688:	68fb      	ldr	r3, [r7, #12]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	68db      	ldr	r3, [r3, #12]
 800268e:	613b      	str	r3, [r7, #16]
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	689b      	ldr	r3, [r3, #8]
 8002696:	613b      	str	r3, [r7, #16]
 8002698:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800269a:	68fb      	ldr	r3, [r7, #12]
 800269c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d002      	beq.n	80026a8 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 80026a2:	2301      	movs	r3, #1
 80026a4:	77fb      	strb	r3, [r7, #31]
 80026a6:	e000      	b.n	80026aa <HAL_SPI_Transmit+0x25e>
  }

error:
 80026a8:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80026aa:	68fb      	ldr	r3, [r7, #12]
 80026ac:	2201      	movs	r2, #1
 80026ae:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80026b2:	68fb      	ldr	r3, [r7, #12]
 80026b4:	2200      	movs	r2, #0
 80026b6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80026ba:	7ffb      	ldrb	r3, [r7, #31]
}
 80026bc:	4618      	mov	r0, r3
 80026be:	3720      	adds	r7, #32
 80026c0:	46bd      	mov	sp, r7
 80026c2:	bd80      	pop	{r7, pc}

080026c4 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80026c4:	b580      	push	{r7, lr}
 80026c6:	b088      	sub	sp, #32
 80026c8:	af02      	add	r7, sp, #8
 80026ca:	60f8      	str	r0, [r7, #12]
 80026cc:	60b9      	str	r1, [r7, #8]
 80026ce:	603b      	str	r3, [r7, #0]
 80026d0:	4613      	mov	r3, r2
 80026d2:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80026d4:	2300      	movs	r3, #0
 80026d6:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	685b      	ldr	r3, [r3, #4]
 80026dc:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80026e0:	d112      	bne.n	8002708 <HAL_SPI_Receive+0x44>
 80026e2:	68fb      	ldr	r3, [r7, #12]
 80026e4:	689b      	ldr	r3, [r3, #8]
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d10e      	bne.n	8002708 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80026ea:	68fb      	ldr	r3, [r7, #12]
 80026ec:	2204      	movs	r2, #4
 80026ee:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 80026f2:	88fa      	ldrh	r2, [r7, #6]
 80026f4:	683b      	ldr	r3, [r7, #0]
 80026f6:	9300      	str	r3, [sp, #0]
 80026f8:	4613      	mov	r3, r2
 80026fa:	68ba      	ldr	r2, [r7, #8]
 80026fc:	68b9      	ldr	r1, [r7, #8]
 80026fe:	68f8      	ldr	r0, [r7, #12]
 8002700:	f000 f8f1 	bl	80028e6 <HAL_SPI_TransmitReceive>
 8002704:	4603      	mov	r3, r0
 8002706:	e0ea      	b.n	80028de <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002708:	68fb      	ldr	r3, [r7, #12]
 800270a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800270e:	2b01      	cmp	r3, #1
 8002710:	d101      	bne.n	8002716 <HAL_SPI_Receive+0x52>
 8002712:	2302      	movs	r3, #2
 8002714:	e0e3      	b.n	80028de <HAL_SPI_Receive+0x21a>
 8002716:	68fb      	ldr	r3, [r7, #12]
 8002718:	2201      	movs	r2, #1
 800271a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800271e:	f7fe ff49 	bl	80015b4 <HAL_GetTick>
 8002722:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002724:	68fb      	ldr	r3, [r7, #12]
 8002726:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800272a:	b2db      	uxtb	r3, r3
 800272c:	2b01      	cmp	r3, #1
 800272e:	d002      	beq.n	8002736 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8002730:	2302      	movs	r3, #2
 8002732:	75fb      	strb	r3, [r7, #23]
    goto error;
 8002734:	e0ca      	b.n	80028cc <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 8002736:	68bb      	ldr	r3, [r7, #8]
 8002738:	2b00      	cmp	r3, #0
 800273a:	d002      	beq.n	8002742 <HAL_SPI_Receive+0x7e>
 800273c:	88fb      	ldrh	r3, [r7, #6]
 800273e:	2b00      	cmp	r3, #0
 8002740:	d102      	bne.n	8002748 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8002742:	2301      	movs	r3, #1
 8002744:	75fb      	strb	r3, [r7, #23]
    goto error;
 8002746:	e0c1      	b.n	80028cc <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	2204      	movs	r2, #4
 800274c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002750:	68fb      	ldr	r3, [r7, #12]
 8002752:	2200      	movs	r2, #0
 8002754:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8002756:	68fb      	ldr	r3, [r7, #12]
 8002758:	68ba      	ldr	r2, [r7, #8]
 800275a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 800275c:	68fb      	ldr	r3, [r7, #12]
 800275e:	88fa      	ldrh	r2, [r7, #6]
 8002760:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8002762:	68fb      	ldr	r3, [r7, #12]
 8002764:	88fa      	ldrh	r2, [r7, #6]
 8002766:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	2200      	movs	r2, #0
 800276c:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 800276e:	68fb      	ldr	r3, [r7, #12]
 8002770:	2200      	movs	r2, #0
 8002772:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	2200      	movs	r2, #0
 8002778:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 800277a:	68fb      	ldr	r3, [r7, #12]
 800277c:	2200      	movs	r2, #0
 800277e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8002780:	68fb      	ldr	r3, [r7, #12]
 8002782:	2200      	movs	r2, #0
 8002784:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002786:	68fb      	ldr	r3, [r7, #12]
 8002788:	689b      	ldr	r3, [r3, #8]
 800278a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800278e:	d10f      	bne.n	80027b0 <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	681a      	ldr	r2, [r3, #0]
 8002796:	68fb      	ldr	r3, [r7, #12]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800279e:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	681a      	ldr	r2, [r3, #0]
 80027a6:	68fb      	ldr	r3, [r7, #12]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80027ae:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80027ba:	2b40      	cmp	r3, #64	; 0x40
 80027bc:	d007      	beq.n	80027ce <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80027be:	68fb      	ldr	r3, [r7, #12]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	681a      	ldr	r2, [r3, #0]
 80027c4:	68fb      	ldr	r3, [r7, #12]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80027cc:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 80027ce:	68fb      	ldr	r3, [r7, #12]
 80027d0:	68db      	ldr	r3, [r3, #12]
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d162      	bne.n	800289c <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 80027d6:	e02e      	b.n	8002836 <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80027d8:	68fb      	ldr	r3, [r7, #12]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	689b      	ldr	r3, [r3, #8]
 80027de:	f003 0301 	and.w	r3, r3, #1
 80027e2:	2b01      	cmp	r3, #1
 80027e4:	d115      	bne.n	8002812 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80027e6:	68fb      	ldr	r3, [r7, #12]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	f103 020c 	add.w	r2, r3, #12
 80027ee:	68fb      	ldr	r3, [r7, #12]
 80027f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80027f2:	7812      	ldrb	r2, [r2, #0]
 80027f4:	b2d2      	uxtb	r2, r2
 80027f6:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80027f8:	68fb      	ldr	r3, [r7, #12]
 80027fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80027fc:	1c5a      	adds	r2, r3, #1
 80027fe:	68fb      	ldr	r3, [r7, #12]
 8002800:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8002802:	68fb      	ldr	r3, [r7, #12]
 8002804:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002806:	b29b      	uxth	r3, r3
 8002808:	3b01      	subs	r3, #1
 800280a:	b29a      	uxth	r2, r3
 800280c:	68fb      	ldr	r3, [r7, #12]
 800280e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002810:	e011      	b.n	8002836 <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002812:	f7fe fecf 	bl	80015b4 <HAL_GetTick>
 8002816:	4602      	mov	r2, r0
 8002818:	693b      	ldr	r3, [r7, #16]
 800281a:	1ad3      	subs	r3, r2, r3
 800281c:	683a      	ldr	r2, [r7, #0]
 800281e:	429a      	cmp	r2, r3
 8002820:	d803      	bhi.n	800282a <HAL_SPI_Receive+0x166>
 8002822:	683b      	ldr	r3, [r7, #0]
 8002824:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002828:	d102      	bne.n	8002830 <HAL_SPI_Receive+0x16c>
 800282a:	683b      	ldr	r3, [r7, #0]
 800282c:	2b00      	cmp	r3, #0
 800282e:	d102      	bne.n	8002836 <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 8002830:	2303      	movs	r3, #3
 8002832:	75fb      	strb	r3, [r7, #23]
          goto error;
 8002834:	e04a      	b.n	80028cc <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8002836:	68fb      	ldr	r3, [r7, #12]
 8002838:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800283a:	b29b      	uxth	r3, r3
 800283c:	2b00      	cmp	r3, #0
 800283e:	d1cb      	bne.n	80027d8 <HAL_SPI_Receive+0x114>
 8002840:	e031      	b.n	80028a6 <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8002842:	68fb      	ldr	r3, [r7, #12]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	689b      	ldr	r3, [r3, #8]
 8002848:	f003 0301 	and.w	r3, r3, #1
 800284c:	2b01      	cmp	r3, #1
 800284e:	d113      	bne.n	8002878 <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	68da      	ldr	r2, [r3, #12]
 8002856:	68fb      	ldr	r3, [r7, #12]
 8002858:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800285a:	b292      	uxth	r2, r2
 800285c:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002862:	1c9a      	adds	r2, r3, #2
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800286c:	b29b      	uxth	r3, r3
 800286e:	3b01      	subs	r3, #1
 8002870:	b29a      	uxth	r2, r3
 8002872:	68fb      	ldr	r3, [r7, #12]
 8002874:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002876:	e011      	b.n	800289c <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002878:	f7fe fe9c 	bl	80015b4 <HAL_GetTick>
 800287c:	4602      	mov	r2, r0
 800287e:	693b      	ldr	r3, [r7, #16]
 8002880:	1ad3      	subs	r3, r2, r3
 8002882:	683a      	ldr	r2, [r7, #0]
 8002884:	429a      	cmp	r2, r3
 8002886:	d803      	bhi.n	8002890 <HAL_SPI_Receive+0x1cc>
 8002888:	683b      	ldr	r3, [r7, #0]
 800288a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800288e:	d102      	bne.n	8002896 <HAL_SPI_Receive+0x1d2>
 8002890:	683b      	ldr	r3, [r7, #0]
 8002892:	2b00      	cmp	r3, #0
 8002894:	d102      	bne.n	800289c <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 8002896:	2303      	movs	r3, #3
 8002898:	75fb      	strb	r3, [r7, #23]
          goto error;
 800289a:	e017      	b.n	80028cc <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80028a0:	b29b      	uxth	r3, r3
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d1cd      	bne.n	8002842 <HAL_SPI_Receive+0x17e>
    READ_REG(hspi->Instance->DR);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80028a6:	693a      	ldr	r2, [r7, #16]
 80028a8:	6839      	ldr	r1, [r7, #0]
 80028aa:	68f8      	ldr	r0, [r7, #12]
 80028ac:	f000 fa46 	bl	8002d3c <SPI_EndRxTransaction>
 80028b0:	4603      	mov	r3, r0
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d002      	beq.n	80028bc <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80028b6:	68fb      	ldr	r3, [r7, #12]
 80028b8:	2220      	movs	r2, #32
 80028ba:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80028bc:	68fb      	ldr	r3, [r7, #12]
 80028be:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	d002      	beq.n	80028ca <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 80028c4:	2301      	movs	r3, #1
 80028c6:	75fb      	strb	r3, [r7, #23]
 80028c8:	e000      	b.n	80028cc <HAL_SPI_Receive+0x208>
  }

error :
 80028ca:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	2201      	movs	r2, #1
 80028d0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	2200      	movs	r2, #0
 80028d8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80028dc:	7dfb      	ldrb	r3, [r7, #23]
}
 80028de:	4618      	mov	r0, r3
 80028e0:	3718      	adds	r7, #24
 80028e2:	46bd      	mov	sp, r7
 80028e4:	bd80      	pop	{r7, pc}

080028e6 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80028e6:	b580      	push	{r7, lr}
 80028e8:	b08c      	sub	sp, #48	; 0x30
 80028ea:	af00      	add	r7, sp, #0
 80028ec:	60f8      	str	r0, [r7, #12]
 80028ee:	60b9      	str	r1, [r7, #8]
 80028f0:	607a      	str	r2, [r7, #4]
 80028f2:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80028f4:	2301      	movs	r3, #1
 80028f6:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80028f8:	2300      	movs	r3, #0
 80028fa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80028fe:	68fb      	ldr	r3, [r7, #12]
 8002900:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002904:	2b01      	cmp	r3, #1
 8002906:	d101      	bne.n	800290c <HAL_SPI_TransmitReceive+0x26>
 8002908:	2302      	movs	r3, #2
 800290a:	e18a      	b.n	8002c22 <HAL_SPI_TransmitReceive+0x33c>
 800290c:	68fb      	ldr	r3, [r7, #12]
 800290e:	2201      	movs	r2, #1
 8002910:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002914:	f7fe fe4e 	bl	80015b4 <HAL_GetTick>
 8002918:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800291a:	68fb      	ldr	r3, [r7, #12]
 800291c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002920:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	685b      	ldr	r3, [r3, #4]
 8002928:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 800292a:	887b      	ldrh	r3, [r7, #2]
 800292c:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800292e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002932:	2b01      	cmp	r3, #1
 8002934:	d00f      	beq.n	8002956 <HAL_SPI_TransmitReceive+0x70>
 8002936:	69fb      	ldr	r3, [r7, #28]
 8002938:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800293c:	d107      	bne.n	800294e <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800293e:	68fb      	ldr	r3, [r7, #12]
 8002940:	689b      	ldr	r3, [r3, #8]
 8002942:	2b00      	cmp	r3, #0
 8002944:	d103      	bne.n	800294e <HAL_SPI_TransmitReceive+0x68>
 8002946:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800294a:	2b04      	cmp	r3, #4
 800294c:	d003      	beq.n	8002956 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 800294e:	2302      	movs	r3, #2
 8002950:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8002954:	e15b      	b.n	8002c0e <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8002956:	68bb      	ldr	r3, [r7, #8]
 8002958:	2b00      	cmp	r3, #0
 800295a:	d005      	beq.n	8002968 <HAL_SPI_TransmitReceive+0x82>
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	2b00      	cmp	r3, #0
 8002960:	d002      	beq.n	8002968 <HAL_SPI_TransmitReceive+0x82>
 8002962:	887b      	ldrh	r3, [r7, #2]
 8002964:	2b00      	cmp	r3, #0
 8002966:	d103      	bne.n	8002970 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8002968:	2301      	movs	r3, #1
 800296a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800296e:	e14e      	b.n	8002c0e <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002976:	b2db      	uxtb	r3, r3
 8002978:	2b04      	cmp	r3, #4
 800297a:	d003      	beq.n	8002984 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	2205      	movs	r2, #5
 8002980:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002984:	68fb      	ldr	r3, [r7, #12]
 8002986:	2200      	movs	r2, #0
 8002988:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800298a:	68fb      	ldr	r3, [r7, #12]
 800298c:	687a      	ldr	r2, [r7, #4]
 800298e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	887a      	ldrh	r2, [r7, #2]
 8002994:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8002996:	68fb      	ldr	r3, [r7, #12]
 8002998:	887a      	ldrh	r2, [r7, #2]
 800299a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	68ba      	ldr	r2, [r7, #8]
 80029a0:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 80029a2:	68fb      	ldr	r3, [r7, #12]
 80029a4:	887a      	ldrh	r2, [r7, #2]
 80029a6:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	887a      	ldrh	r2, [r7, #2]
 80029ac:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80029ae:	68fb      	ldr	r3, [r7, #12]
 80029b0:	2200      	movs	r2, #0
 80029b2:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	2200      	movs	r2, #0
 80029b8:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80029c4:	2b40      	cmp	r3, #64	; 0x40
 80029c6:	d007      	beq.n	80029d8 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	681a      	ldr	r2, [r3, #0]
 80029ce:	68fb      	ldr	r3, [r7, #12]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80029d6:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	68db      	ldr	r3, [r3, #12]
 80029dc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80029e0:	d178      	bne.n	8002ad4 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80029e2:	68fb      	ldr	r3, [r7, #12]
 80029e4:	685b      	ldr	r3, [r3, #4]
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	d002      	beq.n	80029f0 <HAL_SPI_TransmitReceive+0x10a>
 80029ea:	8b7b      	ldrh	r3, [r7, #26]
 80029ec:	2b01      	cmp	r3, #1
 80029ee:	d166      	bne.n	8002abe <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029f4:	881a      	ldrh	r2, [r3, #0]
 80029f6:	68fb      	ldr	r3, [r7, #12]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a00:	1c9a      	adds	r2, r3, #2
 8002a02:	68fb      	ldr	r3, [r7, #12]
 8002a04:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002a06:	68fb      	ldr	r3, [r7, #12]
 8002a08:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002a0a:	b29b      	uxth	r3, r3
 8002a0c:	3b01      	subs	r3, #1
 8002a0e:	b29a      	uxth	r2, r3
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002a14:	e053      	b.n	8002abe <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002a16:	68fb      	ldr	r3, [r7, #12]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	689b      	ldr	r3, [r3, #8]
 8002a1c:	f003 0302 	and.w	r3, r3, #2
 8002a20:	2b02      	cmp	r3, #2
 8002a22:	d11b      	bne.n	8002a5c <HAL_SPI_TransmitReceive+0x176>
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002a28:	b29b      	uxth	r3, r3
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	d016      	beq.n	8002a5c <HAL_SPI_TransmitReceive+0x176>
 8002a2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a30:	2b01      	cmp	r3, #1
 8002a32:	d113      	bne.n	8002a5c <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a38:	881a      	ldrh	r2, [r3, #0]
 8002a3a:	68fb      	ldr	r3, [r7, #12]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a44:	1c9a      	adds	r2, r3, #2
 8002a46:	68fb      	ldr	r3, [r7, #12]
 8002a48:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002a4a:	68fb      	ldr	r3, [r7, #12]
 8002a4c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002a4e:	b29b      	uxth	r3, r3
 8002a50:	3b01      	subs	r3, #1
 8002a52:	b29a      	uxth	r2, r3
 8002a54:	68fb      	ldr	r3, [r7, #12]
 8002a56:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002a58:	2300      	movs	r3, #0
 8002a5a:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	689b      	ldr	r3, [r3, #8]
 8002a62:	f003 0301 	and.w	r3, r3, #1
 8002a66:	2b01      	cmp	r3, #1
 8002a68:	d119      	bne.n	8002a9e <HAL_SPI_TransmitReceive+0x1b8>
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002a6e:	b29b      	uxth	r3, r3
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	d014      	beq.n	8002a9e <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	68da      	ldr	r2, [r3, #12]
 8002a7a:	68fb      	ldr	r3, [r7, #12]
 8002a7c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a7e:	b292      	uxth	r2, r2
 8002a80:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8002a82:	68fb      	ldr	r3, [r7, #12]
 8002a84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a86:	1c9a      	adds	r2, r3, #2
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002a90:	b29b      	uxth	r3, r3
 8002a92:	3b01      	subs	r3, #1
 8002a94:	b29a      	uxth	r2, r3
 8002a96:	68fb      	ldr	r3, [r7, #12]
 8002a98:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002a9a:	2301      	movs	r3, #1
 8002a9c:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8002a9e:	f7fe fd89 	bl	80015b4 <HAL_GetTick>
 8002aa2:	4602      	mov	r2, r0
 8002aa4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002aa6:	1ad3      	subs	r3, r2, r3
 8002aa8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002aaa:	429a      	cmp	r2, r3
 8002aac:	d807      	bhi.n	8002abe <HAL_SPI_TransmitReceive+0x1d8>
 8002aae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002ab0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002ab4:	d003      	beq.n	8002abe <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8002ab6:	2303      	movs	r3, #3
 8002ab8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8002abc:	e0a7      	b.n	8002c0e <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002abe:	68fb      	ldr	r3, [r7, #12]
 8002ac0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002ac2:	b29b      	uxth	r3, r3
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	d1a6      	bne.n	8002a16 <HAL_SPI_TransmitReceive+0x130>
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002acc:	b29b      	uxth	r3, r3
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d1a1      	bne.n	8002a16 <HAL_SPI_TransmitReceive+0x130>
 8002ad2:	e07c      	b.n	8002bce <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	685b      	ldr	r3, [r3, #4]
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	d002      	beq.n	8002ae2 <HAL_SPI_TransmitReceive+0x1fc>
 8002adc:	8b7b      	ldrh	r3, [r7, #26]
 8002ade:	2b01      	cmp	r3, #1
 8002ae0:	d16b      	bne.n	8002bba <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002ae2:	68fb      	ldr	r3, [r7, #12]
 8002ae4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	330c      	adds	r3, #12
 8002aec:	7812      	ldrb	r2, [r2, #0]
 8002aee:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002af4:	1c5a      	adds	r2, r3, #1
 8002af6:	68fb      	ldr	r3, [r7, #12]
 8002af8:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002afa:	68fb      	ldr	r3, [r7, #12]
 8002afc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002afe:	b29b      	uxth	r3, r3
 8002b00:	3b01      	subs	r3, #1
 8002b02:	b29a      	uxth	r2, r3
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002b08:	e057      	b.n	8002bba <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	689b      	ldr	r3, [r3, #8]
 8002b10:	f003 0302 	and.w	r3, r3, #2
 8002b14:	2b02      	cmp	r3, #2
 8002b16:	d11c      	bne.n	8002b52 <HAL_SPI_TransmitReceive+0x26c>
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002b1c:	b29b      	uxth	r3, r3
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d017      	beq.n	8002b52 <HAL_SPI_TransmitReceive+0x26c>
 8002b22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b24:	2b01      	cmp	r3, #1
 8002b26:	d114      	bne.n	8002b52 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	330c      	adds	r3, #12
 8002b32:	7812      	ldrb	r2, [r2, #0]
 8002b34:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b3a:	1c5a      	adds	r2, r3, #1
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002b44:	b29b      	uxth	r3, r3
 8002b46:	3b01      	subs	r3, #1
 8002b48:	b29a      	uxth	r2, r3
 8002b4a:	68fb      	ldr	r3, [r7, #12]
 8002b4c:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002b4e:	2300      	movs	r3, #0
 8002b50:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	689b      	ldr	r3, [r3, #8]
 8002b58:	f003 0301 	and.w	r3, r3, #1
 8002b5c:	2b01      	cmp	r3, #1
 8002b5e:	d119      	bne.n	8002b94 <HAL_SPI_TransmitReceive+0x2ae>
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002b64:	b29b      	uxth	r3, r3
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d014      	beq.n	8002b94 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8002b6a:	68fb      	ldr	r3, [r7, #12]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	68da      	ldr	r2, [r3, #12]
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b74:	b2d2      	uxtb	r2, r2
 8002b76:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8002b78:	68fb      	ldr	r3, [r7, #12]
 8002b7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b7c:	1c5a      	adds	r2, r3, #1
 8002b7e:	68fb      	ldr	r3, [r7, #12]
 8002b80:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8002b82:	68fb      	ldr	r3, [r7, #12]
 8002b84:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002b86:	b29b      	uxth	r3, r3
 8002b88:	3b01      	subs	r3, #1
 8002b8a:	b29a      	uxth	r2, r3
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002b90:	2301      	movs	r3, #1
 8002b92:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8002b94:	f7fe fd0e 	bl	80015b4 <HAL_GetTick>
 8002b98:	4602      	mov	r2, r0
 8002b9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b9c:	1ad3      	subs	r3, r2, r3
 8002b9e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002ba0:	429a      	cmp	r2, r3
 8002ba2:	d803      	bhi.n	8002bac <HAL_SPI_TransmitReceive+0x2c6>
 8002ba4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002ba6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002baa:	d102      	bne.n	8002bb2 <HAL_SPI_TransmitReceive+0x2cc>
 8002bac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d103      	bne.n	8002bba <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8002bb2:	2303      	movs	r3, #3
 8002bb4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8002bb8:	e029      	b.n	8002c0e <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002bbe:	b29b      	uxth	r3, r3
 8002bc0:	2b00      	cmp	r3, #0
 8002bc2:	d1a2      	bne.n	8002b0a <HAL_SPI_TransmitReceive+0x224>
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002bc8:	b29b      	uxth	r3, r3
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d19d      	bne.n	8002b0a <HAL_SPI_TransmitReceive+0x224>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002bce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002bd0:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002bd2:	68f8      	ldr	r0, [r7, #12]
 8002bd4:	f000 f904 	bl	8002de0 <SPI_EndRxTxTransaction>
 8002bd8:	4603      	mov	r3, r0
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d006      	beq.n	8002bec <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8002bde:	2301      	movs	r3, #1
 8002be0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	2220      	movs	r2, #32
 8002be8:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8002bea:	e010      	b.n	8002c0e <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	689b      	ldr	r3, [r3, #8]
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	d10b      	bne.n	8002c0c <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002bf4:	2300      	movs	r3, #0
 8002bf6:	617b      	str	r3, [r7, #20]
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	68db      	ldr	r3, [r3, #12]
 8002bfe:	617b      	str	r3, [r7, #20]
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	689b      	ldr	r3, [r3, #8]
 8002c06:	617b      	str	r3, [r7, #20]
 8002c08:	697b      	ldr	r3, [r7, #20]
 8002c0a:	e000      	b.n	8002c0e <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8002c0c:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8002c0e:	68fb      	ldr	r3, [r7, #12]
 8002c10:	2201      	movs	r2, #1
 8002c12:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8002c16:	68fb      	ldr	r3, [r7, #12]
 8002c18:	2200      	movs	r2, #0
 8002c1a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8002c1e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8002c22:	4618      	mov	r0, r3
 8002c24:	3730      	adds	r7, #48	; 0x30
 8002c26:	46bd      	mov	sp, r7
 8002c28:	bd80      	pop	{r7, pc}
	...

08002c2c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002c2c:	b580      	push	{r7, lr}
 8002c2e:	b088      	sub	sp, #32
 8002c30:	af00      	add	r7, sp, #0
 8002c32:	60f8      	str	r0, [r7, #12]
 8002c34:	60b9      	str	r1, [r7, #8]
 8002c36:	603b      	str	r3, [r7, #0]
 8002c38:	4613      	mov	r3, r2
 8002c3a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8002c3c:	f7fe fcba 	bl	80015b4 <HAL_GetTick>
 8002c40:	4602      	mov	r2, r0
 8002c42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c44:	1a9b      	subs	r3, r3, r2
 8002c46:	683a      	ldr	r2, [r7, #0]
 8002c48:	4413      	add	r3, r2
 8002c4a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8002c4c:	f7fe fcb2 	bl	80015b4 <HAL_GetTick>
 8002c50:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8002c52:	4b39      	ldr	r3, [pc, #228]	; (8002d38 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	015b      	lsls	r3, r3, #5
 8002c58:	0d1b      	lsrs	r3, r3, #20
 8002c5a:	69fa      	ldr	r2, [r7, #28]
 8002c5c:	fb02 f303 	mul.w	r3, r2, r3
 8002c60:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002c62:	e054      	b.n	8002d0e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8002c64:	683b      	ldr	r3, [r7, #0]
 8002c66:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002c6a:	d050      	beq.n	8002d0e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8002c6c:	f7fe fca2 	bl	80015b4 <HAL_GetTick>
 8002c70:	4602      	mov	r2, r0
 8002c72:	69bb      	ldr	r3, [r7, #24]
 8002c74:	1ad3      	subs	r3, r2, r3
 8002c76:	69fa      	ldr	r2, [r7, #28]
 8002c78:	429a      	cmp	r2, r3
 8002c7a:	d902      	bls.n	8002c82 <SPI_WaitFlagStateUntilTimeout+0x56>
 8002c7c:	69fb      	ldr	r3, [r7, #28]
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d13d      	bne.n	8002cfe <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	685a      	ldr	r2, [r3, #4]
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8002c90:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	685b      	ldr	r3, [r3, #4]
 8002c96:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002c9a:	d111      	bne.n	8002cc0 <SPI_WaitFlagStateUntilTimeout+0x94>
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	689b      	ldr	r3, [r3, #8]
 8002ca0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002ca4:	d004      	beq.n	8002cb0 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	689b      	ldr	r3, [r3, #8]
 8002caa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002cae:	d107      	bne.n	8002cc0 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	681a      	ldr	r2, [r3, #0]
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002cbe:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002cc4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002cc8:	d10f      	bne.n	8002cea <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8002cca:	68fb      	ldr	r3, [r7, #12]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	681a      	ldr	r2, [r3, #0]
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002cd8:	601a      	str	r2, [r3, #0]
 8002cda:	68fb      	ldr	r3, [r7, #12]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	681a      	ldr	r2, [r3, #0]
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002ce8:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002cea:	68fb      	ldr	r3, [r7, #12]
 8002cec:	2201      	movs	r2, #1
 8002cee:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002cf2:	68fb      	ldr	r3, [r7, #12]
 8002cf4:	2200      	movs	r2, #0
 8002cf6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8002cfa:	2303      	movs	r3, #3
 8002cfc:	e017      	b.n	8002d2e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8002cfe:	697b      	ldr	r3, [r7, #20]
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	d101      	bne.n	8002d08 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8002d04:	2300      	movs	r3, #0
 8002d06:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8002d08:	697b      	ldr	r3, [r7, #20]
 8002d0a:	3b01      	subs	r3, #1
 8002d0c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002d0e:	68fb      	ldr	r3, [r7, #12]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	689a      	ldr	r2, [r3, #8]
 8002d14:	68bb      	ldr	r3, [r7, #8]
 8002d16:	4013      	ands	r3, r2
 8002d18:	68ba      	ldr	r2, [r7, #8]
 8002d1a:	429a      	cmp	r2, r3
 8002d1c:	bf0c      	ite	eq
 8002d1e:	2301      	moveq	r3, #1
 8002d20:	2300      	movne	r3, #0
 8002d22:	b2db      	uxtb	r3, r3
 8002d24:	461a      	mov	r2, r3
 8002d26:	79fb      	ldrb	r3, [r7, #7]
 8002d28:	429a      	cmp	r2, r3
 8002d2a:	d19b      	bne.n	8002c64 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8002d2c:	2300      	movs	r3, #0
}
 8002d2e:	4618      	mov	r0, r3
 8002d30:	3720      	adds	r7, #32
 8002d32:	46bd      	mov	sp, r7
 8002d34:	bd80      	pop	{r7, pc}
 8002d36:	bf00      	nop
 8002d38:	20000000 	.word	0x20000000

08002d3c <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8002d3c:	b580      	push	{r7, lr}
 8002d3e:	b086      	sub	sp, #24
 8002d40:	af02      	add	r7, sp, #8
 8002d42:	60f8      	str	r0, [r7, #12]
 8002d44:	60b9      	str	r1, [r7, #8]
 8002d46:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	685b      	ldr	r3, [r3, #4]
 8002d4c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002d50:	d111      	bne.n	8002d76 <SPI_EndRxTransaction+0x3a>
 8002d52:	68fb      	ldr	r3, [r7, #12]
 8002d54:	689b      	ldr	r3, [r3, #8]
 8002d56:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002d5a:	d004      	beq.n	8002d66 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	689b      	ldr	r3, [r3, #8]
 8002d60:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002d64:	d107      	bne.n	8002d76 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8002d66:	68fb      	ldr	r3, [r7, #12]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	681a      	ldr	r2, [r3, #0]
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002d74:	601a      	str	r2, [r3, #0]
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY))
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	685b      	ldr	r3, [r3, #4]
 8002d7a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002d7e:	d117      	bne.n	8002db0 <SPI_EndRxTransaction+0x74>
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	689b      	ldr	r3, [r3, #8]
 8002d84:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002d88:	d112      	bne.n	8002db0 <SPI_EndRxTransaction+0x74>
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	9300      	str	r3, [sp, #0]
 8002d8e:	68bb      	ldr	r3, [r7, #8]
 8002d90:	2200      	movs	r2, #0
 8002d92:	2101      	movs	r1, #1
 8002d94:	68f8      	ldr	r0, [r7, #12]
 8002d96:	f7ff ff49 	bl	8002c2c <SPI_WaitFlagStateUntilTimeout>
 8002d9a:	4603      	mov	r3, r0
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	d01a      	beq.n	8002dd6 <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002da4:	f043 0220 	orr.w	r2, r3, #32
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8002dac:	2303      	movs	r3, #3
 8002dae:	e013      	b.n	8002dd8 <SPI_EndRxTransaction+0x9c>
    }
  }
  else
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	9300      	str	r3, [sp, #0]
 8002db4:	68bb      	ldr	r3, [r7, #8]
 8002db6:	2200      	movs	r2, #0
 8002db8:	2180      	movs	r1, #128	; 0x80
 8002dba:	68f8      	ldr	r0, [r7, #12]
 8002dbc:	f7ff ff36 	bl	8002c2c <SPI_WaitFlagStateUntilTimeout>
 8002dc0:	4603      	mov	r3, r0
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d007      	beq.n	8002dd6 <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002dc6:	68fb      	ldr	r3, [r7, #12]
 8002dc8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002dca:	f043 0220 	orr.w	r2, r3, #32
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8002dd2:	2303      	movs	r3, #3
 8002dd4:	e000      	b.n	8002dd8 <SPI_EndRxTransaction+0x9c>
    }
  }
  return HAL_OK;
 8002dd6:	2300      	movs	r3, #0
}
 8002dd8:	4618      	mov	r0, r3
 8002dda:	3710      	adds	r7, #16
 8002ddc:	46bd      	mov	sp, r7
 8002dde:	bd80      	pop	{r7, pc}

08002de0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8002de0:	b580      	push	{r7, lr}
 8002de2:	b086      	sub	sp, #24
 8002de4:	af02      	add	r7, sp, #8
 8002de6:	60f8      	str	r0, [r7, #12]
 8002de8:	60b9      	str	r1, [r7, #8]
 8002dea:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	9300      	str	r3, [sp, #0]
 8002df0:	68bb      	ldr	r3, [r7, #8]
 8002df2:	2200      	movs	r2, #0
 8002df4:	2180      	movs	r1, #128	; 0x80
 8002df6:	68f8      	ldr	r0, [r7, #12]
 8002df8:	f7ff ff18 	bl	8002c2c <SPI_WaitFlagStateUntilTimeout>
 8002dfc:	4603      	mov	r3, r0
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d007      	beq.n	8002e12 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002e02:	68fb      	ldr	r3, [r7, #12]
 8002e04:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e06:	f043 0220 	orr.w	r2, r3, #32
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 8002e0e:	2303      	movs	r3, #3
 8002e10:	e000      	b.n	8002e14 <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 8002e12:	2300      	movs	r3, #0
}
 8002e14:	4618      	mov	r0, r3
 8002e16:	3710      	adds	r7, #16
 8002e18:	46bd      	mov	sp, r7
 8002e1a:	bd80      	pop	{r7, pc}

08002e1c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002e1c:	b580      	push	{r7, lr}
 8002e1e:	b082      	sub	sp, #8
 8002e20:	af00      	add	r7, sp, #0
 8002e22:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d101      	bne.n	8002e2e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002e2a:	2301      	movs	r3, #1
 8002e2c:	e03f      	b.n	8002eae <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002e34:	b2db      	uxtb	r3, r3
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d106      	bne.n	8002e48 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	2200      	movs	r2, #0
 8002e3e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002e42:	6878      	ldr	r0, [r7, #4]
 8002e44:	f7fe fa88 	bl	8001358 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	2224      	movs	r2, #36	; 0x24
 8002e4c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	68da      	ldr	r2, [r3, #12]
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002e5e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002e60:	6878      	ldr	r0, [r7, #4]
 8002e62:	f000 f905 	bl	8003070 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	691a      	ldr	r2, [r3, #16]
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002e74:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	695a      	ldr	r2, [r3, #20]
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002e84:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	68da      	ldr	r2, [r3, #12]
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002e94:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	2200      	movs	r2, #0
 8002e9a:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	2220      	movs	r2, #32
 8002ea0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	2220      	movs	r2, #32
 8002ea8:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8002eac:	2300      	movs	r3, #0
}
 8002eae:	4618      	mov	r0, r3
 8002eb0:	3708      	adds	r7, #8
 8002eb2:	46bd      	mov	sp, r7
 8002eb4:	bd80      	pop	{r7, pc}

08002eb6 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002eb6:	b580      	push	{r7, lr}
 8002eb8:	b08a      	sub	sp, #40	; 0x28
 8002eba:	af02      	add	r7, sp, #8
 8002ebc:	60f8      	str	r0, [r7, #12]
 8002ebe:	60b9      	str	r1, [r7, #8]
 8002ec0:	603b      	str	r3, [r7, #0]
 8002ec2:	4613      	mov	r3, r2
 8002ec4:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002ec6:	2300      	movs	r3, #0
 8002ec8:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002eca:	68fb      	ldr	r3, [r7, #12]
 8002ecc:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002ed0:	b2db      	uxtb	r3, r3
 8002ed2:	2b20      	cmp	r3, #32
 8002ed4:	d17c      	bne.n	8002fd0 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002ed6:	68bb      	ldr	r3, [r7, #8]
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	d002      	beq.n	8002ee2 <HAL_UART_Transmit+0x2c>
 8002edc:	88fb      	ldrh	r3, [r7, #6]
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d101      	bne.n	8002ee6 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002ee2:	2301      	movs	r3, #1
 8002ee4:	e075      	b.n	8002fd2 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002eec:	2b01      	cmp	r3, #1
 8002eee:	d101      	bne.n	8002ef4 <HAL_UART_Transmit+0x3e>
 8002ef0:	2302      	movs	r3, #2
 8002ef2:	e06e      	b.n	8002fd2 <HAL_UART_Transmit+0x11c>
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	2201      	movs	r2, #1
 8002ef8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	2200      	movs	r2, #0
 8002f00:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002f02:	68fb      	ldr	r3, [r7, #12]
 8002f04:	2221      	movs	r2, #33	; 0x21
 8002f06:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8002f0a:	f7fe fb53 	bl	80015b4 <HAL_GetTick>
 8002f0e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	88fa      	ldrh	r2, [r7, #6]
 8002f14:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002f16:	68fb      	ldr	r3, [r7, #12]
 8002f18:	88fa      	ldrh	r2, [r7, #6]
 8002f1a:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	689b      	ldr	r3, [r3, #8]
 8002f20:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002f24:	d108      	bne.n	8002f38 <HAL_UART_Transmit+0x82>
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	691b      	ldr	r3, [r3, #16]
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d104      	bne.n	8002f38 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8002f2e:	2300      	movs	r3, #0
 8002f30:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8002f32:	68bb      	ldr	r3, [r7, #8]
 8002f34:	61bb      	str	r3, [r7, #24]
 8002f36:	e003      	b.n	8002f40 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8002f38:	68bb      	ldr	r3, [r7, #8]
 8002f3a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002f3c:	2300      	movs	r3, #0
 8002f3e:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002f40:	68fb      	ldr	r3, [r7, #12]
 8002f42:	2200      	movs	r2, #0
 8002f44:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 8002f48:	e02a      	b.n	8002fa0 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002f4a:	683b      	ldr	r3, [r7, #0]
 8002f4c:	9300      	str	r3, [sp, #0]
 8002f4e:	697b      	ldr	r3, [r7, #20]
 8002f50:	2200      	movs	r2, #0
 8002f52:	2180      	movs	r1, #128	; 0x80
 8002f54:	68f8      	ldr	r0, [r7, #12]
 8002f56:	f000 f840 	bl	8002fda <UART_WaitOnFlagUntilTimeout>
 8002f5a:	4603      	mov	r3, r0
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	d001      	beq.n	8002f64 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8002f60:	2303      	movs	r3, #3
 8002f62:	e036      	b.n	8002fd2 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8002f64:	69fb      	ldr	r3, [r7, #28]
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	d10b      	bne.n	8002f82 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002f6a:	69bb      	ldr	r3, [r7, #24]
 8002f6c:	881b      	ldrh	r3, [r3, #0]
 8002f6e:	461a      	mov	r2, r3
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002f78:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002f7a:	69bb      	ldr	r3, [r7, #24]
 8002f7c:	3302      	adds	r3, #2
 8002f7e:	61bb      	str	r3, [r7, #24]
 8002f80:	e007      	b.n	8002f92 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002f82:	69fb      	ldr	r3, [r7, #28]
 8002f84:	781a      	ldrb	r2, [r3, #0]
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002f8c:	69fb      	ldr	r3, [r7, #28]
 8002f8e:	3301      	adds	r3, #1
 8002f90:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002f96:	b29b      	uxth	r3, r3
 8002f98:	3b01      	subs	r3, #1
 8002f9a:	b29a      	uxth	r2, r3
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002fa4:	b29b      	uxth	r3, r3
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d1cf      	bne.n	8002f4a <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002faa:	683b      	ldr	r3, [r7, #0]
 8002fac:	9300      	str	r3, [sp, #0]
 8002fae:	697b      	ldr	r3, [r7, #20]
 8002fb0:	2200      	movs	r2, #0
 8002fb2:	2140      	movs	r1, #64	; 0x40
 8002fb4:	68f8      	ldr	r0, [r7, #12]
 8002fb6:	f000 f810 	bl	8002fda <UART_WaitOnFlagUntilTimeout>
 8002fba:	4603      	mov	r3, r0
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	d001      	beq.n	8002fc4 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8002fc0:	2303      	movs	r3, #3
 8002fc2:	e006      	b.n	8002fd2 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	2220      	movs	r2, #32
 8002fc8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 8002fcc:	2300      	movs	r3, #0
 8002fce:	e000      	b.n	8002fd2 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8002fd0:	2302      	movs	r3, #2
  }
}
 8002fd2:	4618      	mov	r0, r3
 8002fd4:	3720      	adds	r7, #32
 8002fd6:	46bd      	mov	sp, r7
 8002fd8:	bd80      	pop	{r7, pc}

08002fda <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8002fda:	b580      	push	{r7, lr}
 8002fdc:	b084      	sub	sp, #16
 8002fde:	af00      	add	r7, sp, #0
 8002fe0:	60f8      	str	r0, [r7, #12]
 8002fe2:	60b9      	str	r1, [r7, #8]
 8002fe4:	603b      	str	r3, [r7, #0]
 8002fe6:	4613      	mov	r3, r2
 8002fe8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002fea:	e02c      	b.n	8003046 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002fec:	69bb      	ldr	r3, [r7, #24]
 8002fee:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002ff2:	d028      	beq.n	8003046 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002ff4:	69bb      	ldr	r3, [r7, #24]
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	d007      	beq.n	800300a <UART_WaitOnFlagUntilTimeout+0x30>
 8002ffa:	f7fe fadb 	bl	80015b4 <HAL_GetTick>
 8002ffe:	4602      	mov	r2, r0
 8003000:	683b      	ldr	r3, [r7, #0]
 8003002:	1ad3      	subs	r3, r2, r3
 8003004:	69ba      	ldr	r2, [r7, #24]
 8003006:	429a      	cmp	r2, r3
 8003008:	d21d      	bcs.n	8003046 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	68da      	ldr	r2, [r3, #12]
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003018:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	695a      	ldr	r2, [r3, #20]
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	f022 0201 	bic.w	r2, r2, #1
 8003028:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	2220      	movs	r2, #32
 800302e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	2220      	movs	r2, #32
 8003036:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800303a:	68fb      	ldr	r3, [r7, #12]
 800303c:	2200      	movs	r2, #0
 800303e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8003042:	2303      	movs	r3, #3
 8003044:	e00f      	b.n	8003066 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	681a      	ldr	r2, [r3, #0]
 800304c:	68bb      	ldr	r3, [r7, #8]
 800304e:	4013      	ands	r3, r2
 8003050:	68ba      	ldr	r2, [r7, #8]
 8003052:	429a      	cmp	r2, r3
 8003054:	bf0c      	ite	eq
 8003056:	2301      	moveq	r3, #1
 8003058:	2300      	movne	r3, #0
 800305a:	b2db      	uxtb	r3, r3
 800305c:	461a      	mov	r2, r3
 800305e:	79fb      	ldrb	r3, [r7, #7]
 8003060:	429a      	cmp	r2, r3
 8003062:	d0c3      	beq.n	8002fec <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003064:	2300      	movs	r3, #0
}
 8003066:	4618      	mov	r0, r3
 8003068:	3710      	adds	r7, #16
 800306a:	46bd      	mov	sp, r7
 800306c:	bd80      	pop	{r7, pc}
	...

08003070 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003070:	b580      	push	{r7, lr}
 8003072:	b084      	sub	sp, #16
 8003074:	af00      	add	r7, sp, #0
 8003076:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	691b      	ldr	r3, [r3, #16]
 800307e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	68da      	ldr	r2, [r3, #12]
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	430a      	orrs	r2, r1
 800308c:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	689a      	ldr	r2, [r3, #8]
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	691b      	ldr	r3, [r3, #16]
 8003096:	431a      	orrs	r2, r3
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	695b      	ldr	r3, [r3, #20]
 800309c:	4313      	orrs	r3, r2
 800309e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	68db      	ldr	r3, [r3, #12]
 80030a6:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80030aa:	f023 030c 	bic.w	r3, r3, #12
 80030ae:	687a      	ldr	r2, [r7, #4]
 80030b0:	6812      	ldr	r2, [r2, #0]
 80030b2:	68b9      	ldr	r1, [r7, #8]
 80030b4:	430b      	orrs	r3, r1
 80030b6:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	695b      	ldr	r3, [r3, #20]
 80030be:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	699a      	ldr	r2, [r3, #24]
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	430a      	orrs	r2, r1
 80030cc:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	4a2c      	ldr	r2, [pc, #176]	; (8003184 <UART_SetConfig+0x114>)
 80030d4:	4293      	cmp	r3, r2
 80030d6:	d103      	bne.n	80030e0 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80030d8:	f7ff f902 	bl	80022e0 <HAL_RCC_GetPCLK2Freq>
 80030dc:	60f8      	str	r0, [r7, #12]
 80030de:	e002      	b.n	80030e6 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80030e0:	f7ff f8ea 	bl	80022b8 <HAL_RCC_GetPCLK1Freq>
 80030e4:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80030e6:	68fa      	ldr	r2, [r7, #12]
 80030e8:	4613      	mov	r3, r2
 80030ea:	009b      	lsls	r3, r3, #2
 80030ec:	4413      	add	r3, r2
 80030ee:	009a      	lsls	r2, r3, #2
 80030f0:	441a      	add	r2, r3
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	685b      	ldr	r3, [r3, #4]
 80030f6:	009b      	lsls	r3, r3, #2
 80030f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80030fc:	4a22      	ldr	r2, [pc, #136]	; (8003188 <UART_SetConfig+0x118>)
 80030fe:	fba2 2303 	umull	r2, r3, r2, r3
 8003102:	095b      	lsrs	r3, r3, #5
 8003104:	0119      	lsls	r1, r3, #4
 8003106:	68fa      	ldr	r2, [r7, #12]
 8003108:	4613      	mov	r3, r2
 800310a:	009b      	lsls	r3, r3, #2
 800310c:	4413      	add	r3, r2
 800310e:	009a      	lsls	r2, r3, #2
 8003110:	441a      	add	r2, r3
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	685b      	ldr	r3, [r3, #4]
 8003116:	009b      	lsls	r3, r3, #2
 8003118:	fbb2 f2f3 	udiv	r2, r2, r3
 800311c:	4b1a      	ldr	r3, [pc, #104]	; (8003188 <UART_SetConfig+0x118>)
 800311e:	fba3 0302 	umull	r0, r3, r3, r2
 8003122:	095b      	lsrs	r3, r3, #5
 8003124:	2064      	movs	r0, #100	; 0x64
 8003126:	fb00 f303 	mul.w	r3, r0, r3
 800312a:	1ad3      	subs	r3, r2, r3
 800312c:	011b      	lsls	r3, r3, #4
 800312e:	3332      	adds	r3, #50	; 0x32
 8003130:	4a15      	ldr	r2, [pc, #84]	; (8003188 <UART_SetConfig+0x118>)
 8003132:	fba2 2303 	umull	r2, r3, r2, r3
 8003136:	095b      	lsrs	r3, r3, #5
 8003138:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800313c:	4419      	add	r1, r3
 800313e:	68fa      	ldr	r2, [r7, #12]
 8003140:	4613      	mov	r3, r2
 8003142:	009b      	lsls	r3, r3, #2
 8003144:	4413      	add	r3, r2
 8003146:	009a      	lsls	r2, r3, #2
 8003148:	441a      	add	r2, r3
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	685b      	ldr	r3, [r3, #4]
 800314e:	009b      	lsls	r3, r3, #2
 8003150:	fbb2 f2f3 	udiv	r2, r2, r3
 8003154:	4b0c      	ldr	r3, [pc, #48]	; (8003188 <UART_SetConfig+0x118>)
 8003156:	fba3 0302 	umull	r0, r3, r3, r2
 800315a:	095b      	lsrs	r3, r3, #5
 800315c:	2064      	movs	r0, #100	; 0x64
 800315e:	fb00 f303 	mul.w	r3, r0, r3
 8003162:	1ad3      	subs	r3, r2, r3
 8003164:	011b      	lsls	r3, r3, #4
 8003166:	3332      	adds	r3, #50	; 0x32
 8003168:	4a07      	ldr	r2, [pc, #28]	; (8003188 <UART_SetConfig+0x118>)
 800316a:	fba2 2303 	umull	r2, r3, r2, r3
 800316e:	095b      	lsrs	r3, r3, #5
 8003170:	f003 020f 	and.w	r2, r3, #15
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	440a      	add	r2, r1
 800317a:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 800317c:	bf00      	nop
 800317e:	3710      	adds	r7, #16
 8003180:	46bd      	mov	sp, r7
 8003182:	bd80      	pop	{r7, pc}
 8003184:	40013800 	.word	0x40013800
 8003188:	51eb851f 	.word	0x51eb851f

0800318c <__errno>:
 800318c:	4b01      	ldr	r3, [pc, #4]	; (8003194 <__errno+0x8>)
 800318e:	6818      	ldr	r0, [r3, #0]
 8003190:	4770      	bx	lr
 8003192:	bf00      	nop
 8003194:	2000000c 	.word	0x2000000c

08003198 <__libc_init_array>:
 8003198:	b570      	push	{r4, r5, r6, lr}
 800319a:	2500      	movs	r5, #0
 800319c:	4e0c      	ldr	r6, [pc, #48]	; (80031d0 <__libc_init_array+0x38>)
 800319e:	4c0d      	ldr	r4, [pc, #52]	; (80031d4 <__libc_init_array+0x3c>)
 80031a0:	1ba4      	subs	r4, r4, r6
 80031a2:	10a4      	asrs	r4, r4, #2
 80031a4:	42a5      	cmp	r5, r4
 80031a6:	d109      	bne.n	80031bc <__libc_init_array+0x24>
 80031a8:	f000 fc4a 	bl	8003a40 <_init>
 80031ac:	2500      	movs	r5, #0
 80031ae:	4e0a      	ldr	r6, [pc, #40]	; (80031d8 <__libc_init_array+0x40>)
 80031b0:	4c0a      	ldr	r4, [pc, #40]	; (80031dc <__libc_init_array+0x44>)
 80031b2:	1ba4      	subs	r4, r4, r6
 80031b4:	10a4      	asrs	r4, r4, #2
 80031b6:	42a5      	cmp	r5, r4
 80031b8:	d105      	bne.n	80031c6 <__libc_init_array+0x2e>
 80031ba:	bd70      	pop	{r4, r5, r6, pc}
 80031bc:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80031c0:	4798      	blx	r3
 80031c2:	3501      	adds	r5, #1
 80031c4:	e7ee      	b.n	80031a4 <__libc_init_array+0xc>
 80031c6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80031ca:	4798      	blx	r3
 80031cc:	3501      	adds	r5, #1
 80031ce:	e7f2      	b.n	80031b6 <__libc_init_array+0x1e>
 80031d0:	08003c68 	.word	0x08003c68
 80031d4:	08003c68 	.word	0x08003c68
 80031d8:	08003c68 	.word	0x08003c68
 80031dc:	08003c6c 	.word	0x08003c6c

080031e0 <memcpy>:
 80031e0:	b510      	push	{r4, lr}
 80031e2:	1e43      	subs	r3, r0, #1
 80031e4:	440a      	add	r2, r1
 80031e6:	4291      	cmp	r1, r2
 80031e8:	d100      	bne.n	80031ec <memcpy+0xc>
 80031ea:	bd10      	pop	{r4, pc}
 80031ec:	f811 4b01 	ldrb.w	r4, [r1], #1
 80031f0:	f803 4f01 	strb.w	r4, [r3, #1]!
 80031f4:	e7f7      	b.n	80031e6 <memcpy+0x6>

080031f6 <memset>:
 80031f6:	4603      	mov	r3, r0
 80031f8:	4402      	add	r2, r0
 80031fa:	4293      	cmp	r3, r2
 80031fc:	d100      	bne.n	8003200 <memset+0xa>
 80031fe:	4770      	bx	lr
 8003200:	f803 1b01 	strb.w	r1, [r3], #1
 8003204:	e7f9      	b.n	80031fa <memset+0x4>
	...

08003208 <sniprintf>:
 8003208:	b40c      	push	{r2, r3}
 800320a:	b530      	push	{r4, r5, lr}
 800320c:	4b17      	ldr	r3, [pc, #92]	; (800326c <sniprintf+0x64>)
 800320e:	1e0c      	subs	r4, r1, #0
 8003210:	b09d      	sub	sp, #116	; 0x74
 8003212:	681d      	ldr	r5, [r3, #0]
 8003214:	da08      	bge.n	8003228 <sniprintf+0x20>
 8003216:	238b      	movs	r3, #139	; 0x8b
 8003218:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800321c:	602b      	str	r3, [r5, #0]
 800321e:	b01d      	add	sp, #116	; 0x74
 8003220:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8003224:	b002      	add	sp, #8
 8003226:	4770      	bx	lr
 8003228:	f44f 7302 	mov.w	r3, #520	; 0x208
 800322c:	f8ad 3014 	strh.w	r3, [sp, #20]
 8003230:	bf0c      	ite	eq
 8003232:	4623      	moveq	r3, r4
 8003234:	f104 33ff 	addne.w	r3, r4, #4294967295	; 0xffffffff
 8003238:	9304      	str	r3, [sp, #16]
 800323a:	9307      	str	r3, [sp, #28]
 800323c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003240:	9002      	str	r0, [sp, #8]
 8003242:	9006      	str	r0, [sp, #24]
 8003244:	f8ad 3016 	strh.w	r3, [sp, #22]
 8003248:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800324a:	ab21      	add	r3, sp, #132	; 0x84
 800324c:	a902      	add	r1, sp, #8
 800324e:	4628      	mov	r0, r5
 8003250:	9301      	str	r3, [sp, #4]
 8003252:	f000 f867 	bl	8003324 <_svfiprintf_r>
 8003256:	1c43      	adds	r3, r0, #1
 8003258:	bfbc      	itt	lt
 800325a:	238b      	movlt	r3, #139	; 0x8b
 800325c:	602b      	strlt	r3, [r5, #0]
 800325e:	2c00      	cmp	r4, #0
 8003260:	d0dd      	beq.n	800321e <sniprintf+0x16>
 8003262:	2200      	movs	r2, #0
 8003264:	9b02      	ldr	r3, [sp, #8]
 8003266:	701a      	strb	r2, [r3, #0]
 8003268:	e7d9      	b.n	800321e <sniprintf+0x16>
 800326a:	bf00      	nop
 800326c:	2000000c 	.word	0x2000000c

08003270 <__ssputs_r>:
 8003270:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003274:	688e      	ldr	r6, [r1, #8]
 8003276:	4682      	mov	sl, r0
 8003278:	429e      	cmp	r6, r3
 800327a:	460c      	mov	r4, r1
 800327c:	4690      	mov	r8, r2
 800327e:	4699      	mov	r9, r3
 8003280:	d837      	bhi.n	80032f2 <__ssputs_r+0x82>
 8003282:	898a      	ldrh	r2, [r1, #12]
 8003284:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8003288:	d031      	beq.n	80032ee <__ssputs_r+0x7e>
 800328a:	2302      	movs	r3, #2
 800328c:	6825      	ldr	r5, [r4, #0]
 800328e:	6909      	ldr	r1, [r1, #16]
 8003290:	1a6f      	subs	r7, r5, r1
 8003292:	6965      	ldr	r5, [r4, #20]
 8003294:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003298:	fb95 f5f3 	sdiv	r5, r5, r3
 800329c:	f109 0301 	add.w	r3, r9, #1
 80032a0:	443b      	add	r3, r7
 80032a2:	429d      	cmp	r5, r3
 80032a4:	bf38      	it	cc
 80032a6:	461d      	movcc	r5, r3
 80032a8:	0553      	lsls	r3, r2, #21
 80032aa:	d530      	bpl.n	800330e <__ssputs_r+0x9e>
 80032ac:	4629      	mov	r1, r5
 80032ae:	f000 fb2d 	bl	800390c <_malloc_r>
 80032b2:	4606      	mov	r6, r0
 80032b4:	b950      	cbnz	r0, 80032cc <__ssputs_r+0x5c>
 80032b6:	230c      	movs	r3, #12
 80032b8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80032bc:	f8ca 3000 	str.w	r3, [sl]
 80032c0:	89a3      	ldrh	r3, [r4, #12]
 80032c2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80032c6:	81a3      	strh	r3, [r4, #12]
 80032c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80032cc:	463a      	mov	r2, r7
 80032ce:	6921      	ldr	r1, [r4, #16]
 80032d0:	f7ff ff86 	bl	80031e0 <memcpy>
 80032d4:	89a3      	ldrh	r3, [r4, #12]
 80032d6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80032da:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80032de:	81a3      	strh	r3, [r4, #12]
 80032e0:	6126      	str	r6, [r4, #16]
 80032e2:	443e      	add	r6, r7
 80032e4:	6026      	str	r6, [r4, #0]
 80032e6:	464e      	mov	r6, r9
 80032e8:	6165      	str	r5, [r4, #20]
 80032ea:	1bed      	subs	r5, r5, r7
 80032ec:	60a5      	str	r5, [r4, #8]
 80032ee:	454e      	cmp	r6, r9
 80032f0:	d900      	bls.n	80032f4 <__ssputs_r+0x84>
 80032f2:	464e      	mov	r6, r9
 80032f4:	4632      	mov	r2, r6
 80032f6:	4641      	mov	r1, r8
 80032f8:	6820      	ldr	r0, [r4, #0]
 80032fa:	f000 faa1 	bl	8003840 <memmove>
 80032fe:	68a3      	ldr	r3, [r4, #8]
 8003300:	2000      	movs	r0, #0
 8003302:	1b9b      	subs	r3, r3, r6
 8003304:	60a3      	str	r3, [r4, #8]
 8003306:	6823      	ldr	r3, [r4, #0]
 8003308:	441e      	add	r6, r3
 800330a:	6026      	str	r6, [r4, #0]
 800330c:	e7dc      	b.n	80032c8 <__ssputs_r+0x58>
 800330e:	462a      	mov	r2, r5
 8003310:	f000 fb56 	bl	80039c0 <_realloc_r>
 8003314:	4606      	mov	r6, r0
 8003316:	2800      	cmp	r0, #0
 8003318:	d1e2      	bne.n	80032e0 <__ssputs_r+0x70>
 800331a:	6921      	ldr	r1, [r4, #16]
 800331c:	4650      	mov	r0, sl
 800331e:	f000 faa9 	bl	8003874 <_free_r>
 8003322:	e7c8      	b.n	80032b6 <__ssputs_r+0x46>

08003324 <_svfiprintf_r>:
 8003324:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003328:	461d      	mov	r5, r3
 800332a:	898b      	ldrh	r3, [r1, #12]
 800332c:	b09d      	sub	sp, #116	; 0x74
 800332e:	061f      	lsls	r7, r3, #24
 8003330:	4680      	mov	r8, r0
 8003332:	460c      	mov	r4, r1
 8003334:	4616      	mov	r6, r2
 8003336:	d50f      	bpl.n	8003358 <_svfiprintf_r+0x34>
 8003338:	690b      	ldr	r3, [r1, #16]
 800333a:	b96b      	cbnz	r3, 8003358 <_svfiprintf_r+0x34>
 800333c:	2140      	movs	r1, #64	; 0x40
 800333e:	f000 fae5 	bl	800390c <_malloc_r>
 8003342:	6020      	str	r0, [r4, #0]
 8003344:	6120      	str	r0, [r4, #16]
 8003346:	b928      	cbnz	r0, 8003354 <_svfiprintf_r+0x30>
 8003348:	230c      	movs	r3, #12
 800334a:	f8c8 3000 	str.w	r3, [r8]
 800334e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003352:	e0c8      	b.n	80034e6 <_svfiprintf_r+0x1c2>
 8003354:	2340      	movs	r3, #64	; 0x40
 8003356:	6163      	str	r3, [r4, #20]
 8003358:	2300      	movs	r3, #0
 800335a:	9309      	str	r3, [sp, #36]	; 0x24
 800335c:	2320      	movs	r3, #32
 800335e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003362:	2330      	movs	r3, #48	; 0x30
 8003364:	f04f 0b01 	mov.w	fp, #1
 8003368:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800336c:	9503      	str	r5, [sp, #12]
 800336e:	4637      	mov	r7, r6
 8003370:	463d      	mov	r5, r7
 8003372:	f815 3b01 	ldrb.w	r3, [r5], #1
 8003376:	b10b      	cbz	r3, 800337c <_svfiprintf_r+0x58>
 8003378:	2b25      	cmp	r3, #37	; 0x25
 800337a:	d13e      	bne.n	80033fa <_svfiprintf_r+0xd6>
 800337c:	ebb7 0a06 	subs.w	sl, r7, r6
 8003380:	d00b      	beq.n	800339a <_svfiprintf_r+0x76>
 8003382:	4653      	mov	r3, sl
 8003384:	4632      	mov	r2, r6
 8003386:	4621      	mov	r1, r4
 8003388:	4640      	mov	r0, r8
 800338a:	f7ff ff71 	bl	8003270 <__ssputs_r>
 800338e:	3001      	adds	r0, #1
 8003390:	f000 80a4 	beq.w	80034dc <_svfiprintf_r+0x1b8>
 8003394:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003396:	4453      	add	r3, sl
 8003398:	9309      	str	r3, [sp, #36]	; 0x24
 800339a:	783b      	ldrb	r3, [r7, #0]
 800339c:	2b00      	cmp	r3, #0
 800339e:	f000 809d 	beq.w	80034dc <_svfiprintf_r+0x1b8>
 80033a2:	2300      	movs	r3, #0
 80033a4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80033a8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80033ac:	9304      	str	r3, [sp, #16]
 80033ae:	9307      	str	r3, [sp, #28]
 80033b0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80033b4:	931a      	str	r3, [sp, #104]	; 0x68
 80033b6:	462f      	mov	r7, r5
 80033b8:	2205      	movs	r2, #5
 80033ba:	f817 1b01 	ldrb.w	r1, [r7], #1
 80033be:	4850      	ldr	r0, [pc, #320]	; (8003500 <_svfiprintf_r+0x1dc>)
 80033c0:	f000 fa30 	bl	8003824 <memchr>
 80033c4:	9b04      	ldr	r3, [sp, #16]
 80033c6:	b9d0      	cbnz	r0, 80033fe <_svfiprintf_r+0xda>
 80033c8:	06d9      	lsls	r1, r3, #27
 80033ca:	bf44      	itt	mi
 80033cc:	2220      	movmi	r2, #32
 80033ce:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80033d2:	071a      	lsls	r2, r3, #28
 80033d4:	bf44      	itt	mi
 80033d6:	222b      	movmi	r2, #43	; 0x2b
 80033d8:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80033dc:	782a      	ldrb	r2, [r5, #0]
 80033de:	2a2a      	cmp	r2, #42	; 0x2a
 80033e0:	d015      	beq.n	800340e <_svfiprintf_r+0xea>
 80033e2:	462f      	mov	r7, r5
 80033e4:	2000      	movs	r0, #0
 80033e6:	250a      	movs	r5, #10
 80033e8:	9a07      	ldr	r2, [sp, #28]
 80033ea:	4639      	mov	r1, r7
 80033ec:	f811 3b01 	ldrb.w	r3, [r1], #1
 80033f0:	3b30      	subs	r3, #48	; 0x30
 80033f2:	2b09      	cmp	r3, #9
 80033f4:	d94d      	bls.n	8003492 <_svfiprintf_r+0x16e>
 80033f6:	b1b8      	cbz	r0, 8003428 <_svfiprintf_r+0x104>
 80033f8:	e00f      	b.n	800341a <_svfiprintf_r+0xf6>
 80033fa:	462f      	mov	r7, r5
 80033fc:	e7b8      	b.n	8003370 <_svfiprintf_r+0x4c>
 80033fe:	4a40      	ldr	r2, [pc, #256]	; (8003500 <_svfiprintf_r+0x1dc>)
 8003400:	463d      	mov	r5, r7
 8003402:	1a80      	subs	r0, r0, r2
 8003404:	fa0b f000 	lsl.w	r0, fp, r0
 8003408:	4318      	orrs	r0, r3
 800340a:	9004      	str	r0, [sp, #16]
 800340c:	e7d3      	b.n	80033b6 <_svfiprintf_r+0x92>
 800340e:	9a03      	ldr	r2, [sp, #12]
 8003410:	1d11      	adds	r1, r2, #4
 8003412:	6812      	ldr	r2, [r2, #0]
 8003414:	9103      	str	r1, [sp, #12]
 8003416:	2a00      	cmp	r2, #0
 8003418:	db01      	blt.n	800341e <_svfiprintf_r+0xfa>
 800341a:	9207      	str	r2, [sp, #28]
 800341c:	e004      	b.n	8003428 <_svfiprintf_r+0x104>
 800341e:	4252      	negs	r2, r2
 8003420:	f043 0302 	orr.w	r3, r3, #2
 8003424:	9207      	str	r2, [sp, #28]
 8003426:	9304      	str	r3, [sp, #16]
 8003428:	783b      	ldrb	r3, [r7, #0]
 800342a:	2b2e      	cmp	r3, #46	; 0x2e
 800342c:	d10c      	bne.n	8003448 <_svfiprintf_r+0x124>
 800342e:	787b      	ldrb	r3, [r7, #1]
 8003430:	2b2a      	cmp	r3, #42	; 0x2a
 8003432:	d133      	bne.n	800349c <_svfiprintf_r+0x178>
 8003434:	9b03      	ldr	r3, [sp, #12]
 8003436:	3702      	adds	r7, #2
 8003438:	1d1a      	adds	r2, r3, #4
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	9203      	str	r2, [sp, #12]
 800343e:	2b00      	cmp	r3, #0
 8003440:	bfb8      	it	lt
 8003442:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8003446:	9305      	str	r3, [sp, #20]
 8003448:	4d2e      	ldr	r5, [pc, #184]	; (8003504 <_svfiprintf_r+0x1e0>)
 800344a:	2203      	movs	r2, #3
 800344c:	7839      	ldrb	r1, [r7, #0]
 800344e:	4628      	mov	r0, r5
 8003450:	f000 f9e8 	bl	8003824 <memchr>
 8003454:	b138      	cbz	r0, 8003466 <_svfiprintf_r+0x142>
 8003456:	2340      	movs	r3, #64	; 0x40
 8003458:	1b40      	subs	r0, r0, r5
 800345a:	fa03 f000 	lsl.w	r0, r3, r0
 800345e:	9b04      	ldr	r3, [sp, #16]
 8003460:	3701      	adds	r7, #1
 8003462:	4303      	orrs	r3, r0
 8003464:	9304      	str	r3, [sp, #16]
 8003466:	7839      	ldrb	r1, [r7, #0]
 8003468:	2206      	movs	r2, #6
 800346a:	4827      	ldr	r0, [pc, #156]	; (8003508 <_svfiprintf_r+0x1e4>)
 800346c:	1c7e      	adds	r6, r7, #1
 800346e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003472:	f000 f9d7 	bl	8003824 <memchr>
 8003476:	2800      	cmp	r0, #0
 8003478:	d038      	beq.n	80034ec <_svfiprintf_r+0x1c8>
 800347a:	4b24      	ldr	r3, [pc, #144]	; (800350c <_svfiprintf_r+0x1e8>)
 800347c:	bb13      	cbnz	r3, 80034c4 <_svfiprintf_r+0x1a0>
 800347e:	9b03      	ldr	r3, [sp, #12]
 8003480:	3307      	adds	r3, #7
 8003482:	f023 0307 	bic.w	r3, r3, #7
 8003486:	3308      	adds	r3, #8
 8003488:	9303      	str	r3, [sp, #12]
 800348a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800348c:	444b      	add	r3, r9
 800348e:	9309      	str	r3, [sp, #36]	; 0x24
 8003490:	e76d      	b.n	800336e <_svfiprintf_r+0x4a>
 8003492:	fb05 3202 	mla	r2, r5, r2, r3
 8003496:	2001      	movs	r0, #1
 8003498:	460f      	mov	r7, r1
 800349a:	e7a6      	b.n	80033ea <_svfiprintf_r+0xc6>
 800349c:	2300      	movs	r3, #0
 800349e:	250a      	movs	r5, #10
 80034a0:	4619      	mov	r1, r3
 80034a2:	3701      	adds	r7, #1
 80034a4:	9305      	str	r3, [sp, #20]
 80034a6:	4638      	mov	r0, r7
 80034a8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80034ac:	3a30      	subs	r2, #48	; 0x30
 80034ae:	2a09      	cmp	r2, #9
 80034b0:	d903      	bls.n	80034ba <_svfiprintf_r+0x196>
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	d0c8      	beq.n	8003448 <_svfiprintf_r+0x124>
 80034b6:	9105      	str	r1, [sp, #20]
 80034b8:	e7c6      	b.n	8003448 <_svfiprintf_r+0x124>
 80034ba:	fb05 2101 	mla	r1, r5, r1, r2
 80034be:	2301      	movs	r3, #1
 80034c0:	4607      	mov	r7, r0
 80034c2:	e7f0      	b.n	80034a6 <_svfiprintf_r+0x182>
 80034c4:	ab03      	add	r3, sp, #12
 80034c6:	9300      	str	r3, [sp, #0]
 80034c8:	4622      	mov	r2, r4
 80034ca:	4b11      	ldr	r3, [pc, #68]	; (8003510 <_svfiprintf_r+0x1ec>)
 80034cc:	a904      	add	r1, sp, #16
 80034ce:	4640      	mov	r0, r8
 80034d0:	f3af 8000 	nop.w
 80034d4:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 80034d8:	4681      	mov	r9, r0
 80034da:	d1d6      	bne.n	800348a <_svfiprintf_r+0x166>
 80034dc:	89a3      	ldrh	r3, [r4, #12]
 80034de:	065b      	lsls	r3, r3, #25
 80034e0:	f53f af35 	bmi.w	800334e <_svfiprintf_r+0x2a>
 80034e4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80034e6:	b01d      	add	sp, #116	; 0x74
 80034e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80034ec:	ab03      	add	r3, sp, #12
 80034ee:	9300      	str	r3, [sp, #0]
 80034f0:	4622      	mov	r2, r4
 80034f2:	4b07      	ldr	r3, [pc, #28]	; (8003510 <_svfiprintf_r+0x1ec>)
 80034f4:	a904      	add	r1, sp, #16
 80034f6:	4640      	mov	r0, r8
 80034f8:	f000 f882 	bl	8003600 <_printf_i>
 80034fc:	e7ea      	b.n	80034d4 <_svfiprintf_r+0x1b0>
 80034fe:	bf00      	nop
 8003500:	08003c34 	.word	0x08003c34
 8003504:	08003c3a 	.word	0x08003c3a
 8003508:	08003c3e 	.word	0x08003c3e
 800350c:	00000000 	.word	0x00000000
 8003510:	08003271 	.word	0x08003271

08003514 <_printf_common>:
 8003514:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003518:	4691      	mov	r9, r2
 800351a:	461f      	mov	r7, r3
 800351c:	688a      	ldr	r2, [r1, #8]
 800351e:	690b      	ldr	r3, [r1, #16]
 8003520:	4606      	mov	r6, r0
 8003522:	4293      	cmp	r3, r2
 8003524:	bfb8      	it	lt
 8003526:	4613      	movlt	r3, r2
 8003528:	f8c9 3000 	str.w	r3, [r9]
 800352c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003530:	460c      	mov	r4, r1
 8003532:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003536:	b112      	cbz	r2, 800353e <_printf_common+0x2a>
 8003538:	3301      	adds	r3, #1
 800353a:	f8c9 3000 	str.w	r3, [r9]
 800353e:	6823      	ldr	r3, [r4, #0]
 8003540:	0699      	lsls	r1, r3, #26
 8003542:	bf42      	ittt	mi
 8003544:	f8d9 3000 	ldrmi.w	r3, [r9]
 8003548:	3302      	addmi	r3, #2
 800354a:	f8c9 3000 	strmi.w	r3, [r9]
 800354e:	6825      	ldr	r5, [r4, #0]
 8003550:	f015 0506 	ands.w	r5, r5, #6
 8003554:	d107      	bne.n	8003566 <_printf_common+0x52>
 8003556:	f104 0a19 	add.w	sl, r4, #25
 800355a:	68e3      	ldr	r3, [r4, #12]
 800355c:	f8d9 2000 	ldr.w	r2, [r9]
 8003560:	1a9b      	subs	r3, r3, r2
 8003562:	42ab      	cmp	r3, r5
 8003564:	dc29      	bgt.n	80035ba <_printf_common+0xa6>
 8003566:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800356a:	6822      	ldr	r2, [r4, #0]
 800356c:	3300      	adds	r3, #0
 800356e:	bf18      	it	ne
 8003570:	2301      	movne	r3, #1
 8003572:	0692      	lsls	r2, r2, #26
 8003574:	d42e      	bmi.n	80035d4 <_printf_common+0xc0>
 8003576:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800357a:	4639      	mov	r1, r7
 800357c:	4630      	mov	r0, r6
 800357e:	47c0      	blx	r8
 8003580:	3001      	adds	r0, #1
 8003582:	d021      	beq.n	80035c8 <_printf_common+0xb4>
 8003584:	6823      	ldr	r3, [r4, #0]
 8003586:	68e5      	ldr	r5, [r4, #12]
 8003588:	f003 0306 	and.w	r3, r3, #6
 800358c:	2b04      	cmp	r3, #4
 800358e:	bf18      	it	ne
 8003590:	2500      	movne	r5, #0
 8003592:	f8d9 2000 	ldr.w	r2, [r9]
 8003596:	f04f 0900 	mov.w	r9, #0
 800359a:	bf08      	it	eq
 800359c:	1aad      	subeq	r5, r5, r2
 800359e:	68a3      	ldr	r3, [r4, #8]
 80035a0:	6922      	ldr	r2, [r4, #16]
 80035a2:	bf08      	it	eq
 80035a4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80035a8:	4293      	cmp	r3, r2
 80035aa:	bfc4      	itt	gt
 80035ac:	1a9b      	subgt	r3, r3, r2
 80035ae:	18ed      	addgt	r5, r5, r3
 80035b0:	341a      	adds	r4, #26
 80035b2:	454d      	cmp	r5, r9
 80035b4:	d11a      	bne.n	80035ec <_printf_common+0xd8>
 80035b6:	2000      	movs	r0, #0
 80035b8:	e008      	b.n	80035cc <_printf_common+0xb8>
 80035ba:	2301      	movs	r3, #1
 80035bc:	4652      	mov	r2, sl
 80035be:	4639      	mov	r1, r7
 80035c0:	4630      	mov	r0, r6
 80035c2:	47c0      	blx	r8
 80035c4:	3001      	adds	r0, #1
 80035c6:	d103      	bne.n	80035d0 <_printf_common+0xbc>
 80035c8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80035cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80035d0:	3501      	adds	r5, #1
 80035d2:	e7c2      	b.n	800355a <_printf_common+0x46>
 80035d4:	2030      	movs	r0, #48	; 0x30
 80035d6:	18e1      	adds	r1, r4, r3
 80035d8:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80035dc:	1c5a      	adds	r2, r3, #1
 80035de:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80035e2:	4422      	add	r2, r4
 80035e4:	3302      	adds	r3, #2
 80035e6:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80035ea:	e7c4      	b.n	8003576 <_printf_common+0x62>
 80035ec:	2301      	movs	r3, #1
 80035ee:	4622      	mov	r2, r4
 80035f0:	4639      	mov	r1, r7
 80035f2:	4630      	mov	r0, r6
 80035f4:	47c0      	blx	r8
 80035f6:	3001      	adds	r0, #1
 80035f8:	d0e6      	beq.n	80035c8 <_printf_common+0xb4>
 80035fa:	f109 0901 	add.w	r9, r9, #1
 80035fe:	e7d8      	b.n	80035b2 <_printf_common+0x9e>

08003600 <_printf_i>:
 8003600:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8003604:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8003608:	460c      	mov	r4, r1
 800360a:	7e09      	ldrb	r1, [r1, #24]
 800360c:	b085      	sub	sp, #20
 800360e:	296e      	cmp	r1, #110	; 0x6e
 8003610:	4617      	mov	r7, r2
 8003612:	4606      	mov	r6, r0
 8003614:	4698      	mov	r8, r3
 8003616:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8003618:	f000 80b3 	beq.w	8003782 <_printf_i+0x182>
 800361c:	d822      	bhi.n	8003664 <_printf_i+0x64>
 800361e:	2963      	cmp	r1, #99	; 0x63
 8003620:	d036      	beq.n	8003690 <_printf_i+0x90>
 8003622:	d80a      	bhi.n	800363a <_printf_i+0x3a>
 8003624:	2900      	cmp	r1, #0
 8003626:	f000 80b9 	beq.w	800379c <_printf_i+0x19c>
 800362a:	2958      	cmp	r1, #88	; 0x58
 800362c:	f000 8083 	beq.w	8003736 <_printf_i+0x136>
 8003630:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003634:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8003638:	e032      	b.n	80036a0 <_printf_i+0xa0>
 800363a:	2964      	cmp	r1, #100	; 0x64
 800363c:	d001      	beq.n	8003642 <_printf_i+0x42>
 800363e:	2969      	cmp	r1, #105	; 0x69
 8003640:	d1f6      	bne.n	8003630 <_printf_i+0x30>
 8003642:	6820      	ldr	r0, [r4, #0]
 8003644:	6813      	ldr	r3, [r2, #0]
 8003646:	0605      	lsls	r5, r0, #24
 8003648:	f103 0104 	add.w	r1, r3, #4
 800364c:	d52a      	bpl.n	80036a4 <_printf_i+0xa4>
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	6011      	str	r1, [r2, #0]
 8003652:	2b00      	cmp	r3, #0
 8003654:	da03      	bge.n	800365e <_printf_i+0x5e>
 8003656:	222d      	movs	r2, #45	; 0x2d
 8003658:	425b      	negs	r3, r3
 800365a:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800365e:	486f      	ldr	r0, [pc, #444]	; (800381c <_printf_i+0x21c>)
 8003660:	220a      	movs	r2, #10
 8003662:	e039      	b.n	80036d8 <_printf_i+0xd8>
 8003664:	2973      	cmp	r1, #115	; 0x73
 8003666:	f000 809d 	beq.w	80037a4 <_printf_i+0x1a4>
 800366a:	d808      	bhi.n	800367e <_printf_i+0x7e>
 800366c:	296f      	cmp	r1, #111	; 0x6f
 800366e:	d020      	beq.n	80036b2 <_printf_i+0xb2>
 8003670:	2970      	cmp	r1, #112	; 0x70
 8003672:	d1dd      	bne.n	8003630 <_printf_i+0x30>
 8003674:	6823      	ldr	r3, [r4, #0]
 8003676:	f043 0320 	orr.w	r3, r3, #32
 800367a:	6023      	str	r3, [r4, #0]
 800367c:	e003      	b.n	8003686 <_printf_i+0x86>
 800367e:	2975      	cmp	r1, #117	; 0x75
 8003680:	d017      	beq.n	80036b2 <_printf_i+0xb2>
 8003682:	2978      	cmp	r1, #120	; 0x78
 8003684:	d1d4      	bne.n	8003630 <_printf_i+0x30>
 8003686:	2378      	movs	r3, #120	; 0x78
 8003688:	4865      	ldr	r0, [pc, #404]	; (8003820 <_printf_i+0x220>)
 800368a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800368e:	e055      	b.n	800373c <_printf_i+0x13c>
 8003690:	6813      	ldr	r3, [r2, #0]
 8003692:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003696:	1d19      	adds	r1, r3, #4
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	6011      	str	r1, [r2, #0]
 800369c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80036a0:	2301      	movs	r3, #1
 80036a2:	e08c      	b.n	80037be <_printf_i+0x1be>
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	f010 0f40 	tst.w	r0, #64	; 0x40
 80036aa:	6011      	str	r1, [r2, #0]
 80036ac:	bf18      	it	ne
 80036ae:	b21b      	sxthne	r3, r3
 80036b0:	e7cf      	b.n	8003652 <_printf_i+0x52>
 80036b2:	6813      	ldr	r3, [r2, #0]
 80036b4:	6825      	ldr	r5, [r4, #0]
 80036b6:	1d18      	adds	r0, r3, #4
 80036b8:	6010      	str	r0, [r2, #0]
 80036ba:	0628      	lsls	r0, r5, #24
 80036bc:	d501      	bpl.n	80036c2 <_printf_i+0xc2>
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	e002      	b.n	80036c8 <_printf_i+0xc8>
 80036c2:	0668      	lsls	r0, r5, #25
 80036c4:	d5fb      	bpl.n	80036be <_printf_i+0xbe>
 80036c6:	881b      	ldrh	r3, [r3, #0]
 80036c8:	296f      	cmp	r1, #111	; 0x6f
 80036ca:	bf14      	ite	ne
 80036cc:	220a      	movne	r2, #10
 80036ce:	2208      	moveq	r2, #8
 80036d0:	4852      	ldr	r0, [pc, #328]	; (800381c <_printf_i+0x21c>)
 80036d2:	2100      	movs	r1, #0
 80036d4:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80036d8:	6865      	ldr	r5, [r4, #4]
 80036da:	2d00      	cmp	r5, #0
 80036dc:	60a5      	str	r5, [r4, #8]
 80036de:	f2c0 8095 	blt.w	800380c <_printf_i+0x20c>
 80036e2:	6821      	ldr	r1, [r4, #0]
 80036e4:	f021 0104 	bic.w	r1, r1, #4
 80036e8:	6021      	str	r1, [r4, #0]
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	d13d      	bne.n	800376a <_printf_i+0x16a>
 80036ee:	2d00      	cmp	r5, #0
 80036f0:	f040 808e 	bne.w	8003810 <_printf_i+0x210>
 80036f4:	4665      	mov	r5, ip
 80036f6:	2a08      	cmp	r2, #8
 80036f8:	d10b      	bne.n	8003712 <_printf_i+0x112>
 80036fa:	6823      	ldr	r3, [r4, #0]
 80036fc:	07db      	lsls	r3, r3, #31
 80036fe:	d508      	bpl.n	8003712 <_printf_i+0x112>
 8003700:	6923      	ldr	r3, [r4, #16]
 8003702:	6862      	ldr	r2, [r4, #4]
 8003704:	429a      	cmp	r2, r3
 8003706:	bfde      	ittt	le
 8003708:	2330      	movle	r3, #48	; 0x30
 800370a:	f805 3c01 	strble.w	r3, [r5, #-1]
 800370e:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8003712:	ebac 0305 	sub.w	r3, ip, r5
 8003716:	6123      	str	r3, [r4, #16]
 8003718:	f8cd 8000 	str.w	r8, [sp]
 800371c:	463b      	mov	r3, r7
 800371e:	aa03      	add	r2, sp, #12
 8003720:	4621      	mov	r1, r4
 8003722:	4630      	mov	r0, r6
 8003724:	f7ff fef6 	bl	8003514 <_printf_common>
 8003728:	3001      	adds	r0, #1
 800372a:	d14d      	bne.n	80037c8 <_printf_i+0x1c8>
 800372c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003730:	b005      	add	sp, #20
 8003732:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8003736:	4839      	ldr	r0, [pc, #228]	; (800381c <_printf_i+0x21c>)
 8003738:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 800373c:	6813      	ldr	r3, [r2, #0]
 800373e:	6821      	ldr	r1, [r4, #0]
 8003740:	1d1d      	adds	r5, r3, #4
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	6015      	str	r5, [r2, #0]
 8003746:	060a      	lsls	r2, r1, #24
 8003748:	d50b      	bpl.n	8003762 <_printf_i+0x162>
 800374a:	07ca      	lsls	r2, r1, #31
 800374c:	bf44      	itt	mi
 800374e:	f041 0120 	orrmi.w	r1, r1, #32
 8003752:	6021      	strmi	r1, [r4, #0]
 8003754:	b91b      	cbnz	r3, 800375e <_printf_i+0x15e>
 8003756:	6822      	ldr	r2, [r4, #0]
 8003758:	f022 0220 	bic.w	r2, r2, #32
 800375c:	6022      	str	r2, [r4, #0]
 800375e:	2210      	movs	r2, #16
 8003760:	e7b7      	b.n	80036d2 <_printf_i+0xd2>
 8003762:	064d      	lsls	r5, r1, #25
 8003764:	bf48      	it	mi
 8003766:	b29b      	uxthmi	r3, r3
 8003768:	e7ef      	b.n	800374a <_printf_i+0x14a>
 800376a:	4665      	mov	r5, ip
 800376c:	fbb3 f1f2 	udiv	r1, r3, r2
 8003770:	fb02 3311 	mls	r3, r2, r1, r3
 8003774:	5cc3      	ldrb	r3, [r0, r3]
 8003776:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800377a:	460b      	mov	r3, r1
 800377c:	2900      	cmp	r1, #0
 800377e:	d1f5      	bne.n	800376c <_printf_i+0x16c>
 8003780:	e7b9      	b.n	80036f6 <_printf_i+0xf6>
 8003782:	6813      	ldr	r3, [r2, #0]
 8003784:	6825      	ldr	r5, [r4, #0]
 8003786:	1d18      	adds	r0, r3, #4
 8003788:	6961      	ldr	r1, [r4, #20]
 800378a:	6010      	str	r0, [r2, #0]
 800378c:	0628      	lsls	r0, r5, #24
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	d501      	bpl.n	8003796 <_printf_i+0x196>
 8003792:	6019      	str	r1, [r3, #0]
 8003794:	e002      	b.n	800379c <_printf_i+0x19c>
 8003796:	066a      	lsls	r2, r5, #25
 8003798:	d5fb      	bpl.n	8003792 <_printf_i+0x192>
 800379a:	8019      	strh	r1, [r3, #0]
 800379c:	2300      	movs	r3, #0
 800379e:	4665      	mov	r5, ip
 80037a0:	6123      	str	r3, [r4, #16]
 80037a2:	e7b9      	b.n	8003718 <_printf_i+0x118>
 80037a4:	6813      	ldr	r3, [r2, #0]
 80037a6:	1d19      	adds	r1, r3, #4
 80037a8:	6011      	str	r1, [r2, #0]
 80037aa:	681d      	ldr	r5, [r3, #0]
 80037ac:	6862      	ldr	r2, [r4, #4]
 80037ae:	2100      	movs	r1, #0
 80037b0:	4628      	mov	r0, r5
 80037b2:	f000 f837 	bl	8003824 <memchr>
 80037b6:	b108      	cbz	r0, 80037bc <_printf_i+0x1bc>
 80037b8:	1b40      	subs	r0, r0, r5
 80037ba:	6060      	str	r0, [r4, #4]
 80037bc:	6863      	ldr	r3, [r4, #4]
 80037be:	6123      	str	r3, [r4, #16]
 80037c0:	2300      	movs	r3, #0
 80037c2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80037c6:	e7a7      	b.n	8003718 <_printf_i+0x118>
 80037c8:	6923      	ldr	r3, [r4, #16]
 80037ca:	462a      	mov	r2, r5
 80037cc:	4639      	mov	r1, r7
 80037ce:	4630      	mov	r0, r6
 80037d0:	47c0      	blx	r8
 80037d2:	3001      	adds	r0, #1
 80037d4:	d0aa      	beq.n	800372c <_printf_i+0x12c>
 80037d6:	6823      	ldr	r3, [r4, #0]
 80037d8:	079b      	lsls	r3, r3, #30
 80037da:	d413      	bmi.n	8003804 <_printf_i+0x204>
 80037dc:	68e0      	ldr	r0, [r4, #12]
 80037de:	9b03      	ldr	r3, [sp, #12]
 80037e0:	4298      	cmp	r0, r3
 80037e2:	bfb8      	it	lt
 80037e4:	4618      	movlt	r0, r3
 80037e6:	e7a3      	b.n	8003730 <_printf_i+0x130>
 80037e8:	2301      	movs	r3, #1
 80037ea:	464a      	mov	r2, r9
 80037ec:	4639      	mov	r1, r7
 80037ee:	4630      	mov	r0, r6
 80037f0:	47c0      	blx	r8
 80037f2:	3001      	adds	r0, #1
 80037f4:	d09a      	beq.n	800372c <_printf_i+0x12c>
 80037f6:	3501      	adds	r5, #1
 80037f8:	68e3      	ldr	r3, [r4, #12]
 80037fa:	9a03      	ldr	r2, [sp, #12]
 80037fc:	1a9b      	subs	r3, r3, r2
 80037fe:	42ab      	cmp	r3, r5
 8003800:	dcf2      	bgt.n	80037e8 <_printf_i+0x1e8>
 8003802:	e7eb      	b.n	80037dc <_printf_i+0x1dc>
 8003804:	2500      	movs	r5, #0
 8003806:	f104 0919 	add.w	r9, r4, #25
 800380a:	e7f5      	b.n	80037f8 <_printf_i+0x1f8>
 800380c:	2b00      	cmp	r3, #0
 800380e:	d1ac      	bne.n	800376a <_printf_i+0x16a>
 8003810:	7803      	ldrb	r3, [r0, #0]
 8003812:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003816:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800381a:	e76c      	b.n	80036f6 <_printf_i+0xf6>
 800381c:	08003c45 	.word	0x08003c45
 8003820:	08003c56 	.word	0x08003c56

08003824 <memchr>:
 8003824:	b510      	push	{r4, lr}
 8003826:	b2c9      	uxtb	r1, r1
 8003828:	4402      	add	r2, r0
 800382a:	4290      	cmp	r0, r2
 800382c:	4603      	mov	r3, r0
 800382e:	d101      	bne.n	8003834 <memchr+0x10>
 8003830:	2300      	movs	r3, #0
 8003832:	e003      	b.n	800383c <memchr+0x18>
 8003834:	781c      	ldrb	r4, [r3, #0]
 8003836:	3001      	adds	r0, #1
 8003838:	428c      	cmp	r4, r1
 800383a:	d1f6      	bne.n	800382a <memchr+0x6>
 800383c:	4618      	mov	r0, r3
 800383e:	bd10      	pop	{r4, pc}

08003840 <memmove>:
 8003840:	4288      	cmp	r0, r1
 8003842:	b510      	push	{r4, lr}
 8003844:	eb01 0302 	add.w	r3, r1, r2
 8003848:	d807      	bhi.n	800385a <memmove+0x1a>
 800384a:	1e42      	subs	r2, r0, #1
 800384c:	4299      	cmp	r1, r3
 800384e:	d00a      	beq.n	8003866 <memmove+0x26>
 8003850:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003854:	f802 4f01 	strb.w	r4, [r2, #1]!
 8003858:	e7f8      	b.n	800384c <memmove+0xc>
 800385a:	4283      	cmp	r3, r0
 800385c:	d9f5      	bls.n	800384a <memmove+0xa>
 800385e:	1881      	adds	r1, r0, r2
 8003860:	1ad2      	subs	r2, r2, r3
 8003862:	42d3      	cmn	r3, r2
 8003864:	d100      	bne.n	8003868 <memmove+0x28>
 8003866:	bd10      	pop	{r4, pc}
 8003868:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800386c:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8003870:	e7f7      	b.n	8003862 <memmove+0x22>
	...

08003874 <_free_r>:
 8003874:	b538      	push	{r3, r4, r5, lr}
 8003876:	4605      	mov	r5, r0
 8003878:	2900      	cmp	r1, #0
 800387a:	d043      	beq.n	8003904 <_free_r+0x90>
 800387c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003880:	1f0c      	subs	r4, r1, #4
 8003882:	2b00      	cmp	r3, #0
 8003884:	bfb8      	it	lt
 8003886:	18e4      	addlt	r4, r4, r3
 8003888:	f000 f8d0 	bl	8003a2c <__malloc_lock>
 800388c:	4a1e      	ldr	r2, [pc, #120]	; (8003908 <_free_r+0x94>)
 800388e:	6813      	ldr	r3, [r2, #0]
 8003890:	4610      	mov	r0, r2
 8003892:	b933      	cbnz	r3, 80038a2 <_free_r+0x2e>
 8003894:	6063      	str	r3, [r4, #4]
 8003896:	6014      	str	r4, [r2, #0]
 8003898:	4628      	mov	r0, r5
 800389a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800389e:	f000 b8c6 	b.w	8003a2e <__malloc_unlock>
 80038a2:	42a3      	cmp	r3, r4
 80038a4:	d90b      	bls.n	80038be <_free_r+0x4a>
 80038a6:	6821      	ldr	r1, [r4, #0]
 80038a8:	1862      	adds	r2, r4, r1
 80038aa:	4293      	cmp	r3, r2
 80038ac:	bf01      	itttt	eq
 80038ae:	681a      	ldreq	r2, [r3, #0]
 80038b0:	685b      	ldreq	r3, [r3, #4]
 80038b2:	1852      	addeq	r2, r2, r1
 80038b4:	6022      	streq	r2, [r4, #0]
 80038b6:	6063      	str	r3, [r4, #4]
 80038b8:	6004      	str	r4, [r0, #0]
 80038ba:	e7ed      	b.n	8003898 <_free_r+0x24>
 80038bc:	4613      	mov	r3, r2
 80038be:	685a      	ldr	r2, [r3, #4]
 80038c0:	b10a      	cbz	r2, 80038c6 <_free_r+0x52>
 80038c2:	42a2      	cmp	r2, r4
 80038c4:	d9fa      	bls.n	80038bc <_free_r+0x48>
 80038c6:	6819      	ldr	r1, [r3, #0]
 80038c8:	1858      	adds	r0, r3, r1
 80038ca:	42a0      	cmp	r0, r4
 80038cc:	d10b      	bne.n	80038e6 <_free_r+0x72>
 80038ce:	6820      	ldr	r0, [r4, #0]
 80038d0:	4401      	add	r1, r0
 80038d2:	1858      	adds	r0, r3, r1
 80038d4:	4282      	cmp	r2, r0
 80038d6:	6019      	str	r1, [r3, #0]
 80038d8:	d1de      	bne.n	8003898 <_free_r+0x24>
 80038da:	6810      	ldr	r0, [r2, #0]
 80038dc:	6852      	ldr	r2, [r2, #4]
 80038de:	4401      	add	r1, r0
 80038e0:	6019      	str	r1, [r3, #0]
 80038e2:	605a      	str	r2, [r3, #4]
 80038e4:	e7d8      	b.n	8003898 <_free_r+0x24>
 80038e6:	d902      	bls.n	80038ee <_free_r+0x7a>
 80038e8:	230c      	movs	r3, #12
 80038ea:	602b      	str	r3, [r5, #0]
 80038ec:	e7d4      	b.n	8003898 <_free_r+0x24>
 80038ee:	6820      	ldr	r0, [r4, #0]
 80038f0:	1821      	adds	r1, r4, r0
 80038f2:	428a      	cmp	r2, r1
 80038f4:	bf01      	itttt	eq
 80038f6:	6811      	ldreq	r1, [r2, #0]
 80038f8:	6852      	ldreq	r2, [r2, #4]
 80038fa:	1809      	addeq	r1, r1, r0
 80038fc:	6021      	streq	r1, [r4, #0]
 80038fe:	6062      	str	r2, [r4, #4]
 8003900:	605c      	str	r4, [r3, #4]
 8003902:	e7c9      	b.n	8003898 <_free_r+0x24>
 8003904:	bd38      	pop	{r3, r4, r5, pc}
 8003906:	bf00      	nop
 8003908:	2000009c 	.word	0x2000009c

0800390c <_malloc_r>:
 800390c:	b570      	push	{r4, r5, r6, lr}
 800390e:	1ccd      	adds	r5, r1, #3
 8003910:	f025 0503 	bic.w	r5, r5, #3
 8003914:	3508      	adds	r5, #8
 8003916:	2d0c      	cmp	r5, #12
 8003918:	bf38      	it	cc
 800391a:	250c      	movcc	r5, #12
 800391c:	2d00      	cmp	r5, #0
 800391e:	4606      	mov	r6, r0
 8003920:	db01      	blt.n	8003926 <_malloc_r+0x1a>
 8003922:	42a9      	cmp	r1, r5
 8003924:	d903      	bls.n	800392e <_malloc_r+0x22>
 8003926:	230c      	movs	r3, #12
 8003928:	6033      	str	r3, [r6, #0]
 800392a:	2000      	movs	r0, #0
 800392c:	bd70      	pop	{r4, r5, r6, pc}
 800392e:	f000 f87d 	bl	8003a2c <__malloc_lock>
 8003932:	4a21      	ldr	r2, [pc, #132]	; (80039b8 <_malloc_r+0xac>)
 8003934:	6814      	ldr	r4, [r2, #0]
 8003936:	4621      	mov	r1, r4
 8003938:	b991      	cbnz	r1, 8003960 <_malloc_r+0x54>
 800393a:	4c20      	ldr	r4, [pc, #128]	; (80039bc <_malloc_r+0xb0>)
 800393c:	6823      	ldr	r3, [r4, #0]
 800393e:	b91b      	cbnz	r3, 8003948 <_malloc_r+0x3c>
 8003940:	4630      	mov	r0, r6
 8003942:	f000 f863 	bl	8003a0c <_sbrk_r>
 8003946:	6020      	str	r0, [r4, #0]
 8003948:	4629      	mov	r1, r5
 800394a:	4630      	mov	r0, r6
 800394c:	f000 f85e 	bl	8003a0c <_sbrk_r>
 8003950:	1c43      	adds	r3, r0, #1
 8003952:	d124      	bne.n	800399e <_malloc_r+0x92>
 8003954:	230c      	movs	r3, #12
 8003956:	4630      	mov	r0, r6
 8003958:	6033      	str	r3, [r6, #0]
 800395a:	f000 f868 	bl	8003a2e <__malloc_unlock>
 800395e:	e7e4      	b.n	800392a <_malloc_r+0x1e>
 8003960:	680b      	ldr	r3, [r1, #0]
 8003962:	1b5b      	subs	r3, r3, r5
 8003964:	d418      	bmi.n	8003998 <_malloc_r+0x8c>
 8003966:	2b0b      	cmp	r3, #11
 8003968:	d90f      	bls.n	800398a <_malloc_r+0x7e>
 800396a:	600b      	str	r3, [r1, #0]
 800396c:	18cc      	adds	r4, r1, r3
 800396e:	50cd      	str	r5, [r1, r3]
 8003970:	4630      	mov	r0, r6
 8003972:	f000 f85c 	bl	8003a2e <__malloc_unlock>
 8003976:	f104 000b 	add.w	r0, r4, #11
 800397a:	1d23      	adds	r3, r4, #4
 800397c:	f020 0007 	bic.w	r0, r0, #7
 8003980:	1ac3      	subs	r3, r0, r3
 8003982:	d0d3      	beq.n	800392c <_malloc_r+0x20>
 8003984:	425a      	negs	r2, r3
 8003986:	50e2      	str	r2, [r4, r3]
 8003988:	e7d0      	b.n	800392c <_malloc_r+0x20>
 800398a:	684b      	ldr	r3, [r1, #4]
 800398c:	428c      	cmp	r4, r1
 800398e:	bf16      	itet	ne
 8003990:	6063      	strne	r3, [r4, #4]
 8003992:	6013      	streq	r3, [r2, #0]
 8003994:	460c      	movne	r4, r1
 8003996:	e7eb      	b.n	8003970 <_malloc_r+0x64>
 8003998:	460c      	mov	r4, r1
 800399a:	6849      	ldr	r1, [r1, #4]
 800399c:	e7cc      	b.n	8003938 <_malloc_r+0x2c>
 800399e:	1cc4      	adds	r4, r0, #3
 80039a0:	f024 0403 	bic.w	r4, r4, #3
 80039a4:	42a0      	cmp	r0, r4
 80039a6:	d005      	beq.n	80039b4 <_malloc_r+0xa8>
 80039a8:	1a21      	subs	r1, r4, r0
 80039aa:	4630      	mov	r0, r6
 80039ac:	f000 f82e 	bl	8003a0c <_sbrk_r>
 80039b0:	3001      	adds	r0, #1
 80039b2:	d0cf      	beq.n	8003954 <_malloc_r+0x48>
 80039b4:	6025      	str	r5, [r4, #0]
 80039b6:	e7db      	b.n	8003970 <_malloc_r+0x64>
 80039b8:	2000009c 	.word	0x2000009c
 80039bc:	200000a0 	.word	0x200000a0

080039c0 <_realloc_r>:
 80039c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80039c2:	4607      	mov	r7, r0
 80039c4:	4614      	mov	r4, r2
 80039c6:	460e      	mov	r6, r1
 80039c8:	b921      	cbnz	r1, 80039d4 <_realloc_r+0x14>
 80039ca:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80039ce:	4611      	mov	r1, r2
 80039d0:	f7ff bf9c 	b.w	800390c <_malloc_r>
 80039d4:	b922      	cbnz	r2, 80039e0 <_realloc_r+0x20>
 80039d6:	f7ff ff4d 	bl	8003874 <_free_r>
 80039da:	4625      	mov	r5, r4
 80039dc:	4628      	mov	r0, r5
 80039de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80039e0:	f000 f826 	bl	8003a30 <_malloc_usable_size_r>
 80039e4:	42a0      	cmp	r0, r4
 80039e6:	d20f      	bcs.n	8003a08 <_realloc_r+0x48>
 80039e8:	4621      	mov	r1, r4
 80039ea:	4638      	mov	r0, r7
 80039ec:	f7ff ff8e 	bl	800390c <_malloc_r>
 80039f0:	4605      	mov	r5, r0
 80039f2:	2800      	cmp	r0, #0
 80039f4:	d0f2      	beq.n	80039dc <_realloc_r+0x1c>
 80039f6:	4631      	mov	r1, r6
 80039f8:	4622      	mov	r2, r4
 80039fa:	f7ff fbf1 	bl	80031e0 <memcpy>
 80039fe:	4631      	mov	r1, r6
 8003a00:	4638      	mov	r0, r7
 8003a02:	f7ff ff37 	bl	8003874 <_free_r>
 8003a06:	e7e9      	b.n	80039dc <_realloc_r+0x1c>
 8003a08:	4635      	mov	r5, r6
 8003a0a:	e7e7      	b.n	80039dc <_realloc_r+0x1c>

08003a0c <_sbrk_r>:
 8003a0c:	b538      	push	{r3, r4, r5, lr}
 8003a0e:	2300      	movs	r3, #0
 8003a10:	4c05      	ldr	r4, [pc, #20]	; (8003a28 <_sbrk_r+0x1c>)
 8003a12:	4605      	mov	r5, r0
 8003a14:	4608      	mov	r0, r1
 8003a16:	6023      	str	r3, [r4, #0]
 8003a18:	f7fd fd12 	bl	8001440 <_sbrk>
 8003a1c:	1c43      	adds	r3, r0, #1
 8003a1e:	d102      	bne.n	8003a26 <_sbrk_r+0x1a>
 8003a20:	6823      	ldr	r3, [r4, #0]
 8003a22:	b103      	cbz	r3, 8003a26 <_sbrk_r+0x1a>
 8003a24:	602b      	str	r3, [r5, #0]
 8003a26:	bd38      	pop	{r3, r4, r5, pc}
 8003a28:	20000144 	.word	0x20000144

08003a2c <__malloc_lock>:
 8003a2c:	4770      	bx	lr

08003a2e <__malloc_unlock>:
 8003a2e:	4770      	bx	lr

08003a30 <_malloc_usable_size_r>:
 8003a30:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003a34:	1f18      	subs	r0, r3, #4
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	bfbc      	itt	lt
 8003a3a:	580b      	ldrlt	r3, [r1, r0]
 8003a3c:	18c0      	addlt	r0, r0, r3
 8003a3e:	4770      	bx	lr

08003a40 <_init>:
 8003a40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003a42:	bf00      	nop
 8003a44:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003a46:	bc08      	pop	{r3}
 8003a48:	469e      	mov	lr, r3
 8003a4a:	4770      	bx	lr

08003a4c <_fini>:
 8003a4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003a4e:	bf00      	nop
 8003a50:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003a52:	bc08      	pop	{r3}
 8003a54:	469e      	mov	lr, r3
 8003a56:	4770      	bx	lr
